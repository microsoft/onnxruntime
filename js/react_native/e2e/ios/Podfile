require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, '15.1'

pre_install do |installer|
  # Custom pre-install script or commands
  puts "Running pre-install script..."

  # Recommended fix for https://github.com/facebook/react-native/issues/32483
  # from https://github.com/facebook/react-native/issues/32483#issuecomment-966784501
  system("sed -i '' 's/typedef uint8_t clockid_t;//' \"./Pods/RCT-Folly/folly/portability/Time.h\"")
end

target 'OnnxruntimeModuleExample' do
  config = use_native_modules!
  # Flags change depending on the env values.
  flags = get_default_flags()

    use_react_native!(
    :path => config[:reactNativePath],

    # Hermes is now enabled by default. Disable by setting this flag to false.
    # Upcoming versions of React Native may rely on get_default_flags(), but
    # we make it explicit here to aid in the React Native upgrade process.
#   TODO: fingure out while main.jsbundle is generated in
#   ios/build/Build/Products/Debug-iphonesimulator/ instead of
#   ios/build/Build/Products/Debug-iphonesimulator/OnnxruntimeModuleExample.app
#   folder when hermes_enabled is set to false

    :hermes_enabled => true,
#     :flipper_configuration => FlipperConfiguration.enabled,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )


  ort_c_local_pod_path = ENV['ORT_C_LOCAL_POD_PATH']
  if ort_c_local_pod_path != nil
    print 'Using onnxruntime-c pod at ', ort_c_local_pod_path, "\n"
    pod 'onnxruntime-c', :path => ort_c_local_pod_path
  end
  pod 'onnxruntime-react-native', :path => '../node_modules/onnxruntime-react-native'

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
    )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
  end
end