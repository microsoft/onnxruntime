#!/usr/bin/env python3

# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

import argparse
import pathlib
import shutil
import sys


_script_dir = pathlib.Path(__file__).parent.resolve(strict=True)
sys.path.append(str(_script_dir.parent))


from package_assembly_utils import (  # noqa: E402
    copy_repo_relative_to_dir, gen_file_from_template, load_framework_info)


def parse_args():
    parser = argparse.ArgumentParser(description="""
        Assembles the files for the C/C++ pod package in a staging directory.
        This directory can be validated (e.g., with `pod lib lint`) and then zipped to create a package for release.
    """)

    parser.add_argument("--staging-dir", type=pathlib.Path,
                        default=pathlib.Path("./onnxruntime-mobile-c-staging"),
                        help="Path to the staging directory for the C/C++ pod files.")
    parser.add_argument("--pod-version", required=True,
                        help="C/C++ pod version.")
    parser.add_argument("--framework-info-file", type=pathlib.Path, required=True,
                        help="Path to the framework_info.json file containing additional values for the podspec. "
                             "This file should be generated by CMake in the build directory.")
    parser.add_argument("--framework-dir", type=pathlib.Path, required=True,
                        help="Path to the onnxruntime.framework directory to include in the pod.")

    return parser.parse_args()


def main():
    args = parse_args()

    framework_info = load_framework_info(args.framework_info_file.resolve())

    staging_dir = args.staging_dir.resolve()
    print(f"Assembling files in staging directory: {staging_dir}")
    if staging_dir.exists():
        print("Warning: staging directory already exists", file=sys.stderr)

    # copy the necessary files to the staging directory
    framework_dir = args.framework_dir.resolve()
    shutil.copytree(framework_dir, staging_dir / framework_dir.name, dirs_exist_ok=True)
    copy_repo_relative_to_dir(["LICENSE"], staging_dir)

    # generate the podspec file from the template

    variable_substitutions = {
        "VERSION": args.pod_version,
        "IOS_DEPLOYMENT_TARGET": framework_info["IOS_DEPLOYMENT_TARGET"],
        "WEAK_FRAMEWORK": framework_info["WEAK_FRAMEWORK"],
        "LICENSE_FILE": '"LICENSE"',
    }

    podspec_template = _script_dir / "onnxruntime-mobile-c.podspec.template"
    podspec = staging_dir / "onnxruntime-mobile-c.podspec"

    gen_file_from_template(podspec_template, podspec, variable_substitutions)

    return 0


if __name__ == "__main__":
    sys.exit(main())
