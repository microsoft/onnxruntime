parameters:
  DoEsrp: 'false'
  DoCompliance: 'false'
  BuildCSharp: 'false'

jobs:
- template: ../../templates/win-ci-2019.yml
  parameters:
    AgentPool : 'Win-CPU-2019'
    ArtifactName: 'drop-nodejs-win32'
    JobName: 'Windows_CI'
    BuildCommand:  '--build_dir $(Build.BinariesDirectory) --skip_submodule_sync --use_openmp --build_nodejs --enable_onnx_tests --enable_wcos --use_telemetry --cmake_generator "Visual Studio 16 2019"'
    BuildArch: 'x64'
    EnvSetupScript: 'setup_env.bat'
    sln_platform: 'x64'
    DoDebugBuild: 'false'
    DoNodejsPack : 'true'
    DoNugetPack: 'false'
    DoEsrp: ${{ parameters.DoEsrp }}
    DoCompliance: ${{ parameters.DoCompliance }}
    BuildCSharp: ${{ parameters.BuildCSharp }}

- template: ../../templates/mac-ci.yml
  parameters:
    AgentPool : $(AgentPoolMacOS)
    ArtifactName: 'drop-nodejs-darwin'
    JobName: 'Mac_CI'
    BuildCommand: 'python3 $(Build.SourcesDirectory)/tools/ci_build/build.py --use_openmp --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --parallel --build_nodejs --config Release'
    DoNodejsPack : 'true'
    DoNugetPack: 'false'
    DoEsrp: ${{ parameters.DoEsrp }}

- job: 'Linux_CI'
  workspace:
    clean: all
  timeoutInMinutes: 120
  pool: $(AgentPoolLinux)
  steps:    
    - template: ../../templates/set-version-number-variables-step.yml
    - template: ../../templates/linux-set-variables-and-download.yml
    - template: ../../templates/get-docker-image-steps.yml
      parameters:
        Dockerfile: tools/ci_build/github/linux/docker/Dockerfile.centos
        Context: tools/ci_build/github/linux/docker
        DockerBuildArgs: "--build-arg BUILD_UID=$( id -u )"
        Repository: onnxruntimecentoscpubuild
    - task: CmdLine@2
      inputs:
        script: |
          mkdir -p $HOME/.onnx && docker run --rm --volume /data/onnx:/data/onnx:ro --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build --volume /data/models:/build/models:ro \
          --volume $HOME/.onnx:/home/onnxruntimedev/.onnx -e NIGHTLY_BUILD onnxruntimecentoscpubuild /bin/bash -c "python3 \
          /onnxruntime_src/tools/ci_build/build.py --build_dir /build --config Release --build_nodejs \
          --skip_submodule_sync  --parallel --build_shared_lib --use_openmp && cd /onnxruntime_src/nodejs && npm pack"
        workingDirectory: $(Build.SourcesDirectory)
    - script: |
       set -e -x
       cp $(Build.SourcesDirectory)/nodejs/onnxruntime-*.tgz $(Build.ArtifactStagingDirectory)
       cp -R $(Build.SourcesDirectory)/nodejs/prebuilds $(Build.ArtifactStagingDirectory)/prebuilds
      displayName: 'Create Artifacts'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'drop-linux'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - template: ../../templates/component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'
    - template: ../../templates/clean-agent-build-directory-step.yml
