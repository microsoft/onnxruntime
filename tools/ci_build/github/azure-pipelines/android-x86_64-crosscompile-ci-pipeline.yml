##### start trigger Don't edit it manually, Please do edit set-trigger-rules.py ####
trigger:
  branches:
    include:
    - main
    - rel-*
  paths:
    exclude:
    - docs/**
    - README.md
    - CONTRIBUTING.md
    - BUILD.md
    - 'js/web'
    - 'onnxruntime/core/providers/js'
pr:
  branches:
    include:
    - main
    - rel-*
  paths:
    exclude:
    - docs/**
    - README.md
    - CONTRIBUTING.md
    - BUILD.md
    - 'js/web'
    - 'onnxruntime/core/providers/js'
#### end trigger ####

# Known Limits
# 1. Anchors are not supported in GHA
# https://github.community/t/support-for-yaml-anchors/16128/90
# 2. today most cloud-based CI services are still lacking hardware acceleration support from the host VM,
# which is the no.1 blocker for running tests on modern Android Emulators (especially on recent API levels) on CI.

# It'd better to check out https://github.com/microsoft/onnxruntime/wiki/Leverage-Existing-Artifacts
# to save debugging time.
parameters:
- name: specificArtifact
  displayName: Use Specific Artifact
  type: boolean
  default: false
- name: runId
  displayName: Specific Artifact's RunId
  type: number
  default: 0

stages:
# Separate stage for building CPU vs NNAPI as we only want CodeQL to run on one of them so we don't get duplicate
# issues for code that is built in both. We pick NNAPI as that includes the NNAPI EP code.
- stage: BUILD_AND_TEST_CPU
  dependsOn: []
  variables:
    Codeql.Enabled: false
  jobs:
  - job: BUILD_AND_TEST_CPU
    pool: onnxruntime-Ubuntu2204-AMD-CPU
    workspace:
      clean: all
    timeoutInMinutes: 30
    steps:
    # Onnx has no 3.9 python package available yet, need to use python 3.8
    # to avoid build onnx package
    # pythonVersion can be updated in Azure pipeline settings
    # https://dev.azure.com/onnxruntime/onnxruntime/_build?definitionId=53
    - task: UsePythonVersion@0
      displayName: Use Python $(pythonVersion)
      inputs:
        versionSpec: $(pythonVersion)

    - task: JavaToolInstaller@0
      displayName: Use jdk 11
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - script: sudo apt-get update -y && sudo apt-get install -y coreutils ninja-build
      displayName: Install coreutils and ninja

    - template: templates/use-android-ndk.yml
    - template: templates/use-android-emulator.yml
      parameters:
        create: true
        start: true
    - script: |
        env | grep ANDROID
      displayName: View Android ENVs
    - script: |
        python3 tools/ci_build/build.py \
          --enable_lto \
          --android \
          --build_dir build \
          --android_sdk_path $ANDROID_HOME \
          --android_ndk_path $ANDROID_NDK_HOME \
          --android_abi=x86_64 \
          --android_api=30 \
          --skip_submodule_sync \
          --parallel \
          --cmake_generator=Ninja \
          --build_java
      displayName: CPU EP, Build and Test
    - template: templates/use-android-emulator.yml
      parameters:
        stop: true

    - template: templates/clean-agent-build-directory-step.yml

- stage: BUILD_AND_TEST_NNAPI_EP
  dependsOn: []
  condition: notIn(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')
  variables:
    Codeql.ProjectConfigPath: .github/workflows
    Codeql.Enabled: true
    Codeql.Language: cpp
    ${{ if variables['Codeql.Enabled'] }}:
      JobsTimeout: 120
    ${{ else }}:
      JobsTimeout: 60
  jobs:
  - job: BUILD_AND_TEST_NNAPI_EP
    pool: onnxruntime-Ubuntu2204-AMD-CPU
    timeoutInMinutes: ${{ variables.JobsTimeout }}
    workspace:
      clean: all
    steps:
    - task: UsePythonVersion@0
      displayName: Use Python $(pythonVersion)
      inputs:
        versionSpec: $(pythonVersion)

    - task: JavaToolInstaller@0
      displayName: Use jdk 11
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - script: sudo apt-get update -y && sudo apt-get install -y coreutils ninja-build
      displayName: Install coreutils and ninja
    - template: templates/use-android-emulator.yml
      parameters:
        create: true
        start: true

    - script: |
        env | grep ANDROID
      displayName: View Android ENVs

    - script: |
        python3 tools/ci_build/build.py \
        --enable_lto \
        --android \
        --build_dir build_nnapi \
        --android_sdk_path $ANDROID_HOME \
        --android_ndk_path $ANDROID_NDK_HOME \
        --android_abi=x86_64 \
        --android_api=29 \
        --skip_submodule_sync \
        --parallel \
        --use_nnapi \
        --build_shared_lib \
        --cmake_generator=Ninja \
        --build_java
      displayName: NNAPI EP, Build, Test on Android Emulator

    - script: /bin/bash tools/ci_build/github/linux/ort_minimal/nnapi_minimal_build_minimal_ort_and_run_tests.sh $(pwd)
      # Build Minimal ORT with NNAPI and reduced Ops, run unit tests on Android Emulator
      displayName: Build Minimal ORT with NNAPI and run tests

    - template: templates/use-android-emulator.yml
      parameters:
        stop: true

    - template: templates/clean-agent-build-directory-step.yml

- stage: MAIN_BUILD_STAGE
  # The below jobs only run on build of main branch.
  # because coverage report is hard to support in cross machines.
  displayName: NNAPI MAIN BUILD&TEST
  dependsOn: []
  condition: in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')
  jobs:
  - job: NNAPI_EP_MASTER
    pool: onnxruntime-Ubuntu2204-AMD-CPU
    timeoutInMinutes: 180
    workspace:
      clean: all
    condition: in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')
    steps:
      - task: UsePythonVersion@0
        displayName: Use Python $(pythonVersion)
        inputs:
          versionSpec: $(pythonVersion)

      - task: JavaToolInstaller@0
        displayName: Use jdk 11
        inputs:
          versionSpec: '11'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      - template: templates/use-android-ndk.yml

      - template: templates/use-android-emulator.yml
        parameters:
          create: true
          start: true

      - script: |
          python3 tools/ci_build/build.py \
          --enable_lto \
          --android \
          --build_dir build_nnapi \
          --android_sdk_path $ANDROID_HOME \
          --android_ndk_path $ANDROID_NDK_HOME \
          --android_abi=x86_64 \
          --android_api=29 \
          --skip_submodule_sync \
          --parallel \
          --use_nnapi \
          --build_shared_lib \
          --cmake_generator=Ninja \
          --build_java \
          --code_coverage
        displayName: NNAPI EP, Build, Test, CodeCoverage on Android Emulator

      # We need to use llvm-cov from the NDK.
      - script: |
          export GCOV="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-cov gcov"
          python3 -m pip install gcovr
          python3 tools/ci_build/coverage.py --build_dir build_nnapi --android_sdk_path $ANDROID_HOME
        displayName: Retrieve runtime code coverage files from the emulator and analyze

      - script: cat '$(Build.SourcesDirectory)/build_nnapi/Debug/coverage_rpt.txt'
        displayName: Print coverage report

      # - task: AzureCLI@2
      #   displayName: 'Post Android Code Coverage To DashBoard'
      #   inputs:
      #     azureSubscription: AIInfraBuild
      #     scriptType: bash
      #     scriptPath: $(Build.SourcesDirectory)/tools/ci_build/github/linux/upload_code_coverage_data.sh
      #     arguments: '"$(Build.SourcesDirectory)/build_nnapi/Debug/coverage_rpt.txt" "https://dev.azure.com/onnxruntime/onnxruntime/_build/results?buildId=$(Build.BuildId)" arm android nnapi'
      #     workingDirectory: '$(Build.BinariesDirectory)'

      - script: /bin/bash tools/ci_build/github/linux/ort_minimal/nnapi_minimal_build_minimal_ort_and_run_tests.sh $(pwd)
        # Build Minimal ORT with NNAPI and reduced Ops, run unit tests on Android Emulator
        displayName: Build Minimal ORT with NNAPI and run tests

      - template: templates/use-android-emulator.yml
        parameters:
          stop: true

      - template: templates/clean-agent-build-directory-step.yml
