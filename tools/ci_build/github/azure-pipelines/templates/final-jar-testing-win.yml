parameters:
- name: PoolName
  type: string

stages:
- stage: Final_Jar_Testing_Windows
  dependsOn: []
  jobs:
  - job: Final_Jar_Testing_Windows
    workspace:
      clean: all
    pool:
      name: ${{ parameters.PoolName }}
    variables:
    - name: runCodesignValidationInjection
      value: false
    timeoutInMinutes: 60
    steps:
    - template: set-version-number-variables-step.yml

    - pwsh: |
        echo "Downloading and installing Maven $(mavenVersion) for Windows..."
        $MAVEN_DIR = "$(Agent.TempDirectory)\apache-maven-$(mavenVersion)"
        # Download Maven binary
        Invoke-WebRequest -Uri "https://archive.apache.org/dist/maven/maven-3/$(mavenVersion)/binaries/apache-maven-$(mavenVersion)-bin.zip" -OutFile "$(Agent.TempDirectory)\maven.zip"

        # Extract to the temp directory
        Expand-Archive -Path "$(Agent.TempDirectory)\maven.zip" -DestinationPath "$(Agent.TempDirectory)"

        # Add Maven's bin directory to the PATH for subsequent tasks in the job
        echo "##vso[task.prependpath]$MAVEN_DIR\bin"
      displayName: 'Install Maven (Windows)'


    - script: |
        echo "Maven is now on the PATH."
        mvn --version

    - download: build
      artifact: 'onnxruntime-java'
      displayName: 'Download Final Jar'

    - task: Maven@4
      displayName: 'Download Dependencies into App Folder'
      inputs:
        mavenPomFile: '$(Build.SourcesDirectory)/tools/ci_build/java/pom.xml'
        goals: 'dependency:copy-dependencies'
        options: '-DoutputDirectory=$(Pipeline.Workspace)/build/onnxruntime-java'
        publishJUnitTestResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'

    - task: PowerShell@2
      displayName: 'Run Java Tests on Windows'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
      inputs:
        targetType: 'inline'
        script: |
          $ErrorActionPreference = "Stop"
          cd $(Pipeline.Workspace)/build/onnxruntime-java
          del *.asc
          del *.sha256
          del *.sha512
          del *.pom
          cd ..
          mkdir tests
          cd tests
          jar xf $(Pipeline.Workspace)/build/onnxruntime-java/testing.jar
          del $(Pipeline.Workspace)/build/onnxruntime-java/testing.jar
          dir $(Pipeline.Workspace)/build/tests
          Write-Host "Running JUnit Tests..."
          & java `
            -cp "$(Pipeline.Workspace)\build\tests;$(Pipeline.Workspace)\build\onnxruntime-java\*" org.junit.platform.console.ConsoleLauncher --scan-classpath=$(Pipeline.Workspace)\build\tests `
            --fail-if-no-tests --disable-banner --reports-dir "$($env:Build_ArtifactStagingDirectory)/TestResults"

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/TestResults/TEST-junit-jupiter.xml'
        failTaskOnFailedTests: true
