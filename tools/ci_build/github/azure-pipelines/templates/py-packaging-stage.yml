parameters:
- name: build_py_parameters
  displayName: >
    Extra parameters to pass to build.py. Don't put newlines in here.
  type: string
  default: ''

- name: enable_linux_cpu
  displayName: 'Whether Linux CPU package is built.'
  type: boolean
  default: true

- name: enable_linux_gpu
  displayName: 'Whether Linux GPU package is built.'
  type: boolean
  default: true

- name: enable_linux_gpu_training
  displayName: 'Whether Linux GPU package is built.'
  type: boolean
  default: false

- name: enable_linux_gpu_py35
  displayName: >
    Whether Linux GPU package is built for Python 3.5.
    enable_linux_gpu must be true for this to have an effect.
  type: boolean
  default: true

- name: enable_windows_cpu
  displayName: 'Whether Windows CPU package is built.'
  type: boolean
  default: true

- name: enable_windows_gpu
  displayName: 'Whether Windows GPU package is built.'
  type: boolean
  default: true

- name: enable_mac_cpu
  displayName: 'Whether Mac CPU package is built.'
  type: boolean
  default: true

- name: enable_linux_arm
  displayName: 'Whether Linux ARM package is built.'
  type: boolean
  default: true

- name: docker_image_prefix
  displayName: 'Prefix to use for docker image names.'
  type: string
  default: 'onnxruntime'

- name: linux_gpu_dockerfile
  displayName: >
    Name of the Dockerfile to use for the Linux GPU build.
    This should refer to a Dockerfile at tools/ci_build/github/linux/docker.
  type: string
  default: 'Dockerfile.manylinux2010_gpu'

stages:
- stage: Python_Packaging

  jobs:
  - ${{ if eq(parameters.enable_linux_cpu, true) }}:
    - job: Linux_py_Wheels
      timeoutInMinutes: 90
      workspace:
        clean: all
      pool: Linux-CPU
      strategy:
        matrix:
          Python35:
            python.version: '3.5'
          Python36:
            python.version: '3.6'
          Python37:
            python.version: '3.7'
          Python38:
            python.version: '3.8'
      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - template: set-py-packaging-variables-step.yml

      - task: Docker@2
        displayName: login
        inputs:
          containerRegistry: onnxruntimeregistry
          command: login
          addPipelineData: false
      - task: CmdLine@2
        inputs:
          script: |
            mkdir -p $HOME/.onnx
            docker run --rm \
              --volume /data/onnx:/data/onnx:ro \
              --volume $(Build.SourcesDirectory):/onnxruntime_src \
              --volume $(Build.BinariesDirectory):/build \
              --volume /data/models:/build/models:ro \
              --volume $HOME/.onnx:/home/onnxruntimedev/.onnx \
              -e NIGHTLY_BUILD \
              -e BUILD_BUILDNUMBER \
              onnxruntimeregistry.azurecr.io/internal/azureml/onnxruntimecpubuild:ch2j \
                $(python.manylinux.dir)/bin/python3 /onnxruntime_src/tools/ci_build/build.py \
                  --build_dir /build --cmake_generator Ninja \
                  --config Release \
                  --skip_submodule_sync \
                  --parallel \
                  --enable_lto \
                  --build_wheel \
                  --use_openmp \
                  --enable_onnx_tests \
                  ${{ parameters.build_py_parameters }} \
                  --cmake_extra_defines PYTHON_INCLUDE_DIR=$(python.manylinux.include.dir) PYTHON_LIBRARY=/usr/lib64/librt.so
          workingDirectory: $(Build.SourcesDirectory)
      - task: Docker@2
        displayName: logout
        inputs:
          containerRegistry: onnxruntimeregistry
          command: logout
          addPipelineData: false
      - task: CopyFiles@2
        displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.BinariesDirectory)'
          Contents: 'Release/dist/*.whl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: ONNXRuntime python wheel'
        inputs:
          ArtifactName: onnxruntime

      - template: component-governance-component-detection-steps.yml
        parameters:
          condition: 'succeeded'

      - template: clean-agent-build-directory-step.yml

  - ${{ if eq(parameters.enable_linux_gpu, true) }}:
    - job: Linux_py_GPU_Wheels
      timeoutInMinutes: 120
      workspace:
        clean: all
      pool: Linux-GPU-CUDA10
      strategy:
        matrix:
          Python35:
            python.version: '3.5'
          Python36:
            python.version: '3.6'
          Python37:
            python.version: '3.7'
          Python38:
            python.version: '3.8'
      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - template: set-py-packaging-variables-step.yml

      - task: Docker@2
        displayName: login
        inputs:
          containerRegistry: onnxruntimeregistry
          command: login
          addPipelineData: false
      - task: CmdLine@2
        inputs:
          script: |
            mkdir -p $HOME/.onnx
            docker run --gpus all --rm \
              --volume /data/onnx:/data/onnx:ro \
              --volume $(Build.SourcesDirectory):/onnxruntime_src \
              --volume $(Build.BinariesDirectory):/build \
              --volume /data/models:/build/models:ro \
              --volume $HOME/.onnx:/home/onnxruntimedev/.onnx \
              -e NIGHTLY_BUILD \
              -e BUILD_BUILDNUMBER \
              onnxruntimeregistry.azurecr.io/internal/azureml/onnxruntimecuda102build:ch2q \
                $(python.manylinux.dir)/bin/python3 /onnxruntime_src/tools/ci_build/build.py \
                  --build_dir /build --cmake_generator Ninja \
                  --config Release \
                  --skip_submodule_sync \
                  --parallel \
                  --build_wheel \
                  --enable_onnx_tests --use_cuda --cuda_version=10.2 --cuda_home=/usr/local/cuda-10.2 --cudnn_home=/usr/local/cuda-10.2 \
                  ${{ parameters.build_py_parameters }} \
                  --cmake_extra_defines PYTHON_INCLUDE_DIR=$(python.manylinux.include.dir) PYTHON_LIBRARY=/usr/lib64/librt.so
          workingDirectory: $(Build.SourcesDirectory)

      - task: Docker@2
        displayName: logout
        inputs:
          containerRegistry: onnxruntimeregistry
          command: logout
          addPipelineData: false

      - task: CopyFiles@2
        displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.BinariesDirectory)'
          Contents: 'Release/dist/*.whl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: ONNXRuntime python wheel'
        inputs:
          ArtifactName: onnxruntime_gpu

      - template: component-governance-component-detection-steps.yml
        parameters:
          condition: 'succeeded'

      - template: clean-agent-build-directory-step.yml

  - ${{ if eq(parameters.enable_linux_gpu_training, true) }}:
    - job: Linux_py_GPU_Wheels
      timeoutInMinutes: 120
      workspace:
        clean: all
      pool: Linux-GPU-CUDA10
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
          Python37:
            python.version: '3.7'
          Python38:
            python.version: '3.8'
      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - template: set-py-packaging-variables-step.yml

      - task: CmdLine@2
        inputs:
          script: |
            docker build --pull \
              -t ${{ parameters.docker_image_prefix }}-manylinux-gpu-$(python.version) \
              --build-arg BUILD_USER=onnxruntimedev \
              --build-arg BUILD_UID=$(id -u) \
              --build-arg PYTHON_VERSION=$(python.version) \
              --build-arg BUILD_EXTR_PAR="${{ parameters.build_py_parameters }}" \
              -f ${{ parameters.linux_gpu_dockerfile }} .
          workingDirectory: $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker
      - task: CmdLine@2
        inputs:
          script: |
            mkdir -p $HOME/.onnx
            docker run --rm --gpus all \
              --volume /data/onnx:/data/onnx:ro \
              --volume $(Build.SourcesDirectory):/onnxruntime_src \
              --volume $(Build.BinariesDirectory):/build \
              --volume /data/models:/build/models:ro \
              --volume $HOME/.onnx:/home/onnxruntimedev/.onnx \
              -e NVIDIA_VISIBLE_DEVICES=all \
              -e NIGHTLY_BUILD \
              -e BUILD_BUILDNUMBER \
              ${{ parameters.docker_image_prefix }}-manylinux-gpu-$(python.version) \
                $(python.manylinux.dir)/bin/python3 /onnxruntime_src/tools/ci_build/build.py \
                  --build_dir /build \
                  --config Release \
                  --skip_submodule_sync \
                  --parallel \
                  --build_wheel \
                  --enable_onnx_tests \
                  ${{ parameters.build_py_parameters }} \
                  --cmake_extra_defines PYTHON_INCLUDE_DIR=$(python.manylinux.include.dir) PYTHON_LIBRARY=/usr/lib64/librt.so \
                  --use_cuda --cuda_version=10.2 --cuda_home=/usr/local/cuda-10.2 --cudnn_home=/usr/local/cuda-10.2
          workingDirectory: $(Build.SourcesDirectory)

      - task: CopyFiles@2
        displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.BinariesDirectory)'
          Contents: 'Release/dist/*.whl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: ONNXRuntime python wheel'
        inputs:
          ArtifactName: onnxruntime_gpu

      - template: component-governance-component-detection-steps.yml
        parameters:
          condition: 'succeeded'

      - template: clean-agent-build-directory-step.yml

  - ${{ if eq(parameters.enable_windows_cpu, true) }}:
    - job: Windows_py_Wheels
      pool: 'Win-CPU-2019'
      strategy:
        matrix:
          Python35:
            python.version: '3.5'
          Python36:
            python.version: '3.6'
          Python37:
            python.version: '3.7'
          Python38:
            python.version: '3.8'
      variables:
        OrtPackageId: 'Microsoft.ML.OnnxRuntime'
        MsbuildArguments: '-maxcpucount'
        OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        setVcvars: true
        BuildConfig: 'Release'
        GDN_CODESIGN_TARGETDIRECTORY: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\dist'
      timeoutInMinutes: 120
      workspace:
        clean: all

      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - template: telemetry-steps.yml

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python.version)
          addToPath: true
          architecture: 'x64'

      - template: set-nightly-build-option-variable-step.yml

      - task: BatchScript@1
        displayName: 'setup env'
        inputs:
          filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
          modifyEnvironment: true
          workingFolder: '$(Build.BinariesDirectory)'

      - script: |
          python -m pip install -q pyopenssl setuptools wheel numpy==1.16.6
        workingDirectory: '$(Build.BinariesDirectory)'
        displayName: 'Install python modules'

      - powershell: |
          $Env:USE_MSVC_STATIC_RUNTIME=1
          $Env:ONNX_ML=1
          $Env:CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DONNX_USE_LITE_PROTO=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=$(buildArch)-windows-static"
          python setup.py bdist_wheel
          Get-ChildItem -Path dist/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname}
        workingDirectory: '$(Build.SourcesDirectory)\cmake\external\onnx'
        displayName: 'Install ONNX'

      - task: PythonScript@0
        displayName: 'BUILD'
        inputs:
          scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
          arguments: >
            --config RelWithDebInfo
            --enable_lto
            --disable_rtti
            --build_dir $(Build.BinariesDirectory)
            --skip_submodule_sync
            --cmake_generator "Visual Studio 16 2019"
            --enable_pybind
            --use_openmp
            --enable_onnx_tests
            ${{ parameters.build_py_parameters }}
            --parallel
            $(TelemetryOption)
          workingDirectory: '$(Build.BinariesDirectory)'

      # Esrp signing
      - template: win-esrp-dll.yml
        parameters:
          FolderPath: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\onnxruntime\capi'
          DisplayName: 'ESRP - Sign Native dlls'
          DoEsrp: true
          Pattern: '*.pyd,*.dll'

      - task: PythonScript@0
        displayName: 'Build wheel'
        inputs:
          scriptPath: '$(Build.SourcesDirectory)\setup.py'
          arguments: 'bdist_wheel ${{ parameters.build_py_parameters }} $(NightlyBuildOption)'
          workingDirectory: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'

      - task: CopyFiles@2
        displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
          Contents: '**\dist\*.whl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - script: |
          rename *.whl *.zip
        workingDirectory: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\dist'
        displayName: 'Rename file extension for codesign validation'

      - task: PublishTestResults@2
        displayName: 'Publish unit test results'
        inputs:
          testResultsFiles: '**\*.results.xml'
          searchFolder: '$(Build.BinariesDirectory)'
          testRunTitle: 'Unit Test Run'
        condition: succeededOrFailed()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: ONNXRuntime python wheel'
        inputs:
          ArtifactName: onnxruntime

      - template: component-governance-component-detection-steps.yml
        parameters:
          condition: 'succeeded'

      - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
        displayName: 'Clean Agent Directories'
        condition: always()

  - ${{ if eq(parameters.enable_windows_gpu, true) }}:
    - job: Windows_py_GPU_Wheels
      workspace:
        clean: all
      pool: 'Win-GPU-2019'
      timeoutInMinutes:  120
      variables:
        CUDA_VERSION: '10.1'
        buildArch: x64
        EnvSetupScript: setup_env_cuda.bat
        GDN_CODESIGN_TARGETDIRECTORY: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\dist'
      strategy:
        matrix:
          Python35:
            python.version: '3.5'
          Python36:
            python.version: '3.6'
          Python37:
            python.version: '3.7'
      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - template: telemetry-steps.yml

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python.version)
          addToPath: true
          architecture: 'x64'

      - task: BatchScript@1
        displayName: 'setup env'
        inputs:
          filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
          modifyEnvironment: true
          workingFolder: '$(Build.BinariesDirectory)'

      - script: |
          python -m pip install -q pyopenssl setuptools wheel numpy==1.16.6
        workingDirectory: '$(Build.BinariesDirectory)'
        displayName: 'Install python modules'

      - powershell: |
          $Env:USE_MSVC_STATIC_RUNTIME=1
          $Env:ONNX_ML=1
          $Env:CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DONNX_USE_LITE_PROTO=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=$(buildArch)-windows-static"
          python setup.py bdist_wheel
          Get-ChildItem -Path dist/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname}
        workingDirectory: '$(Build.SourcesDirectory)\cmake\external\onnx'
        displayName: 'Install ONNX'

      - template: set-nightly-build-option-variable-step.yml

      - task: PythonScript@0
        displayName: 'build'
        inputs:
          scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
          arguments: >
            --config RelWithDebInfo
            --build_dir $(Build.BinariesDirectory)
            --skip_submodule_sync
            --cmake_generator "Visual Studio 16 2019"
            --enable_pybind
            --enable_onnx_tests
            ${{ parameters.build_py_parameters }}
            --parallel
            --use_cuda --cuda_version=$(CUDA_VERSION)
            --cuda_home="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$(CUDA_VERSION)"
            --cudnn_home="C:\local\cudnn-$(CUDA_VERSION)-windows10-x64-v7.6.5.32\cuda"
            $(TelemetryOption)
          workingDirectory: '$(Build.BinariesDirectory)'

      # Esrp signing
      - template: win-esrp-dll.yml
        parameters:
          FolderPath: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\onnxruntime\capi'
          DisplayName: 'ESRP - Sign Native dlls'
          DoEsrp: true
          Pattern: '*.pyd,*.dll'

      - task: PythonScript@0
        displayName: 'Build wheel'
        inputs:
          scriptPath: '$(Build.SourcesDirectory)\setup.py'
          arguments: 'bdist_wheel --use_cuda ${{ parameters.build_py_parameters }} $(NightlyBuildOption)'
          workingDirectory: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'

      - task: CopyFiles@2
        displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
          Contents: '**\dist\*.whl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - script: |
          rename *.whl *.zip
        workingDirectory: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\dist'
        displayName: 'Rename file extension for codesign validation'

      - task: PublishTestResults@2
        displayName: 'Publish unit test results'
        inputs:
          testResultsFiles: '**\*.results.xml'
          searchFolder: '$(Build.BinariesDirectory)'
          testRunTitle: 'Unit Test Run'
        condition: succeededOrFailed()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: ONNXRuntime python wheel'
        inputs:
          ArtifactName: onnxruntime_gpu

      - template: component-governance-component-detection-steps.yml
        parameters:
          condition: 'succeeded'

      - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
        displayName: 'Clean Agent Directories'
        condition: always()

  - ${{ if eq(parameters.enable_mac_cpu, true) }}:
    - job: MacOS_py_Wheels
      workspace:
        clean: all
      pool:
        vmImage: 'macOS-10.14'
      strategy:
        matrix:
          Python35:
            python.version: '3.5'
          Python36:
            python.version: '3.6'
          Python37:
            python.version: '3.7'
          Python38:
            python.version: '3.8'
      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - task: UsePythonVersion@0
        displayName: 'Use Python'
        inputs:
          versionSpec: $(python.version)

      - script: |
          sudo python -m pip install -r '$(Build.SourcesDirectory)/tools/ci_build/github/linux/docker/scripts/requirements.txt'
          sudo xcode-select --switch /Applications/Xcode_10.app/Contents/Developer
          ./build.sh --config Release --skip_submodule_sync --parallel --build_wheel --use_openmp ${{ parameters.build_py_parameters }}
        displayName: 'Command Line Script'

      - task: CopyFiles@2
        displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/build/Linux/Release/dist'
          Contents: '*.whl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: ONNXRuntime python wheel'
        inputs:
          ArtifactName: onnxruntime

      - template: component-governance-component-detection-steps.yml
        parameters:
          condition: 'succeeded'

  - ${{ if eq(parameters.enable_linux_arm, true) }}:
    - job: Linux_ARM_py_Wheels
      timeoutInMinutes: 60
      workspace:
        clean: all
      pool: 'Linux-CPU'
      strategy:
        matrix:
          Py37:
            python.version: '3.7'
          Py36:
            python.version: '3.6'
          Py35:
            python.version: '3.5'
      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - template: set-py-packaging-variables-step.yml

      - template: set-nightly-build-option-variable-step.yml

      - task: CmdLine@2
        inputs:
          script: |
            set -e -x
            sudo apt-get install -y qemu-user-static

            cat << EOF > tool-chain.cmake
            SET(CMAKE_SYSTEM_NAME Linux)
            SET(CMAKE_SYSTEM_VERSION 1)
            SET(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
            SET(CMAKE_C_FLAGS "-march=armv8-a -mtune=generic -Wno-unused-parameter -Wno-type-limits")
            SET(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
            SET(CMAKE_CXX_FLAGS "-march=armv8-a -mtune=generic -Wno-unused-parameter -Wno-type-limits")
            SET(CMAKE_FIND_ROOT_PATH /mnt/toolchains/manylinux2014_aarch64)
            SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
            SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
            SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
            SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
            EOF
            export PATH=/mnt/toolchains/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin:$PATH
            azcopy cp https://onnxruntimetestdata.blob.core.windows.net/models/toolchains.tar.xz $(Build.BinariesDirectory)/toolchains.tar.xz
            sudo rm -rf /mnt/toolchains
            sudo mkdir /mnt/toolchains
            sudo tar -Jxf $(Build.BinariesDirectory)/toolchains.tar.xz -C /mnt/toolchains
            aria2c -q https://github.com/protocolbuffers/protobuf/releases/download/v3.11.1/protoc-3.11.1-linux-x86_64.zip
            unzip protoc-3.11.1-linux-x86_64.zip
            sudo cp /mnt/toolchains/manylinux2014_aarch64/usr/include/stdlib.h /mnt/toolchains/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr/include/
            #The PYTHON_EXECUTABLE cmake variable is only used for generating ONNX's protobuf definition file.(Invoking the onnx/gen_proto.py file in ONNX's source folder)
            cmake \
              -Donnxruntime_GCC_STATIC_CPP_RUNTIME=ON \
              -DCMAKE_BUILD_TYPE=Release \
              -Dprotobuf_WITH_ZLIB=OFF \
              -DCMAKE_TOOLCHAIN_FILE=tool-chain.cmake \
              -Donnxruntime_ENABLE_PYTHON=ON \
              -DPYTHON_LIBRARY=dl \
              -DPYTHON_EXECUTABLE=/usr/bin/python3  \
              -Donnxruntime_BUILD_SHARED_LIB=OFF \
              -Donnxruntime_RUN_ONNX_TESTS=OFF \
              -Donnxruntime_DEV_MODE=ON \
              -DONNX_CUSTOM_PROTOC_EXECUTABLE=$(Build.BinariesDirectory)/bin/protoc \
              "-DPYTHON_INCLUDE_DIR=/mnt/toolchains/manylinux2014_aarch64/usr/include;/mnt/toolchains/manylinux2014_aarch64/$(python.manylinux.include.dir)" \
              -DNUMPY_INCLUDE_DIR=/mnt/toolchains \
              $(Build.SourcesDirectory)/cmake
            make -j$(getconf _NPROCESSORS_ONLN)
            docker run --rm \
              -e BUILD_BUILDNUMBER \
              -v /data/onnx:/data/onnx:ro \
              -v /usr/bin/qemu-aarch64-static:/usr/bin/qemu-aarch64-static \
              -v $(Build.BinariesDirectory):/tmp/a \
              -v $(Build.SourcesDirectory):/tmp/b \
              -w /tmp/a \
              -u $(id -u ${USER}):$(id -g ${USER}) \
              quay.io/pypa/manylinux2014_aarch64 \
                '$(python.manylinux.dir)'/bin/python3 /tmp/b/setup.py \
                  bdist_wheel ${{ parameters.build_py_parameters }} $(NightlyBuildOption)

          workingDirectory: $(Build.BinariesDirectory)

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: ONNXRuntime python wheel'
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/dist'
          ArtifactName: onnxruntime

      - template: component-governance-component-detection-steps.yml
        parameters:
          condition: 'succeeded'

      - template: clean-agent-build-directory-step.yml
