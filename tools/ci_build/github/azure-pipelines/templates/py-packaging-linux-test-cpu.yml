parameters:
- name: arch
  type: string

- name: base_image
  type: string

- name: devtoolset_rootpath
  type: string

- name: ld_library_path_arg
  type: string

- name: prepend_path
  type: string

- name: machine_pool
  type: string

- name: extra_job_id
  type: string
  default: ''

- name: python_wheel_suffix
  type: string
  default: ''


# TODO: Ideally it should fetch information from the build that triggers it
- name: cmake_build_type
  type: string
  default: 'Release'
  values:
   - Debug
   - Release
   - RelWithDebInfo
   - MinSizeRel

- name: timeout
  type: number
  default: 120

jobs:
- job: Linux_Test_CPU${{ parameters.extra_job_id }}_${{ parameters.arch }}
  timeoutInMinutes: ${{ parameters.timeout }}
  variables:
    skipComponentGovernanceDetection: true
  workspace:
    clean: all
  pool: ${{ parameters.machine_pool }}
  steps:
  - checkout: self
    clean: true
    submodules: none
  # The public ADO project
  - ${{ if eq(variables['System.CollectionId'], 'f3ad12f2-e480-4533-baf2-635c95467d29') }}:
    - download: current   # pipeline resource identifier.
      artifact: 'drop-linux-cpu-${{ parameters.arch }}'

    - download: current   # pipeline resource identifier.
      artifact: 'onnxruntime${{ parameters.python_wheel_suffix }}'

    - bash: |
        set -e -x
        mv "$(Pipeline.Workspace)/drop-linux-cpu-${{ parameters.arch }}" $(Build.BinariesDirectory)/${{parameters.cmake_build_type}}
        mv "$(Pipeline.Workspace)/onnxruntime${{ parameters.python_wheel_suffix }}" "$(Build.BinariesDirectory)/whl"
        cp -r "$(Build.BinariesDirectory)/whl" $(Build.BinariesDirectory)/tmp
        find "$(Build.BinariesDirectory)/tmp" -name '*.whl' -exec bash -c 'unzip -d "${1%.*}" "$1"' _ {} \;
  # The private ADO project
  - ${{ if eq(variables['System.CollectionId'], 'bc038106-a83b-4dab-9dd3-5a41bc58f34c') }}:
    - download: build   # pipeline resource identifier.
      artifact: 'drop-linux-cpu-${{ parameters.arch }}'

    - download: build   # pipeline resource identifier.
      artifact: 'onnxruntime${{ parameters.python_wheel_suffix }}'

    - bash: |
        set -e -x
        ls $(Pipeline.Workspace)/build
        mv "$(Pipeline.Workspace)/build/drop-linux-cpu-${{ parameters.arch }}" $(Build.BinariesDirectory)/${{parameters.cmake_build_type}}
        mv "$(Pipeline.Workspace)/build/onnxruntime${{ parameters.python_wheel_suffix }}" "$(Build.BinariesDirectory)/whl"
        cp -r "$(Build.BinariesDirectory)/whl" $(Build.BinariesDirectory)/tmp
        find "$(Build.BinariesDirectory)/tmp" -name '*.whl' -exec bash -c 'unzip -d "${1%.*}" "$1"' _ {} \;

  # The BinSkim task uses a dotnet program which doesn't support ARM CPUs yet
  - ${{ if eq(parameters.arch, 'x86_64') }}:
    - task: BinSkim@4
      displayName: 'Run BinSkim'
      inputs:
        AnalyzeTargetGlob: '$(Build.BinariesDirectory)/tmp/**/*.so'
        continueOnError: true

    #- task: PostAnalysis@2
    #  inputs:
    #    GdnBreakAllTools: true
    #    GdnBreakPolicy: M365
    #    GdnBreakPolicyMinSev: Error

  - template: get-docker-image-steps.yml
    parameters:
      Dockerfile: tools/ci_build/github/linux/docker/inference/x64/python/cpu/Dockerfile.manylinux2_28_cpu
      Context: tools/ci_build/github/linux/docker/inference/x64/python/cpu
      DockerBuildArgs: "--build-arg POLICY=manylinux_2_28 --build-arg BUILD_UID=$( id -u ) --build-arg BASEIMAGE=${{ parameters.base_image }} --build-arg PLATFORM=${{ parameters.arch }} --build-arg PREPEND_PATH=${{ parameters.prepend_path }} --build-arg LD_LIBRARY_PATH_ARG=${{ parameters.ld_library_path_arg }} --build-arg DEVTOOLSET_ROOTPATH=${{ parameters.devtoolset_rootpath }}"
      Repository: onnxruntimecpubuildpython${{ parameters.arch }}
      ${{ if eq(parameters.arch, 'aarch64') }}:
        UpdateDepsTxt: false

  - task: Bash@3
    displayName: 'Bash Script'
    inputs:
      targetType: filePath
      filePath: tools/ci_build/github/linux/run_python_dockertest.sh
      arguments: -d CPU -c ${{parameters.cmake_build_type}} -i onnxruntimecpubuildpython${{ parameters.arch }}

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()
