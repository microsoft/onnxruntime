parameters:
- name: msbuildPlatform
  type: string
- name: java_artifact_id
  type: string
- name: buildOnly
  type: boolean
  default: false
- name: PreReleaseVersionSuffixString
  displayName: Suffix added to pre-release package version. Only used if IsReleaseBuild is true. Denotes the type of pre-release package.
  type: string
  values:
  - alpha
  - beta
  - rc
  - none

- name: PreReleaseVersionSuffixNumber
  displayName: Number added to pre-release package version. Only used if IsReleaseBuild is true. Denotes the sequence of a pre-release package.
  type: number

steps:
- task: PowerShell@2
  displayName: 'Build and Package Java Artifacts'
  inputs:
    targetType: 'inline'
    script: |
      # Define arguments for the Python script
      $scriptArgs = @(
        "--sources-dir", "$(Build.SourcesDirectory)",
        "--binaries-dir", "$(Build.BinariesDirectory)",
        "--platform", "${{ parameters.msbuildPlatform }}",
        "--build-config", "RelWithDebInfo",
        "--java-artifact-id", "${{ parameters.java_artifact_id }}",
        "--pre-release-version-suffix-string", "${{ parameters.PreReleaseVersionSuffixString }}",
        "--pre-release-version-suffix-number", "${{ parameters.PreReleaseVersionSuffixNumber }}",
        "--commit-hash", "$(OnnxRuntimeGitCommitHash)"
      )

      # Conditionally add the --build-only flag if the parameter is true
      if ('${{ parameters.buildOnly }}' -eq 'True') {
        $scriptArgs += "--build-only"
      }

      # Define the path to the python script within your repository
      $scriptPath = "$(Build.SourcesDirectory)/tools/ci_build/manage_java_artifacts.py"

      # Execute the Python script, passing all arguments
      Write-Host "Executing Python script: $scriptPath with arguments: $($scriptArgs -join ' ')"
      python $scriptPath $scriptArgs