parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

- name: DoCompliance
  displayName: Run Compliance Tasks?
  type: boolean
  default: true

- name: DoEsrp
  displayName: Run code sign tasks? Must be true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: IsReleaseBuild
  displayName: Is a release build? Set it to true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: AdditionalBuildFlags
  displayName: Additional build flags for build.py
  type: string
  default: ''

- name: AdditionalWinBuildFlags
  displayName: Additional build flags that just for Windows Builds
  type: string
  default: ''

- name: OrtNugetPackageId
  displayName: Package name for nuget
  type: string
  default: 'Microsoft.ML.OnnxRuntime.Training'

- name: BuildVariant
  type: string
  default: 'default'

stages:
- template: linux-cpu-packaging-pipeline.yml
  parameters:
    AdditionalBuildFlags: ${{ parameters.AdditionalBuildFlags }}
    stage_name_suffix: Training_CPU
    ArtifactNamePrefix: onnxruntime-training
    PackageJava: false
    PackageNodeJS: false

- template: win-ci.yml
  parameters:
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    stage_name_suffix: Training_CPU_x86_${{ parameters.BuildVariant }}
    artifact_name_suffix: -training
    EnvSetupScript: setup_env_x86.bat
    buildArch: x86
    msbuildPlatform: Win32
    packageName: x86
    buildparameter: ${{ parameters.AdditionalBuildFlags }} ${{ parameters.AdditionalWinBuildFlags}}
    runTests: ${{ parameters.RunOnnxRuntimeTests }}
    buildJava: false
    buildNodejs: false

- template: win-ci.yml
  parameters:
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    stage_name_suffix: Training_CPU_arm_${{ parameters.BuildVariant }}
    artifact_name_suffix: -training
    EnvSetupScript: setup_env.bat
    buildArch: x64
    msbuildPlatform: arm
    packageName: arm
    buildparameter: --arm ${{ parameters.AdditionalBuildFlags }}  ${{ parameters.AdditionalWinBuildFlags}} --path_to_protoc_exe $(Build.BinariesDirectory)\RelWithDebInfo\installed\bin\protoc.exe
    runTests: false
    buildJava: false
    buildNodejs: false
    ort_build_pool_name: onnxruntime-Win-CPU-2022

- template: win-ci.yml
  parameters:
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    stage_name_suffix: Training_CPU_arm64_${{ parameters.BuildVariant }}
    artifact_name_suffix: -training
    EnvSetupScript: setup_env.bat
    buildArch: x64
    msbuildPlatform: arm64
    packageName: arm64
    buildparameter: --arm64 ${{ parameters.AdditionalBuildFlags }}  ${{ parameters.AdditionalWinBuildFlags}} --path_to_protoc_exe $(Build.BinariesDirectory)\RelWithDebInfo\installed\bin\protoc.exe
    runTests: false
    buildJava: false
    buildNodejs: false

- template: win-ci.yml
  parameters:
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    stage_name_suffix: Training_CPU_x64_${{ parameters.BuildVariant }}
    artifact_name_suffix: -training
    EnvSetupScript: setup_env.bat
    buildArch: x64
    msbuildPlatform: x64
    packageName: x64
    buildparameter: ${{ parameters.AdditionalBuildFlags }}  ${{ parameters.AdditionalWinBuildFlags}}
    runTests: ${{ parameters.RunOnnxRuntimeTests }}
    buildJava: false
    buildNodejs: false

- stage: Android_Java_API_AAR_Packaging_Training_Full
  dependsOn: []
  jobs:
  - template: android-java-api-aar.yml
    parameters:
      buildConfig: 'Release'
      buildSettings: '$(Build.SourcesDirectory)/tools/ci_build/github/android/training_full_aar_build_settings.json'
      artifactName: 'onnxruntime-training-android-full-aar'
      job_name_suffix: 'Training_Full'
      publish_executables: '1'
      packageName: onnxruntime-training-android
  - template: android-java-api-aar-test.yml
    parameters:
      artifactName: 'onnxruntime-training-android-full-aar'
      job_name_suffix: 'Training_Full'
      packageName: onnxruntime-training-android

- stage: NuGet_Packaging_Training_CPU
  dependsOn:
  - Setup
  - Linux_C_API_Packaging_Training_CPU
  - Windows_Packaging_Training_CPU_x86_${{ parameters.BuildVariant }}
  - Windows_Packaging_Training_CPU_x64_${{ parameters.BuildVariant }}
  - Windows_Packaging_Training_CPU_arm_${{ parameters.BuildVariant }}
  - Windows_Packaging_Training_CPU_arm64_${{ parameters.BuildVariant }}
  - Android_Java_API_AAR_Packaging_Training_Full
  condition: succeeded()
  jobs:
  - job:
    workspace:
      clean: all
    # we need to use the 2022 pool to create the nuget package with both pre-net6+Xamarin and net6 targets.
    # VS2019 has no support for net6 and we need to use msbuild (from the VS install) to do the packing
    pool: 'Azure-Pipelines-EO-Windows2022-aiinfra'
    variables:
      OrtPackageId: ${{ parameters.OrtNugetPackageId }}
      breakCodesignValidationInjection: ${{ parameters.DoEsrp }}
      ReleaseVersionSuffix: $[stageDependencies.Setup.Set_Variables.outputs['Set_Release_Version_Suffix.ReleaseVersionSuffix']]

    steps:
    - checkout: self
      submodules: true
    - task: DownloadPipelineArtifact@0
      displayName: 'Download win-x64 Pipeline Artifact'
      inputs:
        artifactName: 'onnxruntime-training-win-x64'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download win-x86 Pipeline Artifact'
      inputs:
        artifactName: 'onnxruntime-training-win-x86'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download win-arm64 Pipeline Artifact'
      inputs:
        artifactName: 'onnxruntime-training-win-arm64'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download win-arm Pipeline Artifact'
      inputs:
        artifactName: 'onnxruntime-training-win-arm'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download linux-x64 Pipeline Artifact'
      inputs:
        artifactName: 'onnxruntime-training-linux-x64'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download linux-aarch64 Pipeline Artifact - NuGet'
      inputs:
        artifactName: 'onnxruntime-training-linux-aarch64'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download android-full-aar Pipeline Artifact'
      inputs:
        artifactName: 'onnxruntime-training-android-full-aar'
        patterns: '**/*.aar'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download drop-extra Pipeline Artifact'
      inputs:
        artifactName: 'drop-extra-training'
        targetPath: '$(Build.BinariesDirectory)/extra-artifact'

    - script: |
       dir
      workingDirectory: '$(Build.BinariesDirectory)/nuget-artifact'
      displayName: 'List artifacts'

    # Reconstruct the build dir
    - task: PowerShell@2
      displayName: 'Extract native libraries for addition to nuget native package'
      inputs:
        targetType: filePath
        filePath: $(Build.SourcesDirectory)\tools\ci_build\github\windows\extract_nuget_files.ps1

    - script: |
       mklink /D /J models C:\local\models
      workingDirectory: '$(Build.BinariesDirectory)'
      displayName: 'Create models link'

    - task: NuGetToolInstaller@0
      displayName: Use Nuget 6.2.1
      inputs:
        versionSpec: 6.2.1

    - task: PowerShell@2
      displayName: Install .NET 6 workloads
      inputs:
        targetType: 'inline'
        script: |
          dotnet workload install android
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: PowerShell@2
      displayName: Build Microsoft.ML.OnnxRuntime .NET 6 targets using dotnet
      inputs:
        targetType: 'inline'
        # we don't specify 'Any CPU' as the platform here because if we do it gets added to the output path
        #   e.g. csharp\src\Microsoft.ML.OnnxRuntime\bin\Any CPU\RelWithDebInfo\net6.0-ios\
        # which is inconsistent with the msbuild output path for the pre-.net6 targets
        #   e.g. csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\monoandroid11.0
        # and makes it harder to do the packing
        #
        # 'Any CPU' is the default (first 'mixed' platform specified in the csproj) so this should be fine.
        script: |
          dotnet build .\src\Microsoft.ML.OnnxRuntime\Microsoft.ML.OnnxRuntime.csproj -p:SelectedTargets=Net6  -p:Configuration=RelWithDebInfo -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId) -p:IsReleaseBuild=${{ parameters.IsReleaseBuild }} -p:ReleaseVersionSuffix=$(ReleaseVersionSuffix)
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: MSBuild@1
      displayName: 'Restore NuGet Packages and create project.assets.json for pre-.net6 targets'
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
        platform: 'Any CPU'
        configuration: RelWithDebInfo
        msbuildArguments: '-t:restore -p:SelectedTargets=PreNet6 -p:OrtPackageId=$(OrtPackageId)'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: MSBuild@1
      displayName: 'Build C# for pre-.net6 targets'
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
        platform: 'Any CPU'
        configuration: RelWithDebInfo
        msbuildArguments: '-p:SelectedTargets=PreNet6 -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId) -p:IsReleaseBuild=${{ parameters.IsReleaseBuild }}'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - ${{ if eq(parameters.DoEsrp, true) }}:
      - template: win-esrp-dll.yml
        parameters:
          FolderPath: '$(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo'
          DisplayName: 'ESRP - Sign C# dlls'
          DoEsrp: ${{ parameters.DoEsrp }}

    - task: MSBuild@1
      displayName: Update projects.assets.json with combined list of all target frameworks
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\Microsoft.ML.OnnxRuntime.csproj'
        platform: 'Any CPU'
        configuration: RelWithDebInfo
        msbuildArguments: '-t:restore -p:SelectedTargets=All -p:OrtPackageId=$(OrtPackageId)'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: MSBuild@1
      displayName: 'Build Nuget Packages'
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj'
        platform: 'Any CPU'
        configuration: RelWithDebInfo
        msbuildArguments: '-t:CreatePackage -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId) -p:IsReleaseBuild=${{ parameters.IsReleaseBuild }}'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: CopyFiles@2
      displayName: 'Copy native nuget package to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
        Contents: '*.nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy native nuget symbols package to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
        Contents: '*.snupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy managed nuget package to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo'
        Contents: '*.nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - template: esrp_nuget.yml
      parameters:
        DisplayName: 'ESRP - sign NuGet package'
        FolderPath: '$(Build.ArtifactStagingDirectory)'
        DoEsrp: ${{ parameters.DoEsrp }}

    - template: validate-package.yml
      parameters:
        PackageType: 'nuget'
        PackagePath: '$(Build.ArtifactStagingDirectory)'
        PackageName: 'Microsoft.ML.OnnxRuntime.Training.*nupkg'
        PlatformsSupported: 'win-x64,win-x86,linux-x64,linux-arm64'
        VerifyNugetSigning: false

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline NuGet Artifact'
      inputs:
        artifactName: 'drop-signed-nuget-Training-CPU'
        targetPath: '$(Build.ArtifactStagingDirectory)'


    - task: MSBuild@1
      displayName: 'Clean C#'
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
        platform: 'Any CPU'
        configuration: RelWithDebInfo
        msbuildArguments: '-t:Clean -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId)'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: RoslynAnalyzers@2
      displayName: 'Run Roslyn Analyzers'
      inputs:
        userProvideBuildInfo: msBuildInfo
        msBuildCommandline: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\msbuild.exe" $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln -p:configuration="RelWithDebInfo" -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId)'
      condition: and(succeeded(), eq('${{ parameters.DoCompliance }}', true))

    - template: component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'

    - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
      displayName: 'Clean Agent Directories'
      condition: always()

- template: ../nuget/templates/test_win.yml
  parameters:
    AgentPool : 'onnxruntime-Win-CPU-2022'
    Skipx86Tests : false
    NugetPackageName : 'Microsoft.ML.OnnxRuntime.Training'
    ArtifactSuffix: 'Training-CPU'
    StageSuffix: 'Training_CPU'
    TestDataArtifactSuffix: '-training'

- template: ../nuget/templates/test_linux.yml
  parameters:
    AgentPool : onnxruntime-Ubuntu2004-AMD-CPU
    NugetPackageName : 'Microsoft.ML.OnnxRuntime.Training'
    ArtifactSuffix: 'Training-CPU'
    StageSuffix: 'Training_CPU'
    NativePackagePrefix: 'onnxruntime-training'
