parameters:
- name: BuildConfig
  type: string

- name: EnvSetupScript
  type: string
  default: setup_env.bat

- name: job_name_suffix
  type: string

- name: buildArch
  type: string

- name: additionalBuildFlags
  type: string

- name: msbuildPlatform
  type: string

- name: isX86
  type: boolean
  default: false

- name: isTraining
  type: boolean
  default: false

- name: EnablePython
  type: boolean
  default: true

- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

- name: ORT_EP_NAME
  type: string

- name: MachinePool
  type: string

- name: GenerateDocumentation
  displayName: Generate updated documentation. Requires build to have occurred and `--gen_doc` to be specified
  type: boolean
  default: false

- name: WITH_CACHE
  displayName: Use Cache to acclerate compilation
  type: boolean
  default: false

- name: OnnxruntimeTestGpuDeviceId
  type: number
  default: 0


jobs:
- job: build_${{ parameters.job_name_suffix }}
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    setVcvars: true
    ALLOW_RELEASED_ONNX_OPSET_ONLY: '0'
    DocUpdateNeeded: false  # Set to true during document generation if there are diffs
    NVIDIA_TF32_OVERRIDE: '0'
    skipComponentGovernanceDetection: true
    DEPS_CACHE_DIR: $(Agent.TempDirectory)/deps_ccache
    ORT_CACHE_DIR: $(Agent.TempDirectory)/ort_ccache
    TODAY: $[format('{0:dd}{0:MM}{0:yyyy}', pipeline.startTime)]
    ONNXRUNTIME_TEST_GPU_DEVICE_ID: ${{ parameters.OnnxruntimeTestGpuDeviceId }}
    ${{ if eq(parameters.WITH_CACHE, true) }}:
      PS_CACHE_ARG: '-use_cache'
      PY_CACHE_ARG: '--use_cache'
  workspace:
    clean: all
  pool: ${{ parameters.MachinePool }}
  timeoutInMinutes:  300
  steps:
  - checkout: self
    clean: true
    submodules: none

  - template: win-ci-prebuild-steps.yml
    parameters:
      EnvSetupScript: ${{parameters.EnvSetupScript}}
      ${{ if contains(parameters.additionalBuildFlags, 'use_cuda') }}:
        DownloadCUDA: true
      ${{ else }}:
        DownloadCUDA: false
      ${{ if contains(parameters.additionalBuildFlags, 'use_tensorrt') }}:
        DownloadTRT: true
      ${{ else }}:
        DownloadTRT: false
      BuildArch: ${{parameters.buildArch}}
      BuildConfig: ${{parameters.BuildConfig}}
      MachinePool: ${{parameters.MachinePool}}
      WithCache: ${{parameters.WITH_CACHE}}
      Today: $(Today)

  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
      force32bit: ${{ parameters.isX86 }}

  # Our build machine doesn't have java x86
  - ${{ if eq(parameters.buildArch, 'x64') }}:
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: ${{ parameters.buildArch }}
          jdkSourceOption: 'PreInstalled'

  - script: |
     set ORT_DOXY_SRC=$(Build.SourcesDirectory)
     set ORT_DOXY_OUT=$(Build.BinariesDirectory)\${{ parameters.BuildConfig }}\${{ parameters.BuildConfig }}
     mkdir %ORT_DOXY_SRC%
     mkdir %ORT_DOXY_OUT%
     "C:\Program Files\doxygen\bin\doxygen.exe" $(Build.SourcesDirectory)\tools\ci_build\github\Doxyfile_csharp.cfg
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'API Documentation Check and generate'

  # need to set PROCESSOR_ARCHITECTURE so the x86 SDK is installed correctly
  - task: UseDotNet@2
    inputs:
      version: 8.x
    env:
      PROCESSOR_ARCHITECTURE: ${{ parameters.buildArch }}

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 6.x
    inputs:
      versionSpec: 6.x

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      command: 'restore'
      feedsToUse: 'config'
      restoreSolution: '$(Build.SourcesDirectory)\packages.config'
      nugetConfigPath: '$(Build.SourcesDirectory)\NuGet.config'
      restoreDirectory: '$(Build.BinariesDirectory)\${{ parameters.BuildConfig }}'
 
  - ${{ if eq(parameters.RunOnnxRuntimeTests, true) }}:
      - powershell: |
          python.exe $(Build.SourcesDirectory)\tools\ci_build\build.py --config ${{ parameters.BuildConfig }} --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_csharp --parallel  --use_binskim_compliant_compile_flags --cmake_generator "Visual Studio 17 2022" --build_shared_lib --enable_onnx_tests ${{ parameters.additionalBuildFlags }}
          if ($lastExitCode -ne 0) {
            exit $lastExitCode
          }
          Remove-Item "$(Build.BinariesDirectory)\${{ parameters.BuildConfig }}" -Include "*.obj" -Recurse
        displayName: 'Build and Test'
  - ${{ else }}:
      - powershell: |
          python.exe $(Build.SourcesDirectory)\tools\ci_build\build.py --config ${{ parameters.BuildConfig }} --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_csharp --parallel  --use_binskim_compliant_compile_flags --cmake_generator "Visual Studio 17 2022" --build_shared_lib --update --build ${{ parameters.additionalBuildFlags }}
          if ($lastExitCode -ne 0) {
            exit $lastExitCode
          }
          Remove-Item "$(Build.BinariesDirectory)\${{ parameters.BuildConfig }}" -Include "*.obj" -Recurse
        displayName: 'Build'

  - script: 
      python tools\ValidateNativeDelegateAttributes.py
    displayName: 'Validate C# native delegates'
    workingDirectory: '$(Build.SourcesDirectory)\csharp'


  - ${{ if eq(parameters.EnablePython, true) }}:
      - powershell: |
         python -m pip uninstall -y onnxruntime onnxruntime-gpu onnxruntime-training onnxruntime-directml -qq
         Get-ChildItem -Path dist/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname}

        workingDirectory: '$(Build.BinariesDirectory)\${{ parameters.BuildConfig }}\${{ parameters.BuildConfig }}'
        displayName: 'Install onnxruntime wheel'

  - ${{ if eq(parameters.GenerateDocumentation, true) }}:
    - task: PythonScript@0
      displayName: 'Generate documentation'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--config ${{ parameters.BuildConfig }} --build_dir $(Build.BinariesDirectory) --gen_doc validate ${{ variables.PY_CACHE_ARG }}'
        workingDirectory: '$(Build.BinariesDirectory)'

  # if the validation from --gen_doc failed it sets DocUpdateNeeded so we can publish the latest version of the docs
  # as an artifact, allowing a developer to download this and replace the current version instead of having to build
  # and generate the docs locally themselves. handle each of the two md files separately - simpler than copying
  # them to another location and publishing from there in a single task.
  - task: PublishBuildArtifacts@1
    condition: and(failed(), eq(variables['DocUpdateNeeded'], 'true'))
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/docs/OperatorKernels.md'
      artifactName: 'OperatorKernels.md'

  - task: PublishBuildArtifacts@1
    condition: and(failed(), eq(variables['DocUpdateNeeded'], 'true'))
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/docs/ContribOperators.md'
      artifactName: 'ContribOperators.md'
