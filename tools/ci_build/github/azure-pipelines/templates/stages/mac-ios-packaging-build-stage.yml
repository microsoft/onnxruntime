parameters:
- name: packageVariant
  type: string
  values:
  - Full
  - Training

stages:
- stage: IosPackaging_Build_${{ parameters.packageVariant }}
  dependsOn:
  - IosPackaging_SetCommonVariables

  jobs:
  - job: j
    displayName: "Build iOS package for variant: ${{ parameters.packageVariant}}"

    pool:
      vmImage: "macOS-13"

    variables:
      # Note: Keep the Xcode version and iOS simulator version compatible.
      # Check the table here to see what iOS simulator versions are supported by a particular Xcode version:
      # https://developer.apple.com/support/xcode/
      xcodeVersion: "14.3.1"
      iosSimulatorRuntimeVersion: "16.4"

      ortPodVersion: $[stageDependencies.IosPackaging_SetCommonVariables.j.outputs['SetCommonVariables.ORT_POD_VERSION']]

      ${{ if eq(parameters.packageVariant, 'Full') }}:
        buildSettingsFile: "tools/ci_build/github/apple/default_full_apple_framework_build_settings.json"
        cPodName: onnxruntime-c
        objcPodName: onnxruntime-objc

      ${{ if eq(parameters.packageVariant, 'Training') }}:
        buildSettingsFile: "tools/ci_build/github/apple/default_training_ios_framework_build_settings.json"
        cPodName: onnxruntime-training-c
        objcPodName: onnxruntime-training-objc

    timeoutInMinutes: 240

    steps:
    - script: |
        if [[ -z "$(ortPodVersion)" ]]; then
          echo "ORT pod version is unspecified. Make sure that the IosPackaging_SetCommonVariables stage has run."
          exit 1
        fi
      displayName: 'Ensure version is set'

    - task: InstallAppleCertificate@2
      inputs:
        certSecureFile: '$(ios_signing_certificate_name)'
        certPwd: '$(ios_signing_certificate_password)'
        keychain: 'temp'
        deleteCert: true
      displayName: 'Install ORT Mobile Test Signing Certificate'

    - task: InstallAppleProvisioningProfile@1
      inputs:
        provProfileSecureFile: '$(ios_provision_profile_name)'
        removeProfile: true
      displayName: 'Install ORT Mobile Test Provisioning Profile'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: "3.12"
        addToPath: true
        architecture: "x64"

    - template: ../use-xcode-version.yml
      parameters:
        xcodeVersion: $(xcodeVersion)

    - script: |
        pip install -r tools/ci_build/github/apple/ios_packaging/requirements.txt
      displayName: "Install Python requirements"

    # create and test mobile pods
    - script: |
        python tools/ci_build/github/apple/build_and_assemble_apple_pods.py \
          --build-dir "$(Build.BinariesDirectory)/apple_framework" \
          --staging-dir "$(Build.BinariesDirectory)/staging" \
          --pod-version "$(ortPodVersion)" \
          --test \
          --variant ${{ parameters.packageVariant }} \
          --build-settings-file "${{ variables.buildSettingsFile }}" \
          ${{ variables.optionalIncludeOpsByConfigOption }}
      displayName: "Build macOS/iOS framework and assemble pod package files"
      env:
        ORT_GET_SIMULATOR_DEVICE_INFO_REQUESTED_RUNTIME_VERSION: $(iosSimulatorRuntimeVersion)

    - script: |
        python tools/ci_build/github/apple/test_apple_packages.py \
          --fail_if_cocoapods_missing \
          --framework_info_file "$(Build.BinariesDirectory)/apple_framework/xcframework_info.json" \
          --c_framework_dir "$(Build.BinariesDirectory)/apple_framework/framework_out" \
          --variant ${{ parameters.packageVariant }} \
          --test_project_stage_dir "$(Build.BinariesDirectory)/app_center_test" \
          --prepare_test_project_only
      displayName: "Assemble test project for App Center"

    # Xcode tasks require absolute paths because it searches for the paths and files relative to
    # the root directory and not relative to the working directory
    - task: Xcode@5
      inputs:
        actions: 'build-for-testing'
        configuration: 'Debug'
        xcWorkspacePath: '$(Build.BinariesDirectory)/app_center_test/apple_package_test/apple_package_test.xcworkspace'
        sdk: 'iphoneos'
        scheme: 'ios_package_test'
        signingOption: 'manual'
        signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
        provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'
        args: '-derivedDataPath $(Build.BinariesDirectory)/app_center_test/apple_package_test/DerivedData'
        workingDirectory: '$(Build.BinariesDirectory)/app_center_test/apple_package_test/'
        useXcpretty: false  # xcpretty can hide useful error output so we will disable it
      displayName: 'Build App Center iPhone arm64 tests'

    - script: |
        zip -r --symlinks $(Build.ArtifactStagingDirectory)/package_tests.zip ios_package_testUITests-Runner.app
      workingDirectory: '$(Build.BinariesDirectory)/app_center_test/apple_package_test/DerivedData/Build/Products/Debug-iphoneos'
      displayName: "Create .zip file of the tests"

    - script: |
        python $(Build.SourcesDirectory)/onnxruntime/test/platform/apple/generate_ipa_export_options_plist.py \
          --dest_file "exportOptions.plist" \
          --apple_team_id $(APPLE_TEAM_ID) \
          --provisioning_profile_uuid $(APPLE_PROV_PROFILE_UUID)
      workingDirectory: '$(Build.BinariesDirectory)/app_center_test/apple_package_test/'
      displayName: "Generate .plist file for the .ipa file"

    # Task only generates an .xcarchive file if the plist export options are included, but does
    # not produce an IPA file.
    # Source code: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/XcodeV5/xcode.ts
    - task: Xcode@5
      inputs:
        actions: 'archive'
        xcWorkspacePath: '$(Build.BinariesDirectory)/app_center_test/apple_package_test/apple_package_test.xcworkspace'
        packageApp: true
        archivePath: '$(Build.BinariesDirectory)/app_center_test/apple_package_test/'
        exportOptions: 'plist'
        exportOptionsPlist: '$(Build.BinariesDirectory)/app_center_test/apple_package_test/exportOptions.plist'
        configuration: 'Debug'
        sdk: 'iphoneos'
        scheme: 'ios_package_test'
        args: '-derivedDataPath $(Build.BinariesDirectory)/app_center_test/apple_package_test/DerivedData'
        workingDirectory: '$(Build.BinariesDirectory)/app_center_test/apple_package_test/'
        useXcpretty: false
      displayName: 'Create archive for the .ipa file'

    # Use script step because exporting the .ipa file using the Xcode@5 task was too brittle (Xcode@5 is designed
    # to handle both the .xcarchive step and the .ipa step in the same step -- ran into countless issues with signing
    # and the .plist file)
    - script: |
        xcodebuild -exportArchive \
          -archivePath ios_package_test.xcarchive \
          -exportOptionsPlist exportOptions.plist \
          -exportPath $(Build.ArtifactStagingDirectory)/test_ipa
      workingDirectory: '$(Build.BinariesDirectory)/app_center_test/apple_package_test/'
      displayName: "Create .ipa file"

    # Publish the BrowserStack artifacts first so that if the next step fails, the artifacts will still be published
    # so that users can attempt to locally debug
    - publish: "$(Build.ArtifactStagingDirectory)"
      artifact: "browserstack_test_artifacts_${{ lower(parameters.packageVariant) }}"
      displayName: "Publish BrowserStack test artifacts"

    - script: |
        set -e -x
        pip install requests
        python $(Build.SourcesDirectory)/tools/python/upload_and_run_browserstack_tests.py \
          --test_platform xcuitest \
          --app_path "$(Build.ArtifactStagingDirectory)/test_ipa/ios_package_test.ipa" \
          --test_path "$(Build.ArtifactStagingDirectory)/package_tests.zip" \
          --devices "iPhone 15-17"
      displayName: Run E2E tests using Browserstack
      workingDirectory: $(Build.BinariesDirectory)/app_center_test/apple_package_test
      timeoutInMinutes: 15
      env:
        BROWSERSTACK_ID: $(browserstack_username)
        BROWSERSTACK_TOKEN: $(browserstack_access_key)

    - script: |
        set -e -x

        for POD_NAME in "${{ variables.cPodName}}" "${{ variables.objcPodName }}";
        do
          ./tools/ci_build/github/apple/assemble_apple_packaging_artifacts.sh \
            "$(Build.BinariesDirectory)/staging" \
            "$(Build.ArtifactStagingDirectory)" \
            "${POD_NAME}" \
            "$(ortPodVersion)"
        done

        # copy over helper script for use in release pipeline
        cp tools/ci_build/github/apple/package_release_tasks.py "$(Build.ArtifactStagingDirectory)"
      displayName: "Assemble artifacts"

    - script: |
        set -e -x
        ls -R "$(Build.ArtifactStagingDirectory)"
      displayName: "List staged artifacts"

    - publish: "$(Build.ArtifactStagingDirectory)"
      artifact: "ios_packaging_artifacts_${{ lower(parameters.packageVariant) }}"
      displayName: "Publish artifacts"

    - template: ../component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'
