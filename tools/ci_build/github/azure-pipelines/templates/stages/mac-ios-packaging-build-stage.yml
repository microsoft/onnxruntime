parameters:
- name: packageVariant
  type: string
  values:
  - Mobile
  - Full
  - Training

stages:
- stage: IosPackaging_Build_${{ parameters.packageVariant }}
  dependsOn:
  - IosPackaging_SetCommonVariables

  jobs:
  - job: j
    displayName: "Build iOS package for variant: ${{ parameters.packageVariant}}"

    pool:
      vmImage: "macOS-13"

    variables:
      xcodeVersion: "14.3"
      ortPodVersion: $[stageDependencies.IosPackaging_SetCommonVariables.j.outputs['SetCommonVariables.ORT_POD_VERSION']]

      ${{ if eq(parameters.packageVariant, 'Mobile') }}:
        buildSettingsFile: "tools/ci_build/github/apple/default_mobile_ios_framework_build_settings.json"
        optionalIncludeOpsByConfigOption: "--include-ops-by-config tools/ci_build/github/android/mobile_package.required_operators.config"
        cPodName: onnxruntime-mobile-c
        objcPodName: onnxruntime-mobile-objc

      ${{ if eq(parameters.packageVariant, 'Full') }}:
        buildSettingsFile: "tools/ci_build/github/apple/default_full_ios_framework_build_settings.json"
        cPodName: onnxruntime-c
        objcPodName: onnxruntime-objc

      ${{ if eq(parameters.packageVariant, 'Training') }}:
        buildSettingsFile: "tools/ci_build/github/apple/default_training_ios_framework_build_settings.json"
        cPodName: onnxruntime-training-c
        objcPodName: onnxruntime-training-objc

    timeoutInMinutes: 120

    steps:
    - script: |
        if [[ -z "$(ortPodVersion)" ]]; then
          echo "ORT pod version is unspecified. Make sure that the IosPackaging_SetCommonVariables stage has run."
          exit 1
        fi
      displayName: 'Ensure version is set'

    - task: InstallAppleCertificate@2
      inputs:
        certSecureFile: '$(ios_signing_certificate_name)'
        certPwd: '$(ios_signing_certificate_password)'
        keychain: 'temp'
        deleteCert: true
      displayName: 'Install ORT Mobile Test Signing Certificate'

    - task: InstallAppleProvisioningProfile@1
      inputs:
        provProfileSecureFile: '$(ios_provision_profile_name)'
        removeProfile: true
      displayName: 'Install ORT Mobile Test Provisioning Profile'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: "3.9"
        addToPath: true
        architecture: "x64"

    - template: ../use-xcode-version.yml
      parameters:
        xcodeVersion: ${{ variables.xcodeVersion }}

    - template: ../install-appcenter.yml

    - script: |
        pip install -r tools/ci_build/github/apple/ios_packaging.requirements.txt
      displayName: "Install Python requirements"

    - script: |
        $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker/inference/x64/python/cpu/scripts/install_protobuf.sh -p $(Build.BinariesDirectory)/protobuf_install -d $(Build.SourcesDirectory)/cmake/deps.txt
      displayName: "Build Host Protoc"

    # create and test mobile pods
    - script: |
        python tools/ci_build/github/apple/build_and_assemble_ios_pods.py \
          --build-dir "$(Build.BinariesDirectory)/ios_framework" \
          --staging-dir "$(Build.BinariesDirectory)/staging" \
          --pod-version "$(ortPodVersion)" \
          --test \
          --variant ${{ parameters.packageVariant }} \
          --build-settings-file "${{ variables.buildSettingsFile }}" \
          ${{ variables.optionalIncludeOpsByConfigOption }} \
          -b="--path_to_protoc_exe=$(Build.BinariesDirectory)/protobuf_install/bin/protoc"
      displayName: "Build iOS framework and assemble pod package files"

    - script: |
        python tools/ci_build/github/apple/test_ios_packages.py \
          --fail_if_cocoapods_missing \
          --framework_info_file "$(Build.BinariesDirectory)/ios_framework/framework_info.json" \
          --c_framework_dir "$(Build.BinariesDirectory)/ios_framework/framework_out" \
          --variant ${{ parameters.packageVariant }} \
          --test_project_stage_dir "$(Build.BinariesDirectory)/app_center_test" \
          --prepare_test_project_only
      displayName: "Assemble test project for App Center"

    - task: Xcode@5
      inputs:
        actions: 'build-for-testing'
        configuration: 'Debug'
        xcWorkspacePath: '$(Build.BinariesDirectory)/app_center_test/ios_package_test/ios_package_test.xcworkspace'
        sdk: 'iphoneos'
        scheme: 'ios_package_test'
        xcodeVersion: 'specifyPath'
        xcodeDeveloperDir: '/Applications/Xcode_${{ variables.xcodeVersion }}.app/Contents/Developer'
        signingOption: 'manual'
        signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
        provisioningProfileName: 'iOS Team Provisioning Profile'
        args: '-derivedDataPath $(Build.BinariesDirectory)/app_center_test/ios_package_test/DerivedData'
        workingDirectory: '$(Build.BinariesDirectory)/app_center_test/ios_package_test/'
      displayName: 'Build App Center iPhone arm64 tests'

    - script: |
        set -e -x
        appcenter test run xcuitest \
          --app "AI-Frameworks/ORT-Mobile-iOS" \
          --devices $(app_center_test_devices) \
          --test-series "master" \
          --locale "en_US" \
          --build-dir $(Build.BinariesDirectory)/app_center_test/ios_package_test/DerivedData/Build/Products/Debug-iphoneos \
          --token $(app_center_api_token)
      displayName: "Run E2E tests on App Center"

    - script: |
        set -e -x

        for POD_NAME in "${{ variables.cPodName}}" "${{ variables.objcPodName }}";
        do
          ./tools/ci_build/github/apple/assemble_ios_packaging_artifacts.sh \
            "$(Build.BinariesDirectory)/staging" \
            "$(Build.ArtifactStagingDirectory)" \
            "${POD_NAME}" \
            "$(ortPodVersion)"
        done

        # copy over helper script for use in release pipeline
        cp tools/ci_build/github/apple/upload_pod_archive_and_update_podspec.sh "$(Build.ArtifactStagingDirectory)"
      displayName: "Assemble artifacts"

    - script: |
        set -e -x
        ls -R "$(Build.ArtifactStagingDirectory)"
      displayName: "List staged artifacts"

    - publish: "$(Build.ArtifactStagingDirectory)"
      artifact: "ios_packaging_artifacts_${{ lower(parameters.packageVariant) }}"
      displayName: "Publish artifacts"

    - template: ../component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'
