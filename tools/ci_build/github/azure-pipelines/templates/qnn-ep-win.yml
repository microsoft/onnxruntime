parameters:
  QnnSdk: '2.33.2.250410'
  build_config: 'RelWithDebInfo'
  IsReleaseBuild: false
  DoEsrp: false
  qnn_ep_build_pool_name: 'Onnxruntime-QNNEP-Windows-2022-CPU'
  ArtifactName: 'drop-nuget-qnn'
  OrtNugetPackageId: 'Microsoft.ML.OnnxRuntime.QNN'
  StageName: 'OnnxRuntime_QNN_Nuget_Win_x64'
  PublishArchive: false

stages:
- stage: ${{ parameters.StageName }}
  dependsOn: []
  jobs:
  - job: ${{ parameters.StageName }}
    timeoutInMinutes: 300

    pool:
      name: ${{ parameters.qnn_ep_build_pool_name }}
    variables:
      OrtPackageId: ${{ parameters.OrtNugetPackageId }}
      commonBuildArgs: '--compile_no_warning_as_error --skip_submodule_sync --build_shared_lib --cmake_generator "Visual Studio 17 2022" --config ${{ parameters.build_config }} --parallel --use_binskim_compliant_compile_flags '

    steps:
    - template: set-version-number-variables-step.yml

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.12'
        addToPath: true

    - template: jobs/download_win_qnn_sdk.yml
      parameters:
        QnnSDKVersion: ${{ parameters.QnnSdk }}

    - task: PythonScript@0
      displayName: 'Build arm64x project - generate the def & lib file for next build'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: ' --arm64 --buildasx --build_dir $(Build.BinariesDirectory)\arm64x --use_qnn --qnn_home $(QnnSDKRootDir) $(commonBuildArgs)'
        
    - task: PythonScript@0
      displayName: 'Build arm64ecx project - the real arm64x'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: ' --arm64ec --buildasx --build_dir $(Build.BinariesDirectory) --use_qnn --qnn_home $(QnnSDKRootDir) $(commonBuildArgs)'

    - task: CmdLine@2
      displayName: 'Print contents of binaries directory'
      inputs:
        script: |
          dir $(Build.BinariesDirectory)\${{ parameters.build_config }}\${{ parameters.build_config }}

    - template: win-esrp-dll.yml
      parameters:
        FolderPath: '$(Build.BinariesDirectory)\${{ parameters.build_config }}\${{ parameters.build_config }}'
        DisplayName: 'ESRP - Sign dlls'
        DoEsrp: ${{ parameters.DoEsrp }}
        Pattern: 'onnxruntime*.dll'

    - ${{ if eq(parameters.PublishArchive, true) }}:
      - template: c-api-artifacts-package-and-publish-steps-windows.yml
        parameters:
          buildConfig: ${{ parameters.build_config }}
          artifactName: 'onnxruntime-win-arm64x-qnn'
          artifactNameNoVersionString: 'onnxruntime-win-arm64x-qnn'
          DoEsrp: ${{ parameters.DoEsrp }}

    - task: MSBuild@1
      displayName: 'Restore NuGet Packages and create project.assets.json'
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.DesktopOnly.CSharp.sln'
        platform: 'Any CPU'
        configuration: ${{ parameters.build_config }}
        msbuildArguments: '-t:restore -p:OrtPackageId=$(OrtPackageId)'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: MSBuild@1
      displayName: 'Build C# bindings'
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.DesktopOnly.CSharp.sln'
        platform: 'Any CPU'
        configuration: ${{ parameters.build_config }}
        msbuildArguments: '-p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId) -p:IsReleaseBuild=${{ parameters.IsReleaseBuild }}'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - ${{ if eq(parameters.DoEsrp, true) }}:
      - template: win-esrp-dll.yml
        parameters:
          FolderPath: '$(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\${{ parameters.build_config }}'
          DisplayName: 'ESRP - Sign C# dlls'
          DoEsrp: ${{ parameters.DoEsrp }}

    - task: MSBuild@1
      displayName: 'Build Nuget Packages'
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj'
        platform: 'Any CPU'
        configuration: ${{ parameters.build_config }}
        msbuildArguments: '-t:CreatePackage -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId) -p:IsReleaseBuild=${{ parameters.IsReleaseBuild }} -p:TargetArchitecture=arm64'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: CopyFiles@2
      displayName: 'Copy native nuget package to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\${{ parameters.build_config }}\${{ parameters.build_config }}'
        Contents: '*.nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy native nuget symbols package to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\${{ parameters.build_config }}\${{ parameters.build_config }}'
        Contents: '*.snupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - template: ../templates/esrp_nuget.yml
      parameters:
        DisplayName: 'ESRP - sign NuGet package'
        FolderPath: '$(Build.ArtifactStagingDirectory)'
        DoEsrp: ${{ parameters.DoEsrp }}

    - task: 1ES.PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Qnn NuGet Artifact'
      inputs:
        artifactName: 'drop-signed-nuget-qnn'
        targetPath: '$(Build.ArtifactStagingDirectory)'