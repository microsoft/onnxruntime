parameters:
  BuildArch: 'x64'
  RunTests : 'true'
  BuildForStore: 'false'
  Runtime: 'dynamic'

steps:
  - template: telemetry-steps.yml

  - task: UsePythonVersion@0
    inputs: 
      versionSpec: '3.7' 
      addToPath: true 
      ${{ if eq(parameters.BuildArch, 'x64') }}:
        architecture: ${{ parameters.BuildArch }}
      ${{ if eq(parameters.BuildArch, 'x86') }}:
        architecture: ${{ parameters.BuildArch }}
      ${{ if eq(parameters.BuildArch, 'arm64') }}:
        architecture: 'x64'
      ${{ if eq(parameters.BuildArch, 'arm') }}:
        architecture: 'x64'

  - task: BatchScript@1
    displayName: 'Setup Environment'
    inputs:
      ${{ if eq(parameters.BuildArch, 'x64') }}:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\setup_env.bat'
      ${{ if eq(parameters.BuildArch, 'x86') }}:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\setup_env_x86.bat'
      ${{ if eq(parameters.BuildArch, 'arm64') }}:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\setup_env.bat'
      ${{ if eq(parameters.BuildArch, 'arm') }}:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\setup_env.bat'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - powershell: |
     Write-Host "##vso[task.setvariable variable=BuildFlags]"
     Write-Host "##vso[task.setvariable variable=ArtifactName]Microsoft.AI.MachineLearning.${{ parameters.BuildArch }}"
    displayName: Initialize build flags

  - powershell: |
     Write-Host "##vso[task.setvariable variable=BuildFlags]$(BuildFlags) --${{ parameters.BuildArch }}"
    displayName: Add cross compilation flags
    condition: ne('${{ parameters.BuildArch }}', 'x64')

  - powershell: |
     Write-Host "##vso[task.setvariable variable=BuildFlags]$(BuildFlags) --use_dml"
    displayName: Add DML flags
    condition: or(eq('${{ parameters.BuildArch }}', 'x64'), eq('${{ parameters.BuildArch }}', 'x86'))

  - powershell: |
     Write-Host "##vso[task.setvariable variable=BuildFlags]$(BuildFlags) --enable_wcos"
    displayName: Add OneCore flags
    condition: eq('${{ parameters.BuildForStore }}', 'false')

  - powershell: |
     Write-Host "##vso[task.setvariable variable=BuildFlags]$(BuildFlags) --enable_windows_store"
     Write-Host "##vso[task.setvariable variable=ArtifactName]$(ArtifactName).Store"
    displayName: Add Microsoft Store flags
    condition: eq('${{ parameters.BuildForStore }}', 'true')

  - powershell: |
     Write-Host "##vso[task.setvariable variable=BuildFlags]$(BuildFlags) --enable_msvc_static_runtime"
     Write-Host "##vso[task.setvariable variable=ArtifactName]$(ArtifactName).StaticRuntime"
    displayName: Add static runtime flags
    condition: eq('${{ parameters.Runtime }}', 'static')

  - task: PythonScript@0
    displayName: 'Generate CMake Configuration'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: '--build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --enable_onnx_tests $(TelemetryOption) --use_winml --cmake_generator "Visual Studio 16 2019" --update --config RelWithDebInfo --enable_lto --disable_rtti $(BuildFlags)'
      workingDirectory: '$(Build.BinariesDirectory)'

  - ${{ if or(notIn(parameters['sln_platform'], 'Win32', 'x64'), eq(parameters.BuildForStore, 'true')) }}:
    # Use cross-compiled protoc
    - script: |
       @echo ##vso[task.setvariable variable=ProtocDirectory]$(Build.BinariesDirectory)\host_protoc\Release

  - ${{ if eq(parameters.BuildForStore, 'false') }}:
    - task: VSBuild@1
      displayName: 'Build'
      inputs:
        solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.sln'
        ${{ if ne(parameters.BuildArch, 'x86') }}:
          platform: ${{ parameters.BuildArch }}
        ${{ if eq(parameters.BuildArch, 'x86') }}:
          platform: 'Win32'
        configuration: RelWithDebInfo
        msbuildArchitecture: ${{ parameters.BuildArch }}
        maximumCpuCount: true
        logProjectEvents: true
        workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
        createLogFile: true

  - ${{ if eq(parameters.BuildForStore, 'true') }}:
      - task: VSBuild@1
        displayName: 'Build'
        inputs:
          solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.vcxproj'
          ${{ if ne(parameters.BuildArch, 'x86') }}:
            platform: ${{ parameters.BuildArch }}
          ${{ if eq(parameters.BuildArch, 'x86') }}:
            platform: 'Win32'
          configuration: RelWithDebInfo
          msbuildArchitecture: ${{ parameters.BuildArch }}
          maximumCpuCount: true
          logProjectEvents: true
          workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
          createLogFile: true

      - task: VSBuild@1
        displayName: 'Build'
        inputs:
          solution: '$(Build.BinariesDirectory)\RelWithDebInfo\winml_dll.vcxproj'
          ${{ if ne(parameters.BuildArch, 'x86') }}:
            platform: ${{ parameters.BuildArch }}
          ${{ if eq(parameters.BuildArch, 'x86') }}:
            platform: 'Win32'
          configuration: RelWithDebInfo
          msbuildArchitecture: ${{ parameters.BuildArch }}
          maximumCpuCount: true
          logProjectEvents: true
          workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
          createLogFile: true

  - ${{ if and(eq(parameters.BuildArch, 'x64'), eq(parameters.BuildForStore, 'false'), eq(parameters.Runtime, 'dynamic')) }}:
    - script: |
        mklink  /D /J $(Build.BinariesDirectory)\RelWithDebInfo\models $(Build.BinariesDirectory)\models
        DIR dist\ /S /B > wheel_filename_file
        set /p WHEEL_FILENAME=<wheel_filename_file
        del wheel_filename_file
        python.exe -m pip install -q --upgrade %WHEEL_FILENAME%
        set PATH=%PATH%;$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo
        @echo %PATH%
        python $(Build.SourcesDirectory)\tools\ci_build\build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --test --config RelWithDebInfo --enable_lto --disable_rtti %BUILD_ARCH_SWITCH%
      workingDirectory: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
      displayName: 'Run Unit Tests'
      env:
        ${{ if eq(parameters.BuildArch, 'x64') }}:
          BUILD_ARCH_SWITCH: ''
        ${{ if ne(parameters.BuildArch, 'x64') }}:
          BUILD_ARCH_SWITCH: '--${{ parameters.BuildArch }}'

    - task: PublishTestResults@2
      displayName: 'Publish unit test results'
      inputs:
        testResultsFiles: '**\*.results.xml'
        searchFolder: '$(Build.BinariesDirectory)'
        testRunTitle: 'Unit Test Run'
      condition: succeededOrFailed()
  
  - ${{ if and(eq(parameters.BuildArch, 'x64'), eq(parameters.BuildForStore, 'false'), eq(parameters.Runtime, 'dynamic')) }}:
    - script: |
       xcopy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\winml_test_api.exe $(Build.ArtifactStagingDirectory)\test_artifact\
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\winml_test_scenario.exe $(Build.ArtifactStagingDirectory)\test_artifact\
       copy $(Build.SourcesDirectory)\winml\test\api\models\*.onnx $(Build.ArtifactStagingDirectory)\test_artifact\
       copy $(Build.SourcesDirectory)\winml\test\scenario\cppwinrt\*.onnx $(Build.ArtifactStagingDirectory)\test_artifact\
       copy $(Build.SourcesDirectory)\winml\test\scenario\models\*.onnx $(Build.ArtifactStagingDirectory)\test_artifact\
       copy $(Build.SourcesDirectory)\winml\test\common\testdata\squeezenet\* $(Build.ArtifactStagingDirectory)\test_artifact\
       copy $(Build.SourcesDirectory)\winml\test\collateral\models\*.onnx $(Build.ArtifactStagingDirectory)\test_artifact\
       xcopy $(Build.SourcesDirectory)\winml\test\collateral\models\ModelSubdirectory $(Build.ArtifactStagingDirectory)\test_artifact\ModelSubdirectory\ /i
       copy $(Build.SourcesDirectory)\winml\test\collateral\images\*.png $(Build.ArtifactStagingDirectory)\test_artifact\
       copy $(Build.SourcesDirectory)\winml\test\collateral\images\*.jpg $(Build.ArtifactStagingDirectory)\test_artifact\
       copy $(Build.SourcesDirectory)\onnxruntime\test\testdata\sequence_length.onnx $(Build.ArtifactStagingDirectory)\test_artifact\
       copy $(Build.SourcesDirectory)\onnxruntime\test\testdata\sequence_construct.onnx $(Build.ArtifactStagingDirectory)\test_artifact\
      displayName: 'Copy WinML test collateral to artifact directory'

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 5.7.0
    inputs:
      versionSpec: 5.7.0

  - task: BatchScript@1
    displayName: 'Setup VS2019 env vars'
    inputs:
      filename: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat'
      ${{ if eq(parameters.BuildArch, 'x64') }}:
        arguments: 'x64'
      ${{ if eq(parameters.BuildArch, 'x86') }}:
        arguments: 'x86'
      ${{ if eq(parameters.BuildArch, 'arm64') }}:
        arguments: 'x64'
      ${{ if eq(parameters.BuildArch, 'arm') }}:
        arguments: 'x64'
      modifyEnvironment: true
   
  - ${{ if and(eq(parameters.BuildArch, 'x64'), eq(parameters.BuildForStore, 'false')) }}:
    - script: msbuild Microsoft.AI.MachineLearning.Interop.csproj /p:Configuration=RelWithDebInfo /p:Platform="Any CPU" /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) -restore
      workingDirectory: '$(Build.SourcesDirectory)\csharp\src\Microsoft.AI.MachineLearning.Interop'
      displayName: 'Build Microsoft.AI.MachineLearning.Interop.dll'

  # Esrp signing
  - template: win-esrp-dll.yml
    parameters:
      FolderPath: '$(Build.BinariesDirectory)\RelWithDebInfo'
      DisplayName: 'ESRP - Sign Native dlls'
      DoEsrp: 'true'


  - ${{ if and(eq(parameters.BuildArch, 'x64'), eq(parameters.BuildForStore, 'false')) }}:
    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreateWindowsAIPackage /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) /p:OnnxRuntimeSourceDirectory=$(Build.SourcesDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.snupkg $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'

  - ${{ if and(eq(parameters.BuildArch, 'x86'), eq(parameters.BuildForStore, 'false')) }}:
    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreateWindowsAIPackage /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) /p:OnnxRuntimeSourceDirectory=$(Build.SourcesDirectory) /p:TargetArchitecture=x86
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.snupkg $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'

  - ${{ if and(eq(parameters.BuildArch, 'x64'), eq(parameters.BuildForStore, 'true')) }}:
    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreateWindowsAIPackage /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) /p:OnnxRuntimeSourceDirectory=$(Build.SourcesDirectory) /p:IsStoreBuild=True /p:ProtocDirectory=$(Build.BinariesDirectory)\host_protoc\Release
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.snupkg $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'

  - ${{ if and(eq(parameters.BuildArch, 'x86'), eq(parameters.BuildForStore, 'true')) }}:
    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreateWindowsAIPackage /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) /p:OnnxRuntimeSourceDirectory=$(Build.SourcesDirectory) /p:TargetArchitecture=x86 /p:IsStoreBuild=True /p:ProtocDirectory=$(Build.BinariesDirectory)\host_protoc\Release
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.snupkg $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'

  - ${{ if eq(parameters.BuildArch, 'arm64') }}:
    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreateWindowsAIPackage /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) /p:OnnxRuntimeSourceDirectory=$(Build.SourcesDirectory) /p:TargetArchitecture=arm64 /p:IsStoreBuild=${{ parameters.BuildForStore }} /p:ProtocDirectory=$(Build.BinariesDirectory)\host_protoc\Release
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.snupkg $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'

  - ${{ if eq(parameters.BuildArch, 'arm') }}:
    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreateWindowsAIPackage /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory) /p:OnnxRuntimeSourceDirectory=$(Build.SourcesDirectory) /p:TargetArchitecture=arm /p:IsStoreBuild=${{ parameters.BuildForStore }} /p:ProtocDirectory=$(Build.BinariesDirectory)\host_protoc\Release
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
       copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.snupkg $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline Artifact: $(ArtifactName)'
    inputs:
      artifactName: '$(ArtifactName)'
      targetPath: '$(Build.ArtifactStagingDirectory)'

  - task: PublishSymbols@2
    displayName: 'Publish Build Symbols'
    condition: eq(variables['IsReleaseBuild'], 'true')
    inputs:
      symbolsFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
      searchPattern: '**/*.pdb'
      symbolServerType: teamServices

  - ${{ if eq(parameters['DoCompliance'], 'true') }}:
    - template: compliance.yml
      parameters :
        ${{ if ne(parameters.BuildArch, 'x86') }}:
          msbuildPlatform: ${{ parameters.BuildArch }}
        ${{ if eq(parameters.BuildArch, 'x86') }}:
          msbuildPlatform: 'Win32'

  - template: component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'

  - template: clean-agent-build-directory-step.yml
