jobs:
- job: Manylinux2010_py_Wheels
  workspace:
    clean: all
  pool: Linux-CPU
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
        python.dir: '/opt/python/cp35-cp35m'
        python.include.dir: '/opt/python/cp35-cp35m/include/python3.5m'
      Python36:
        python.version: '3.6'
        python.dir: '/opt/python/cp36-cp36m'
        python.include.dir: '/opt/python/cp36-cp36m/include/python3.6m'
      Python37:
        python.version: '3.7'
        python.dir: '/opt/python/cp37-cp37m'
        python.include.dir: '/opt/python/cp37-cp37m/include/python3.7m'
      Python38:
        python.version: '3.8'
        python.dir: '/opt/python/cp38-cp38'
        python.include.dir: '/opt/python/cp38-cp38/include/python3.8'
  steps:
    - template: templates/set-test-data-variables-step.yml

    - task: CmdLine@2
      displayName: 'Download azcopy'
      inputs:
        script: |
          curl -so azcopy.tar.gz -L 'https://aka.ms/downloadazcopy-v10-linux'
          tar -zxvf azcopy.tar.gz --strip 1
        workingDirectory: $(Build.BinariesDirectory)

    - task: PythonScript@0
      displayName: 'Download test data'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)/tools/ci_build/github/download_test_data.py'
        arguments: --test_data_url $(TestDataUrl) --build_dir $(Build.BinariesDirectory)
        pythonInterpreter: '/usr/bin/python3'
        workingDirectory: $(Build.BinariesDirectory)
    - task: CmdLine@2
      inputs:
        script: |
          docker build --pull -t onnxruntime-manylinux-$(python.version)  --build-arg BUILD_USER=onnxruntimedev --build-arg BUILD_UID=$(id -u) --build-arg PYTHON_VERSION=$(python.version) -f Dockerfile.manylinux1 .
        workingDirectory: $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker
    - task: CmdLine@2
      inputs:
        script: |
          docker run --rm --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build -e NIGHTLY_BUILD -e BUILD_BUILDNUMBER onnxruntime-manylinux-$(python.version) $(python.dir)/bin/python3 /onnxruntime_src/tools/ci_build/build.py --build_dir /build --config Release --skip_submodule_sync --parallel  --build_wheel --use_openmp --enable_onnx_tests --cmake_extra_defines PYTHON_INCLUDE_DIR=$(python.include.dir) PYTHON_LIBRARY=/usr/lib64/librt.so
        workingDirectory: $(Build.SourcesDirectory)

    - task: CopyFiles@2
      displayName: 'Copy Python Wheel to:  $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)'
        Contents: 'Release/dist/*-manylinux1_x86_64.whl'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ONNXRuntime python wheel'
      inputs:
        ArtifactName: onnxruntime

    - template: templates/component-governance-component-detection-steps.yml

    - template: templates/clean-agent-build-directory-step.yml

- job: Manylinux2010_py_GPU_Wheels
  workspace:
    clean: all
  pool: Linux-GPU-CUDA10
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
        python.dir: '/opt/python/cp35-cp35m'
        python.include.dir: '/opt/python/cp35-cp35m/include/python3.5m'
      Python36:
        python.version: '3.6'
        python.dir: '/opt/python/cp36-cp36m'
        python.include.dir: '/opt/python/cp36-cp36m/include/python3.6m'
      Python37:
        python.version: '3.7'
        python.dir: '/opt/python/cp37-cp37m'
        python.include.dir: '/opt/python/cp37-cp37m/include/python3.7m'
      Python38:
        python.version: '3.8'
        python.dir: '/opt/python/cp38-cp38'
        python.include.dir: '/opt/python/cp38-cp38/include/python3.8'
  steps:
    - template: templates/set-test-data-variables-step.yml

    - task: CmdLine@2
      displayName: 'Download azcopy'
      inputs:
        script: |
          curl -so azcopy.tar.gz -L 'https://aka.ms/downloadazcopy-v10-linux'
          tar -zxvf azcopy.tar.gz --strip 1
        workingDirectory: $(Build.BinariesDirectory)

    - task: PythonScript@0
      displayName: 'Download test data'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)/tools/ci_build/github/download_test_data.py'
        arguments: --test_data_url $(TestDataUrl) --build_dir $(Build.BinariesDirectory)
        pythonInterpreter: '/usr/bin/python3'
        workingDirectory: $(Build.BinariesDirectory)
    - task: CmdLine@2
      inputs:
        script: |
          docker build --pull -t onnxruntime-manylinux-gpu-$(python.version) --build-arg BUILD_USER=onnxruntimedev --build-arg BUILD_UID=$(id -u) --build-arg PYTHON_VERSION=$(python.version) -f Dockerfile.manylinux2010_gpu .
        workingDirectory: $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker
    - task: CmdLine@2
      inputs:
        script: |
          docker run --gpus all -e NVIDIA_VISIBLE_DEVICES=all --rm --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build -e NIGHTLY_BUILD -e BUILD_BUILDNUMBER onnxruntime-manylinux-gpu-$(python.version) $(python.dir)/bin/python3 /onnxruntime_src/tools/ci_build/build.py --build_dir /build --config Release --skip_submodule_sync  --parallel   --build_wheel --use_openmp --enable_onnx_tests --cmake_extra_defines PYTHON_INCLUDE_DIR=$(python.include.dir) PYTHON_LIBRARY=/usr/lib64/librt.so --use_cuda --cuda_version=10.1 --cuda_home=/usr/local/cuda-10.1  --cudnn_home=/usr/local/cuda-10.1
        workingDirectory: $(Build.SourcesDirectory)

    - task: CopyFiles@2
      displayName: 'Copy Python Wheel to:  $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)'
        Contents: 'Release/dist/*-manylinux2010_x86_64.whl'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ONNXRuntime python wheel'
      inputs:
        ArtifactName: onnxruntime_gpu

    - template: templates/component-governance-component-detection-steps.yml

    - template: templates/clean-agent-build-directory-step.yml

- job: Windows_py_Wheels
  pool: 'Win-CPU-2019'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    MsbuildArguments: '-maxcpucount'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    EnvSetupScript: setup_env.bat
    buildArch: x64
    setVcvars: true
    BuildConfig: 'Release'
  timeoutInMinutes: 60
  workspace:
    clean: all
  steps:    
  - task: UsePythonVersion@0
    inputs: 
      versionSpec: $(python.version) 
      addToPath: true 
      architecture: 'x64'
  - template: templates/set-test-data-variables-step.yml

  - task: BatchScript@1
    displayName: 'setup env'
    inputs:
      filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - script: |
     python -m pip install -q pyopenssl setuptools wheel numpy==1.18
   
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Install python modules'        

  - task: PythonScript@0
    displayName: 'Download test data'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\github\download_test_data.py'
      arguments: --test_data_url $(TestDataUrl) --build_dir $(Build.BinariesDirectory)
      workingDirectory: $(Build.BinariesDirectory)

  - task: PythonScript@0
    displayName: 'BUILD'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: '--config RelWithDebInfo --enable_lto --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_generator "Visual Studio 16 2019" --build_wheel --use_openmp --enable_onnx_tests --parallel'
      workingDirectory: '$(Build.BinariesDirectory)'     
  
  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
      Contents: '**\dist\*.whl'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime python wheel'
    inputs:
      ArtifactName: onnxruntime

  - template: templates/component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'

  - template: templates/clean-agent-build-directory-step.yml

- job:  Windows_py_GPU_Wheels
  workspace:
    clean: all
  pool: 'Win-GPU-2019'
  timeoutInMinutes:  60  
  variables:
    CUDA_VERSION: '10.1'
    EnvSetupScript: setup_env_cuda.bat
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
  steps:
    - task: UsePythonVersion@0
      inputs: 
        versionSpec: $(python.version) 
        addToPath: true 
        architecture: 'x64'

    - task: BatchScript@1
      displayName: 'setup env'
      inputs:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
        modifyEnvironment: true
        workingFolder: '$(Build.BinariesDirectory)'


    - script: |
       python -m pip install -q pyopenssl setuptools wheel numpy==1.18
      workingDirectory: '$(Build.BinariesDirectory)'
      displayName: 'Install python modules'

    - template: templates/set-test-data-variables-step.yml
    - task: PythonScript@0
      displayName: 'Download test data'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\github\download_test_data.py'
        arguments: --test_data_url $(TestDataUrl) --build_dir $(Build.BinariesDirectory)
        workingDirectory: $(Build.BinariesDirectory)

    - task: PythonScript@0
      displayName: 'build'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: --config RelWithDebInfo --enable_lto --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_generator "Visual Studio 16 2019" --build_wheel --use_openmp --enable_onnx_tests --parallel --use_cuda --cuda_version=$(CUDA_VERSION) --cuda_home="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$(CUDA_VERSION)" --cudnn_home="C:\local\cudnn-$(CUDA_VERSION)-windows10-x64-v7.6.5.32\cuda"
        workingDirectory: '$(Build.BinariesDirectory)'   

    - task: CopyFiles@2
      displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
        Contents: '**\dist\*.whl'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ONNXRuntime python wheel'
      inputs:
        ArtifactName: onnxruntime_gpu

    - template: templates/component-governance-component-detection-steps.yml

    - template: templates/clean-agent-build-directory-step.yml
    
- job: MacOS_py_Wheels
  workspace:
    clean: all
  pool:
    vmImage: 'macOS-10.14'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
  steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python'
      inputs:
        versionSpec: $(python.version)

    - script: |
        sudo python -m pip install -r '$(Build.SourcesDirectory)/tools/ci_build/github/linux/docker/scripts/requirements.txt'
        sudo xcode-select --switch /Applications/Xcode_10.app/Contents/Developer
        ./build.sh --config Release --skip_submodule_sync --parallel --build_wheel --use_openmp
      displayName: 'Command Line Script' 
      
    - task: CopyFiles@2
      displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/build/Linux/Release/dist'
        Contents: '*.whl'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ONNXRuntime python wheel'
      inputs:
        ArtifactName: onnxruntime

    - template: templates/component-governance-component-detection-steps.yml
