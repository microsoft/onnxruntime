parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

- name: UseIncreasedTimeoutForTests
  displayName: Increase timeout for tests? Set it to false if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: DoEsrp
  displayName: Run code sign tasks? Must be true if you are doing an ONNX Runtime release
  type: boolean
  default: true

- name: IsReleaseBuild
  displayName: Is a release build? Set it to true if you are doing an ONNX Runtime release.
  type: boolean
  default: false

- name: PreReleaseVersionSuffixString
  displayName: Suffix added to pre-release package version. Only used if IsReleaseBuild is true. Denotes the type of pre-release package.
  type: string
  values:
  - alpha
  - beta
  - rc
  - none
  default: none

- name: PreReleaseVersionSuffixNumber
  displayName: Number added to pre-release package version. Only used if IsReleaseBuild is true. Denotes the sequence of a pre-release package.
  type: number
  default: 0

# these 2 parameters are used for debugging.
- name: SpecificArtifact
  displayName: Use Specific Artifact (Debugging only)
  type: boolean
  default: false

- name: BuildId
  displayName: Pipeline BuildId, you could find it in the URL
  type: string
  default: '0'

- name: NugetPackageSuffix
  displayName: Suffix to append to nuget package
  type: string
  default: 'NONE'

- name: AdditionalBuildFlag
  displayName: Build flags to append to build command
  type: string
  default: '--use_azure'

# Do not update this to a version that does not exist for the qnn-runtime Maven package:
# https://mvnrepository.com/artifact/com.qualcomm.qti/qnn-runtime
- name: QnnSdk
  displayName: QNN SDK Version
  type: string
  default: 2.34.0.250424

resources:
  repositories:
  - repository: onnxruntime-inference-examples # The name used to reference this repository in the checkout step
    type: github
    endpoint: ort-examples
    name: microsoft/onnxruntime-inference-examples
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

variables:
- template: templates/common-variables.yml
- name: ReleaseVersionSuffix
  value: ''
- name: win_trt_version
  value: 12.2

- name: win_trt_home
  value: $(Agent.TempDirectory)\${{ variables.win_trt_folder_cuda12 }}
- name: win_cuda_home
  value: $(Agent.TempDirectory)\v12.2
extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      binskim:
        enabled: true
        analyzeTargetGlob: $(Build.ArtifactStagingDirectory)/**.dll
      sourceAnalysisPool: "Onnxruntime-Win-CPU-2022"
      componentgovernance:
        ignoreDirectories: $(Build.SourcesDirectory)/onnxruntime-inference-examples
      sourceRepositoriesToScan:
        exclude:
        - repository: onnxruntime-inference-examples
      spotBugs:
        enabled: false
        justificationForDisabling: "Getting ##[error]1. SpotBugs Error gdn.unknownFormatResult - File: spotbugs.xml, which indicates that SpotBugs found one or more errors, which are not handled by the Guardian right now."
      codeql:
        compiled:
          enabled: false
          justificationForDisabling: 'CodeQL is taking nearly 6 hours resulting in timeouts in our production pipelines'
    stages:
    - template: stages/set_packaging_variables_stage.yml
      parameters:
        IsReleaseBuild: ${{ parameters.IsReleaseBuild }}
        PreReleaseVersionSuffixString: ${{ parameters.PreReleaseVersionSuffixString }}
        PreReleaseVersionSuffixNumber: ${{ parameters.PreReleaseVersionSuffixNumber }}

    - template: stages/download-java-tools-stage.yml

    - template: templates/c-api-cpu.yml
      parameters:
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        DoEsrp: ${{ parameters.DoEsrp }}
        IsReleaseBuild: ${{ parameters.IsReleaseBuild }}
        ${{ if eq(parameters.NugetPackageSuffix, 'NONE') }}:
          OrtNugetPackageId: 'Microsoft.ML.OnnxRuntime'
        ${{ else }}:
          OrtNugetPackageId: 'Microsoft.ML.OnnxRuntime${{ parameters.NugetPackageSuffix }}'
        AdditionalBuildFlags: ''
        AdditionalWinBuildFlags: '--enable_onnx_tests --enable_wcos ${{parameters.AdditionalBuildFlag}}'
        BuildVariant: 'default'
        SpecificArtifact: ${{ parameters.SpecificArtifact }}
        BuildId: ${{ parameters.BuildId }}
        QnnSDKVersion: ${{ parameters.QnnSdk }}
        is1ES: true

    - template: stages/java-cuda-packaging-stage.yml
      parameters:
        CudaVersion: 12.2
        SpecificArtifact: ${{ parameters.SpecificArtifact }}
        BuildId: ${{ parameters.BuildId }}

    - template: stages/nuget-combine-cuda-stage.yml
      parameters:
        CudaVersion: 12.2
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        UseIncreasedTimeoutForTests: ${{ parameters.UseIncreasedTimeoutForTests }}
        win_trt_home: ${{ variables.win_trt_home }}
        win_cuda_home: ${{ variables.win_cuda_home }}
        DoEsrp: ${{ parameters.DoEsrp }}
        IsReleaseBuild: ${{ parameters.IsReleaseBuild }}
        buildJava: true
        buildNodejs: true
        SpecificArtifact: ${{ parameters.SpecificArtifact }}
        BuildId: ${{ parameters.BuildId }}

    - template: stages/nodejs-win-packaging-stage.yml
      parameters:
        IsReleaseBuild: ${{ parameters.IsReleaseBuild }}
        ArtifactName: 'drop-onnxruntime-nodejs-win-x64'
        StageName: 'Windows_Nodejs_Packaging_x64'
        BuildCommand: --skip_submodule_sync --build_shared_lib --enable_onnx_tests --enable_wcos --use_telemetry --use_dml --use_webgpu --build_nodejs --cmake_generator "Visual Studio 17 2022" --enable_generic_interface
        BuildArch: 'x64'
        EnvSetupScript: 'setup_env.bat'
        sln_platform: 'x64'
        DoEsrp: ${{ parameters.DoEsrp }}
        PublishWebGpuBuildTools: true

    - template: stages/nodejs-win-packaging-stage.yml
      parameters:
        IsReleaseBuild: ${{ parameters.IsReleaseBuild }}
        ArtifactName: 'drop-onnxruntime-nodejs-win-arm64'
        StageName: 'Windows_Nodejs_Packaging_arm64'
        BuildCommand: --arm64 --skip_submodule_sync --build_shared_lib --enable_onnx_tests --enable_wcos --use_telemetry --use_dml --use_webgpu --build_nodejs --cmake_generator "Visual Studio 17 2022" --enable_generic_interface
        BuildArch: 'x64'
        EnvSetupScript: 'setup_env.bat'
        sln_platform: 'arm64'
        DoEsrp: ${{ parameters.DoEsrp }}
        DependsOnStageName: Windows_Nodejs_Packaging_x64
