parameters:
  DoEsrp: 'false'

jobs:  
- template: ../../templates/win-ci-2019.yml
  parameters:
    AgentPool : 'Win-CPU-2019'
    ArtifactName: 'drop-nuget'
    JobName: 'Windows_CI_Dev'
    BuildCommand:  '--build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --disable_ort_format_load --enable_onnx_tests --cmake_generator "Visual Studio 16 2019" --disable_contrib_ops --disable_ml_ops --enable_msvc_static_runtime'
    BuildArch: 'x64'    
    EnvSetupScript: 'setup_env.bat'
    sln_platform: 'x64'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreatePackage
     copy $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
     mkdir $(Build.ArtifactStagingDirectory)\testdata
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\custom_op_library.* $(Build.ArtifactStagingDirectory)\testdata

- template: ../../templates/win-ci-2019.yml
  parameters:
    AgentPool : 'Win-CPU-2019'
    ArtifactName: 'drop-win-x86-zip'
    JobName: 'Windows_CI_Dev_x86'
    BuildCommand: '--build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --disable_ort_format_load --enable_onnx_tests --x86 --cmake_generator "Visual Studio 16 2019" --disable_contrib_ops --disable_ml_ops --enable_msvc_static_runtime'
    BuildArch: 'x86'
    EnvSetupScript: 'setup_env_x86.bat'
    sln_platform: 'Win32'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: 'false'
    DoEsrp: ${{ parameters.DoEsrp }}
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /p:TargetArchitecture=x86 /t:CreatePackage
     cd $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\
     ren *.nupkg win-x86.zip
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*zip $(Build.ArtifactStagingDirectory)
     mkdir $(Build.ArtifactStagingDirectory)\testdata
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\custom_op_library.* $(Build.ArtifactStagingDirectory)\testdata

- template: ../../templates/win-ci-arm.yml
  parameters:
    AgentPool : 'Win-CPU-2019'
    JobName: 'Windows_Arm64_Dev'
    BuildCommand:  '--build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --disable_ort_format_load --cmake_generator "Visual Studio 16 2019" --disable_contrib_ops --disable_ml_ops --enable_msvc_static_runtime --arm64'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: 'false'
    MsbuildArguments: '/m /p:platform=arm64'
    DoEsrp: ${{ parameters.DoEsrp }}
    ArtifactName: 'drop-nuget-arm64'
    NuPackScript: |
     mkdir $(Build.BinariesDirectory)\arm64\runtimes\win10-arm\native
     cd $(Build.BinariesDirectory)\arm64
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\onnxruntime.pdb $(Build.BinariesDirectory)\arm64\runtimes\win10-arm\native
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\onnxruntime.lib $(Build.BinariesDirectory)\arm64\runtimes\win10-arm\native
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\onnxruntime.dll $(Build.BinariesDirectory)\arm64\runtimes\win10-arm\native
     powershell -Command "Invoke-WebRequest http://stahlworks.com/dev/zip.exe -OutFile zip.exe"
     zip -r win10-arm.zip runtimes
     copy *.zip $(Build.ArtifactStagingDirectory)

- job: 'Linux_CI_Dev'
  workspace:
    clean: all
  timeoutInMinutes: 120
  pool: $(AgentPoolLinux)
  steps:    
    - template: ../../templates/set-version-number-variables-step.yml
    - template: ../../templates/linux-set-variables-and-download.yml
    - task: Docker@2
      displayName: login
      inputs:
        containerRegistry: onnxruntimeregistry
        command: login
        addPipelineData: false
    - task: CmdLine@2
      inputs:
        script: |
          mkdir -p $HOME/.onnx
          docker run --rm --volume /data/onnx:/data/onnx:ro --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build --volume /data/models:/build/models:ro --volume $HOME/.onnx:/home/onnxruntimedev/.onnx -e NIGHTLY_BUILD onnxruntimeregistry.azurecr.io/internal/azureml/onnxruntimecpubuild:ch2j /bin/bash -c "/opt/python/cp37-cp37m/bin/python3 /onnxruntime_src/tools/ci_build/build.py --build_dir /build --config Release --enable_lto --skip_submodule_sync --parallel --build_shared_lib --disable_ort_format_load --enable_onnx_tests  --disable_contrib_ops --disable_ml_ops && cd /build/Release && make install DESTDIR=/build/linux-x64"
        workingDirectory: $(Build.SourcesDirectory)
    - task: Docker@2
      displayName: logout
      inputs:
        containerRegistry: onnxruntimeregistry
        command: logout
        addPipelineData: false
    - script: |
       set -e -x
       mv $(Build.BinariesDirectory)/linux-x64/usr/local/lib64 $(Build.BinariesDirectory)/linux-x64/linux-x64
       cd $(Build.BinariesDirectory)/linux-x64
       zip -r linux-x64.zip linux-x64
       cp $(Build.BinariesDirectory)/linux-x64/linux*.zip $(Build.ArtifactStagingDirectory)
       mkdir $(Build.ArtifactStagingDirectory)/testdata
       cp $(Build.BinariesDirectory)/Release/libcustom_op_library.so* $(Build.ArtifactStagingDirectory)/testdata 
       ls -al $(Build.ArtifactStagingDirectory)
      displayName: 'Create Artifacts'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'drop-linux'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - template: ../../templates/component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'
    - template: ../../templates/clean-agent-build-directory-step.yml

- template: ../../templates/mac-ci.yml
  parameters:
    AgentPool : $(AgentPoolMacOS)
    JobName: 'MacOS_CI_Dev'
    BuildCommand: 'python3 $(Build.SourcesDirectory)/tools/ci_build/build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --parallel --build_shared_lib --disable_ort_format_load --disable_contrib_ops --disable_ml_ops --config RelWithDebInfo'
    DoNugetPack : 'true'
    NuPackScript: |
     set -e -x
     mkdir $(Build.BinariesDirectory)/osx-x64
     find $(Build.BinariesDirectory)
     cp $(Build.BinariesDirectory)/RelWithDebInfo/libonnxruntime.dylib $(Build.BinariesDirectory)/osx-x64/
     dsymutil $(Build.BinariesDirectory)/osx-x64/libonnxruntime.dylib -o $(Build.BinariesDirectory)/osx-x64/libonnxruntime.dylib.dSYM
     strip -S -x $(Build.BinariesDirectory)/osx-x64/libonnxruntime.dylib
     find $(Build.BinariesDirectory)/osx-x64
     cwd=`pwd`
     cd $(Build.BinariesDirectory)
     zip -r osx-x64.zip osx-x64
     cp $(Build.BinariesDirectory)/osx-x64.zip $(Build.ArtifactStagingDirectory)
     mkdir $(Build.ArtifactStagingDirectory)/testdata
     cp $(Build.BinariesDirectory)/RelWithDebInfo/libcustom_op_library.dylib $(Build.ArtifactStagingDirectory)/testdata
     cd $cwd

- job: NuGet_Packaging
  workspace:
    clean: all
  pool: 'Win-CPU-2019'
  dependsOn:
  - Windows_CI_Dev
  - Windows_CI_Dev_x86
  - Windows_Arm64_Dev
  - Linux_CI_Dev
  - MacOS_CI_Dev
  condition: succeeded()
  steps:
  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'drop-nuget'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Win-x86'
    inputs:
      artifactName: 'drop-win-x86-zip'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Arm64'
    inputs:
      artifactName: 'drop-nuget-arm64'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Linux'
    inputs:
      artifactName: 'drop-linux'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - MacOS'
    inputs:
      artifactName: 'drop-osx'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - script: |
     pushd $(Build.BinariesDirectory)\nuget-artifact
     dir
     powershell -Command "Invoke-WebRequest http://stahlworks.com/dev/unzip.exe -OutFile unzip.exe"
     powershell -Command "Invoke-WebRequest http://stahlworks.com/dev/zip.exe -OutFile zip.exe"
     set PATH=%CD%;%PATH%
     SETLOCAL EnableDelayedExpansion
     FOR /R %%i IN (*.nupkg) do (
         set filename=%%~ni
         IF NOT "!filename:~25,7!"=="Managed" (
             rename %%~ni.nupkg %%~ni.zip
             unzip %%~ni.zip -d %%~ni
             del /Q %%~ni.zip
             unzip win-x86.zip -d win-x86
             unzip win10-arm.zip -d win10-arm
             unzip linux-x64.zip -d linux-x64
             mkdir %%~ni\runtimes\win-x86
             mkdir %%~ni\runtimes\win10-arm
             mkdir %%~ni\runtimes\linux-x64
             mkdir %%~ni\runtimes\win-x86\native
             mkdir %%~ni\runtimes\win10-arm\native
             mkdir %%~ni\runtimes\linux-x64\native
             move win-x86\runtimes\win-x86\native\onnxruntime.dll %%~ni\runtimes\win-x86\native\onnxruntime.dll
             move win-x86\runtimes\win-x86\native\onnxruntime.lib %%~ni\runtimes\win-x86\native\onnxruntime.lib
             move win-x86\runtimes\win-x86\native\onnxruntime.pdb %%~ni\runtimes\win-x86\native\onnxruntime.pdb
             move win10-arm\runtimes\win10-arm\native\onnxruntime.lib %%~ni\runtimes\win10-arm\native\onnxruntime.lib
             move win10-arm\runtimes\win10-arm\native\onnxruntime.dll %%~ni\runtimes\win10-arm\native\onnxruntime.dll
             move win10-arm\runtimes\win10-arm\native\onnxruntime.pdb %%~ni\runtimes\win10-arm\native\onnxruntime.pdb
             move linux-x64\linux-x64\libonnxruntime.so %%~ni\runtimes\linux-x64\native\libonnxruntime.so
             unzip osx-x64.zip -d osx-x64
             dir osx-x64 /s
             mkdir %%~ni\runtimes\osx-x64
             mkdir %%~ni\runtimes\osx-x64\native
             move osx-x64\osx-x64\libonnxruntime.dylib %%~ni\runtimes\osx-x64\native\libonnxruntime.dylib
             move osx-x64\osx-x64\libonnxruntime.dylib.dSYM %%~ni\runtimes\osx-x64\native\libonnxruntime.dylib.dSYM
             pushd %%~ni
             zip -r ..\%%~ni.zip .
             popd
             move %%~ni.zip %%~ni.nupkg
         )
     )
     popd
     copy $(Build.BinariesDirectory)\nuget-artifact\*.nupkg $(Build.ArtifactStagingDirectory)
    displayName: 'Bundle Native NuGet and other binaries'

  - template: ../../templates/esrp_nuget.yml
    parameters:
      DisplayName: 'ESRP - sign NuGet package'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      DoEsrp: ${{ parameters.DoEsrp }}

  - template: ../../templates/validate-nuget.yml
    parameters:
      NugetPath: '$(Build.ArtifactStagingDirectory)'
      NugetPackage: 'Microsoft.ML.OnnxRuntime.*nupkg'
      PlatformsSupported: 'win-x64,win-x86,win10-arm,linux-x64,osx-x64'
      VerifyNugetSigning: ${{ parameters.DoEsrp }}

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline NuGet Artifact'
    inputs:
      artifactName: 'drop-signed-nuget'
      targetPath: '$(Build.ArtifactStagingDirectory)'

- template: test_all_os.yml
