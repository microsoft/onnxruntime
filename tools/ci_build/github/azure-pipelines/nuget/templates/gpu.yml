parameters:
  DoEsrp: 'false'

jobs:
- template: win-ci-2019.yml
  parameters:
    AgentPool : 'onnxruntime-gpu-winbuild'
    ArtifactName: 'drop-nuget-dml'
    JobName: 'Windows_CI_GPU_DML_Dev'
    BuildCommand: --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --enable_onnx_tests --enable_wcos --use_telemetry --use_dml --use_winml --cmake_generator "Visual Studio 16 2019"
    BuildArch: 'x64'
    msbuildArchitecture: 'amd64'
    EnvSetupScript: 'setup_env_cuda_11.bat'
    sln_platform: 'x64'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: 'false'
    DoEsrp: ${{ parameters.DoEsrp }}
    CudaVersion: '11.4'
    OrtPackageId: 'Microsoft.ML.OnnxRuntime.DirectML'
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreatePackage /p:OrtPackageId=Microsoft.ML.OnnxRuntime.DirectML
     copy $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
     mkdir $(Build.ArtifactStagingDirectory)\testdata
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\custom_op_library.* $(Build.ArtifactStagingDirectory)\testdata

- template: win-ci-2019.yml
  parameters:
    AgentPool : 'onnxruntime-gpu-winbuild'
    ArtifactName: 'drop-win-dml-x86-zip'
    JobName: 'Windows_CI_GPU_DML_Dev_x86'
    BuildCommand: --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --enable_onnx_tests --enable_wcos --use_telemetry --use_dml --use_winml --cmake_generator "Visual Studio 16 2019"
    BuildArch: 'x86'
    EnvSetupScript: 'setup_env_x86.bat'
    sln_platform: 'Win32'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    RunTests: 'false'
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /p:TargetArchitecture=x86 /t:CreatePackage /p:OrtPackageId=Microsoft.ML.OnnxRuntime.DirectML
     cd $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\
     ren Microsoft.ML.OnnxRuntime.DirectML.* win-dml-x86.zip
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\win-dml-x86.zip $(Build.ArtifactStagingDirectory)
     mkdir $(Build.ArtifactStagingDirectory)\testdata
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\custom_op_library.* $(Build.ArtifactStagingDirectory)\testdata

- template: win-ci-2019.yml
  parameters:
    AgentPool : 'onnxruntime-gpu-winbuild'
    ArtifactName: 'drop-win-dml-arm64-zip'
    JobName: 'Windows_CI_GPU_DML_Dev_arm64'
    BuildCommand: --build_dir $(Build.BinariesDirectory) --arm64 --skip_submodule_sync --build_shared_lib --enable_onnx_tests --enable_wcos --use_telemetry --use_dml --use_winml --cmake_generator "Visual Studio 16 2019"
    BuildArch: 'x64'
    EnvSetupScript: 'setup_env.bat'
    sln_platform: 'arm64'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    RunTests: 'false'
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /p:TargetArchitecture=arm64 /t:CreatePackage /p:OrtPackageId=Microsoft.ML.OnnxRuntime.DirectML
     cd $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\
     ren Microsoft.ML.OnnxRuntime.DirectML.* win-dml-arm64.zip
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\win-dml-arm64.zip $(Build.ArtifactStagingDirectory)
     mkdir $(Build.ArtifactStagingDirectory)\testdata
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\custom_op_library.* $(Build.ArtifactStagingDirectory)\testdata

- template: win-ci-2019.yml
  parameters:
    AgentPool : 'onnxruntime-gpu-winbuild'
    ArtifactName: 'drop-win-dml-arm-zip'
    JobName: 'Windows_CI_GPU_DML_Dev_arm'
    BuildCommand: --build_dir $(Build.BinariesDirectory) --arm --skip_submodule_sync --build_shared_lib --enable_onnx_tests --enable_wcos --use_telemetry --use_dml --use_winml --cmake_generator "Visual Studio 16 2019"
    BuildArch: 'x64'
    EnvSetupScript: 'setup_env.bat'
    sln_platform: 'arm'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    RunTests: 'false'
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /p:TargetArchitecture=arm /t:CreatePackage /p:OrtPackageId=Microsoft.ML.OnnxRuntime.DirectML
     cd $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\
     ren Microsoft.ML.OnnxRuntime.DirectML.* win-dml-arm.zip
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\win-dml-arm.zip $(Build.ArtifactStagingDirectory)
     mkdir $(Build.ArtifactStagingDirectory)\testdata
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\custom_op_library.* $(Build.ArtifactStagingDirectory)\testdata

- job: NuGet_Packaging
  workspace:
    clean: all
  pool: 'onnxruntime-gpu-winbuild'
  dependsOn:
  - Windows_CI_GPU_DML_Dev
  - Windows_CI_GPU_DML_Dev_x86
  - Windows_CI_GPU_DML_Dev_arm64
  - Windows_CI_GPU_DML_Dev_arm
  condition: succeeded()
  steps:

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet DirectML'
    inputs:
      artifactName: 'drop-nuget-dml'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact-dml'

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet DirectML x86'
    inputs:
      artifactName: 'drop-win-dml-x86-zip'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact-dml'

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet DirectML arm64'
    inputs:
      artifactName: 'drop-win-dml-arm64-zip'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact-dml'

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet DirectML arm'
    inputs:
      artifactName: 'drop-win-dml-arm-zip'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact-dml'

  - script: |
     pushd $(Build.BinariesDirectory)\nuget-artifact-dml
     dir
     powershell -Command "Invoke-WebRequest http://stahlworks.com/dev/unzip.exe -OutFile unzip.exe"
     powershell -Command "Invoke-WebRequest http://stahlworks.com/dev/zip.exe -OutFile zip.exe"
     set PATH=%CD%;%PATH%
     SETLOCAL EnableDelayedExpansion
     FOR /R %%i IN (*.nupkg) do (
         set filename=%%~ni
         IF NOT "!filename:~25,7!"=="Managed" (
             rename %%~ni.nupkg %%~ni.zip
             unzip %%~ni.zip -d %%~ni
             del /Q %%~ni.zip

             unzip win-dml-x86.zip -d win-x86
             mkdir %%~ni\runtimes\win-x86
             mkdir %%~ni\runtimes\win-x86\native

             move win-x86\runtimes\win-x86\native\onnxruntime.dll %%~ni\runtimes\win-x86\native\onnxruntime.dll
             move win-x86\runtimes\win-x86\native\onnxruntime.lib %%~ni\runtimes\win-x86\native\onnxruntime.lib
             move win-x86\runtimes\win-x86\native\onnxruntime.pdb %%~ni\runtimes\win-x86\native\onnxruntime.pdb

             unzip win-dml-arm64.zip -d win-arm64
             mkdir %%~ni\runtimes\win-arm64
             mkdir %%~ni\runtimes\win-arm64\native

             move win-arm64\runtimes\win-arm64\native\onnxruntime.dll %%~ni\runtimes\win-arm64\native\onnxruntime.dll
             move win-arm64\runtimes\win-arm64\native\onnxruntime.lib %%~ni\runtimes\win-arm64\native\onnxruntime.lib
             move win-arm64\runtimes\win-arm64\native\onnxruntime.pdb %%~ni\runtimes\win-arm64\native\onnxruntime.pdb

             unzip win-dml-arm.zip -d win-arm
             mkdir %%~ni\runtimes\win-arm
             mkdir %%~ni\runtimes\win-arm\native

             move win-arm\runtimes\win-arm\native\onnxruntime.dll %%~ni\runtimes\win-arm\native\onnxruntime.dll
             move win-arm\runtimes\win-arm\native\onnxruntime.lib %%~ni\runtimes\win-arm\native\onnxruntime.lib
             move win-arm\runtimes\win-arm\native\onnxruntime.pdb %%~ni\runtimes\win-arm\native\onnxruntime.pdb

             pushd %%~ni
             zip -r ..\%%~ni.zip .
             popd
             move %%~ni.zip %%~ni.nupkg
         )
     )
     popd
     copy $(Build.BinariesDirectory)\nuget-artifact-dml\Microsoft.ML.OnnxRuntime.DirectML*nupkg $(Build.ArtifactStagingDirectory)
    displayName: 'Bundle DML NuGet and other binaries'

  - template: ../../templates/esrp_nuget.yml
    parameters:
      DisplayName: 'ESRP - sign NuGet package'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      DoEsrp: ${{ parameters.DoEsrp }}

  - template: ../../templates/validate-package.yml
    parameters:
      PackageType: 'nuget'
      PackagePath: '$(Build.ArtifactStagingDirectory)'
      PackageName: 'Microsoft.ML.OnnxRuntime.DirectML*nupkg'
      PlatformsSupported: 'win-x64,win-x86,win-arm64,win-arm'
      VerifyNugetSigning: ${{ parameters.DoEsrp }}

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline NuGet Artifact'
    inputs:
      artifactName: 'drop-signed-nuget'
      targetPath: '$(Build.ArtifactStagingDirectory)'
