
parameters:
  DoDebugBuild: 'true' # Unused. Use BuildConfigurations instead.
  DoCompliance: 'false'
  BuildCommand: ''
  StageName: 'Windows_CI_Dev'
  DoNugetPack:  'false'
  NuPackScript : ''
  ArtifactName: 'drop-nuget'
  DoNodejsPack: 'false'
  BuildNodejs: 'true'
  DoEsrp: 'false'
  DoTestCoverage: 'false'
  BuildArch: 'x64' # Optional. Options: x86, x64
  sln_platform: 'x64' # Options: Win32, x64, arm, arm64
  EnvSetupScript: 'setup_env.bat'
  AgentDemands: []
  OrtPackageId: Microsoft.ML.OnnxRuntime.DirectML
  BuildConfigurations: ['RelWithDebInfo'] # Options: Debug, RelWithDebInfo
  RunTests : 'true'
  EnableLto: true
  # Controls whether unreleased onnx opsets are allowed. Default is set to 1
  AllowReleasedOpsetOnly: '0'
  IsReleaseBuild: false
stages:
- stage: ${{ parameters.StageName }}
  dependsOn: Setup
  jobs:
  - job: ${{ parameters.StageName }}
    timeoutInMinutes: 200
    strategy:
      maxParallel: 2
      matrix:
        ${{ each BuildConfiguration in parameters.BuildConfigurations }}:
          ${{ BuildConfiguration }}:
            BuildConfig: ${{ BuildConfiguration }}
    workspace:
      clean: all
    pool:
      name: onnxruntime-Win-CPU-2022
      demands: ${{ parameters.AgentDemands }}
    variables:
      buildDirectory: '$(Build.BinariesDirectory)'
      OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
      runCodesignValidationInjection: and(${{ parameters.DoNodejsPack }},${{ parameters. DoEsrp}}) #For the others, code sign is in a separated job
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      ALLOW_RELEASED_ONNX_OPSET_ONLY: ${{ parameters.AllowReleasedOpsetOnly }}
      BuildDate : $[stageDependencies.Setup.Set_Variables.outputs['Set_Build_Date.BuildDate']]
      BuildTime : $[stageDependencies.Setup.Set_Variables.outputs['Set_Build_Time.BuildTime']]
      ${{ if eq(parameters.EnableLto, true) }}:
        build_py_lto_flag: --enable_lto

    steps:
      - checkout: self
        clean: true
        submodules: none

      - powershell: |
          if($env:TELEMETRYGUID)
          {
            $length = $env:TELEMETRYGUID.length
            $fileContent = "#define TraceLoggingOptionMicrosoftTelemetry() \
              TraceLoggingOptionGroup("+$env:TELEMETRYGUID.substring(1, $length-2)+")"
            New-Item -Path "$(Build.SourcesDirectory)\include\onnxruntime\core\platform\windows\TraceLoggingConfigPrivate.h" -ItemType "file" -Value "$fileContent" -Force
            Write-Output "Enabling TELEMETRY"
          }
        displayName: 'Create TraceLoggingConfigPrivate.h For WinML Telemetry'
        env:
          TELEMETRYGUID: $(TELEMETRYGUID)

      - task: NodeTool@0
        inputs:
          versionSpec: '20.x'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.12'
          addToPath: true
          architecture: ${{ parameters.BuildArch }}   

      # need to set PROCESSOR_ARCHITECTURE so the x86 SDK is installed correctly
      - task: UseDotNet@2
        inputs:
          version: 8.x
        env:
          PROCESSOR_ARCHITECTURE: ${{ parameters.BuildArch }}

      - task: BatchScript@1
        displayName: 'Setup VS2022 env vars'
        inputs:
          filename: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat'
          arguments: ${{ parameters.BuildArch }}
          modifyEnvironment: true

      - ${{ if notIn(parameters['sln_platform'], 'Win32', 'x64') }}:
        - powershell: |
            python tools\ci_build\build.py ${{ parameters.BuildCommand }} --use_binskim_compliant_compile_flags --parallel --build_csharp --build --update --config $(BuildConfig) --build_nuget --msbuild_extra_options IncludeMobileTargets=false ${{ variables.build_py_lto_flag }}

      - ${{ else }}:
        - powershell: |
            python tools\ci_build\build.py ${{ parameters.BuildCommand }} --use_binskim_compliant_compile_flags --parallel --use_vcpkg --build_csharp --build --update --config $(BuildConfig) --build_nuget --msbuild_extra_options IncludeMobileTargets=false ${{ variables.build_py_lto_flag }}

      - ${{ if notIn(parameters['sln_platform'], 'Win32', 'x64') }}:
        # Use cross-compiled protoc
        - script: |
           @echo ##vso[task.setvariable variable=ProtocDirectory]$(Build.BinariesDirectory)\installed\bin

      # The Configuration variable is required to build C#
      - script: |
         @echo ##vso[task.setvariable variable=Configuration]$(BuildConfig)
        displayName: 'Set Configuration variable'


      - task: NuGetToolInstaller@0
        displayName: Use Nuget 6.10.x
        inputs:
          versionSpec: 6.10.x

      # Nuget packaging if needed
      - ${{ if eq(parameters['DoNugetPack'], 'true') }}:
        # Esrp signing. Requires older .net SDK currently (ESRP v5.1.1)
        - task: UseDotNet@2
          inputs:
            version: 6.x
          env:
            PROCESSOR_ARCHITECTURE: ${{ parameters.BuildArch }}

        - template: ../../templates/win-esrp-dll.yml
          parameters:
            FolderPath: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)'
            DisplayName: 'ESRP - Sign Native dlls'
            DoEsrp: ${{ parameters.DoEsrp }}
            Pattern: 'onnx_test_runner.exe, onnxruntime_perf_test.exe,*.dll' #keep sync with src/Microsoft.ML.OnnxRuntime/Microsoft.ML.OnnxRuntime.csproj

        - template: ../../templates/win-esrp-dll.yml
          parameters:
            FolderPath: '$(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\$(BuildConfig)'
            DisplayName: 'ESRP - Sign C# dlls'
            DoEsrp: ${{ parameters.DoEsrp }}

        - script: |
           ${{ parameters.NuPackScript }}
          workingDirectory: '$(Build.SourcesDirectory)\csharp'
          displayName: 'Create NuGet Package'
          failOnStderr: true

        - task: PublishPipelineArtifact@0
          displayName: 'Publish Pipeline Artifact: ${{ parameters.ArtifactName }}'
          inputs:
            artifactName: ${{ parameters.ArtifactName }}
            targetPath: '$(Build.ArtifactStagingDirectory)'

        - task: PublishSymbols@2
          displayName: 'Publish Build Symbols'
          condition: and (succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/rel-')))
          inputs:
            SymbolsFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
            SearchPattern: 'onnxruntime.pdb'
            SymbolServerType: teamServices
            SymbolExpirationInDays: 365

      # Node.js Publish
      - ${{ if eq(parameters['DoNodejsPack'], 'true') }}:
        - task: BatchScript@1
          displayName: 'Setup VS env vars'
          inputs:
            filename: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat'
            arguments: ${{ parameters.BuildArch }}
            modifyEnvironment: true
        - template: ../../templates/win-esrp-dll.yml
          parameters:
            FolderPath: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\x64'
            DisplayName: 'ESRP - Sign Node.js binding binaries'
            DoEsrp: ${{ parameters.DoEsrp }}
            Pattern: '*.dll,*.node'

        - script: |
           del /Q $(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\x64\CodeSignSummary-*.*
           call npm pack
           copy $(Build.SourcesDirectory)\js\node\onnxruntime-*.tgz $(Build.ArtifactStagingDirectory)
           xcopy /E /I $(Build.SourcesDirectory)\js\node\prebuilds $(Build.ArtifactStagingDirectory)\prebuilds
          workingDirectory: '$(Build.SourcesDirectory)\js\node'
          displayName: 'Create NPM Package'

        - task: PublishPipelineArtifact@0
          displayName: 'Publish Pipeline Artifact: ${{ parameters.ArtifactName }}'
          inputs:
            artifactName: ${{ parameters.ArtifactName }}
            targetPath: '$(Build.ArtifactStagingDirectory)'

        # Put an unzipped version there to check if all the binaries are signed.
        - script: |
           7z x $(Build.ArtifactStagingDirectory)\prebuilds\onnxruntime-*.tar.gz
           7z x $(Build.ArtifactStagingDirectory)\onnxruntime-*.tar
          displayName: 'Unzip package to test'
          workingDirectory: '$(Build.ArtifactStagingDirectory)'

      - ${{ if eq(parameters.BuildNodejs, 'true') }}:
        - task: CopyFiles@2
          displayName: 'Copy DirectML binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\${{ parameters.sln_platform }}'
          inputs:
            SourceFolder: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)'
            Contents: 'DirectML.dll'
            TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\${{ parameters.sln_platform }}'
        - template: ../../templates/win-esrp-dll.yml
          parameters:
            FolderPath: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\${{ parameters.sln_platform }}'
            DisplayName: 'ESRP - Sign Node.js binding binaries'
            DoEsrp: ${{ parameters.DoEsrp }}
            Pattern: '*.node'
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\${{ parameters.sln_platform }}'
            artifactName: 'drop-onnxruntime-nodejs-win-${{ parameters.sln_platform }}-dml'


      - ${{ if eq(parameters['DoCompliance'], 'true') }}:
        - template: ../../templates/compliance.yml
          parameters :
            msbuildPlatform: ${{ parameters.sln_platform }}

      - template: ../../templates/component-governance-component-detection-steps.yml
        parameters :
          condition : 'succeeded'
