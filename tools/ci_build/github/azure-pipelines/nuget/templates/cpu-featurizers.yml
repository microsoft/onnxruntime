parameters:
  DoEsrp: 'false'
  PackageName: 'Microsoft.ML.OnnxRuntime'
  DoCompliance: 'false'

jobs: 
- template: ../../templates/win-ci-2019.yml
  parameters:
    AgentPool : 'Win-CPU-2019'
    ArtifactName: 'drop-nuget'
    JobName: 'Windows_CI_Dev'
    BuildCommand:  '--build_dir $(Build.BinariesDirectory) --skip_submodule_sync --use_openmp --build_shared_lib --use_featurizers --enable_onnx_tests --use_telemetry --use_winml --cmake_generator "Visual Studio 16 2019"'
    BuildArch: 'x64'
    EnvSetupScript: 'setup_env.bat'
    sln_platform: 'x64'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreatePackage
     copy $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
     mkdir $(Build.ArtifactStagingDirectory)\testdata
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\custom_op_library.* $(Build.ArtifactStagingDirectory)\testdata

- template: ../../templates/win-ci-2019.yml
  parameters:
    AgentPool : 'Win-CPU-2019'
    ArtifactName: 'drop-win-x86-zip'
    JobName: 'Windows_CI_Dev_x86'
    BuildCommand: '--build_dir $(Build.BinariesDirectory) --skip_submodule_sync --use_openmp --build_shared_lib --use_featurizers --enable_onnx_tests --x86 --use_telemetry --use_winml --cmake_generator "Visual Studio 16 2019"'
    BuildArch: 'x86'
    EnvSetupScript: 'setup_env_x86.bat'
    sln_platform: 'Win32'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /p:TargetArchitecture=x86 /t:CreatePackage
     cd $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\
     ren *.nupkg win-x86.zip
     copy $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\*zip $(Build.ArtifactStagingDirectory)
     mkdir $(Build.ArtifactStagingDirectory)\testdata
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\custom_op_library.* $(Build.ArtifactStagingDirectory)\testdata

- job: NuGet_Packaging
  workspace:
    clean: all
  pool: 'Win-CPU-2019'
  dependsOn:
  - Windows_CI_Dev
  condition: succeeded()
  steps:

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'drop-nuget'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    # XXX: This currently bundles only Windows.
    # Add linux when linux build is fixed.
  - template: bundle_featurizers_dlls.yml

  - template: ../../templates/esrp_nuget.yml
    parameters:
      DisplayName: 'ESRP - sign NuGet package'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      DoEsrp: ${{ parameters.DoEsrp }}

  - template: ../../templates/validate-nuget.yml
    parameters:
      NugetPath: '$(Build.ArtifactStagingDirectory)'
      PlatformsSupported: 'win-x64,win-x86'
      VerifyNugetSigning: ${{ parameters.DoEsrp }}

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline NuGet Artifact'
    inputs:
      artifactName: 'drop-signed-nuget'
      targetPath: '$(Build.ArtifactStagingDirectory)'

   # XXX: Only windows now
- template: test_win.yml

- job: Publish_NuGet_Package_And_Report
  workspace:
    clean: all
  pool: 
    name: Hosted Windows 2019 with VS2019
    # AzureFileCopy@3 task has some bug that it depends on a particular version of azure power shell, 
    # which is not available in OnnxRuntime build VMs, but available in the latest hosted agents. 
    # So, all the copy/publish jobs are being run on hosted agent
    # TODO: install the desired azureps on our VMs or use later bugfixed version of AzureFileCopy   
    demands: azureps
  condition: and (succeeded(), and (${{ parameters.DoEsrp }}, eq(variables['Build.SourceBranch'], 'refs/heads/master')))
  dependsOn:
  - NuGet_Test_Win
  steps:
  - task: NuGetCommand@2
    displayName: 'NuGet push to ORT-NIGHTLY'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.BinariesDirectory)/nuget-artifact/final-package/Microsoft.ML.OnnxRuntime.$(NuGetPackageVersionNumber).nupkg'
      publishVstsFeed: '2692857e-05ef-43b4-ba9c-ccf1c22c437c/7982ae20-ed19-4a35-a362-a96ac99897b7'

