parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

jobs:
- job: 'build'
  pool: 'Win-GPU-2019'
  strategy:
    matrix:
      cuda:
        additionalBuildFlags: --build_java --build_nodejs --use_cuda --cuda_version=11.1 --cuda_home="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1" --cudnn_home="C:\local\cudnn-11.1-windows-x64-v8.0.5.39\cuda" --cmake_extra_defines CMAKE_CUDA_ARCHITECTURES=52 --gen_doc validate
        EnvSetupScript: setup_env_cuda_11.bat
        ORT_EP_NAME: CUDA
      dml:
        additionalBuildFlags: --use_dml --cmake_extra_defines CMAKE_SYSTEM_VERSION=10.0.18362.0 --enable_wcos  --use_winml
        EnvSetupScript: setup_env.bat
        ORT_EP_NAME: DML
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime.Gpu'
    MsbuildArguments: '-maxcpucount'
    TESTONGPU: 'ON'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    setVcvars: true
    BuildConfig: 'RelWithDebInfo'
    UseOmp: ''
    buildArch: x64
    msbuildPlatform: x64
    isX86: false
    ALLOW_RELEASED_ONNX_OPSET_ONLY: '0'
    DocUpdateNeeded: false
  timeoutInMinutes: 180
  workspace:
    clean: all
  steps:    
  - task: UsePythonVersion@0
    inputs: 
      versionSpec: '3.7' 
      addToPath: true 
      architecture: $(buildArch)

  - task: NodeTool@0
    inputs:
      versionSpec: '12.x'
      force32bit: $(isX86)

  - task: JavaToolInstaller@0
    #Our build machine doesn't have java x86
    condition: and(succeeded(), eq(variables['buildArch'], 'x64'))
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: $(buildArch)
      jdkSourceOption: 'PreInstalled'

  - task: BatchScript@1
    displayName: 'setup env'
    inputs:
      filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - script: |
     set ORT_DOXY_SRC=$(Build.SourcesDirectory)
     set ORT_DOXY_OUT=$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)
     mkdir %ORT_DOXY_SRC% 
     mkdir %ORT_DOXY_OUT%
     "C:\Program Files\doxygen\bin\doxygen.exe" $(Build.SourcesDirectory)\tools\ci_build\github\Doxyfile_csharp.cfg
     
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'API Documentation Check and generate'

  - script: |
     python -m pip install -q pyopenssl setuptools wheel numpy flake8
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Install python modules'

  - powershell: |
     $Env:USE_MSVC_STATIC_RUNTIME=1
     $Env:ONNX_ML=1
     $Env:CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DONNX_USE_LITE_PROTO=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=$(buildArch)-windows-static"
     python setup.py bdist_wheel
     python -m pip uninstall -y onnx -qq
     Get-ChildItem -Path dist/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname}
    workingDirectory: '$(Build.SourcesDirectory)\cmake\external\onnx'
    displayName: 'Install ONNX'

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 5.7.0
    inputs:
      versionSpec: 5.7.0

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      command: 'restore'
      feedsToUse: 'config'
      restoreSolution: '$(Build.SourcesDirectory)\packages.config'
      nugetConfigPath: '$(Build.SourcesDirectory)\NuGet.config'
      restoreDirectory: '$(Build.BinariesDirectory)\$(BuildConfig)'

  - task: PythonScript@0
    displayName: 'Generate cmake config'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: '--config $(BuildConfig) --build_dir $(Build.BinariesDirectory) $(UseOmp) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" --build_wheel --enable_onnx_tests $(additionalBuildFlags)'
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: '$(Build.BinariesDirectory)\$(BuildConfig)\onnxruntime.sln'
      platform: $(msbuildPlatform)
      configuration: $(BuildConfig)
      msbuildArgs: $(MsbuildArguments)
      msbuildArchitecture: $(buildArch)
      maximumCpuCount: true
      logProjectEvents: false
      workingFolder: '$(Build.BinariesDirectory)\$(BuildConfig)'
      createLogFile: true

  - task: PythonScript@0
    displayName: 'Build wheel'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\setup.py'
      arguments: 'bdist_wheel'
      workingDirectory: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    inputs:
      command: restore
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: '$(BuildConfig)'
      arguments: '--configuration $(BuildConfig) -p:Platform="Any CPU" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'      

  - task: DotNetCoreCLI@2
    displayName: 'Build C#'    
    inputs:
      command: build
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: '$(BuildConfig)'          
      arguments: '--configuration $(BuildConfig) -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId) -p:DefineConstants=USE_$(ORT_EP_NAME)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - task: DotNetCoreCLI@2
    displayName: 'Test C#'
    condition: and(and(succeeded(), eq(variables['BuildConfig'], 'RelWithDebInfo')),eq('${{ parameters.RunOnnxRuntimeTests}}', true))
    inputs:
      command: test
      projects: '$(Build.SourcesDirectory)\csharp\test\Microsoft.ML.OnnxRuntime.Tests\Microsoft.ML.OnnxRuntime.Tests.csproj'
      configuration: '$(BuildConfig)'          
      arguments: '--configuration $(BuildConfig) -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId) -p:DefineConstants=USE_$(ORT_EP_NAME)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - powershell: |
     Get-ChildItem -Path dist/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname}
     python $(Build.SourcesDirectory)\tools\ci_build\build.py --config $(BuildConfig) --build_dir $(Build.BinariesDirectory) $(UseOmp) --skip_submodule_sync --build_shared_lib --test --cmake_generator "Visual Studio 16 2019" --build_wheel --enable_onnx_tests $(additionalBuildFlags)
    workingDirectory: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)'
    condition: and(succeeded(), eq('${{ parameters.RunOnnxRuntimeTests}}', true))
    displayName: 'Run tests'

  # if the validation from --gen_doc failed it sets a variable so we can publish the latest version of the docs
  # as an artifact, allowing a developer to download this and replace the current version instead of having to build
  # and generate the docs locally themselves. handle each of the two md files separately - simpler than copying
  # them to another location and publishing from there in a single task.
  - task: PublishBuildArtifacts@1
    condition: and(failed(), eq(variables['DocUpdateNeeded'], 'true'))
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/docs/OperatorKernels.md'
      artifactName: 'OperatorKernels.md'

  - task: PublishBuildArtifacts@1
    condition: and(failed(), eq(variables['DocUpdateNeeded'], 'true'))
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/docs/ContribOperators.md'
      artifactName: 'ContribOperators.md'


  - task: PublishSecurityAnalysisLogs@3
    displayName: 'Publish Security Analysis Logs'
    condition: and(succeeded(), eq(variables['BuildConfig'], 'RelWithDebInfo'))
    inputs:
      ArtifactName: CodeAnalysisLogs

  - task: PublishTestResults@2
    displayName: 'Publish unit test results'
    inputs:
      testResultsFiles: '**/*.results.xml'
      searchFolder: '$(Build.BinariesDirectory)'
      testRunTitle: 'Unit Test Run'
    condition: succeededOrFailed()

  - template: templates/component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'
   
