jobs:
- job: Linux_C_API_Packaging_CPU_x64
  workspace:
    clean: all
  timeoutInMinutes:  60
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: templates/set-version-number-variables-step.yml
    - task: CmdLine@2
      inputs:
        script: |
          docker build --pull -t onnxruntime-centos6 --build-arg BUILD_USER=onnxruntimedev --build-arg BUILD_UID=$(id -u) --build-arg PYTHON_VERSION=3.6 -f Dockerfile.centos6 .
        workingDirectory: $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker
    - task: CmdLine@2
      inputs:
        script: |
          docker run --rm --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build -e NIGHTLY_BUILD onnxruntime-centos6 /usr/bin/python3.6 /onnxruntime_src/tools/ci_build/build.py --build_dir /build --config Release --skip_submodule_sync  --parallel --build_shared_lib --use_openmp --cmake_path /usr/bin/cmake --ctest_path /usr/bin/ctest
        workingDirectory: $(Build.SourcesDirectory)
    - template: templates/c-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          buildConfig: 'Release'
          artifactName: 'onnxruntime-linux-x64-$(OnnxRuntimeVersion)'
          libraryName: 'libonnxruntime.so.$(OnnxRuntimeVersion)'
          commitId: $(OnnxRuntimeGitCommitHash)
    
- job: Linux_C_API_Packaging_GPU_x64
  workspace:
    clean: all
  timeoutInMinutes:  60
  pool: 'Linux-GPU-CUDA10'
  steps:
    - template: templates/set-version-number-variables-step.yml
    - task: CmdLine@2
      inputs:
        script: |
          docker build --pull -t onnxruntime-centos6-gpu --build-arg BUILD_USER=onnxruntimedev --build-arg BUILD_UID=$(id -u) --build-arg PYTHON_VERSION=$(python.version) -f Dockerfile.centos6_gpu .
        workingDirectory: $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker
    - task: CmdLine@2
      inputs:
        script: |
          docker run --gpus all -e NVIDIA_VISIBLE_DEVICES=all --rm --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build -e NIGHTLY_BUILD onnxruntime-centos6-gpu /usr/bin/python3.6 /onnxruntime_src/tools/ci_build/build.py --build_dir /build --config Release --skip_submodule_sync  --parallel --build_shared_lib --cmake_path /usr/bin/cmake --ctest_path /usr/bin/ctest --use_cuda --cuda_version=10.1 --cuda_home=/usr/local/cuda-10.1  --cudnn_home=/usr/local/cuda-10.1
        workingDirectory: $(Build.SourcesDirectory)      
    - template: templates/c-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          buildConfig: 'Release'
          artifactName: 'onnxruntime-linux-x64-gpu-$(OnnxRuntimeVersion)'
          libraryName: 'libonnxruntime.so.$(OnnxRuntimeVersion)'
          commitId: $(OnnxRuntimeGitCommitHash)
    - template: templates/clean-agent-build-directory-step.yml
 

- job: MacOS_C_API_Packaging_CPU_x64
  workspace:
    clean: all
  pool: 
    vmImage: 'macOS-10.14'
  steps:
    - template: templates/mac-set-variables-and-download.yml
    - template: templates/set-version-number-variables-step.yml

    - script: |
        sudo python3 -m pip install -r '$(Build.SourcesDirectory)/tools/ci_build/github/linux/docker/scripts/requirements.txt'
        sudo xcode-select --switch /Applications/Xcode_10.app/Contents/Developer
        python3 $(Build.SourcesDirectory)/tools/ci_build/build.py --use_openmp --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --parallel --build_shared_lib --config RelWithDebInfo --enable_onnx_tests
      displayName: 'Build and Test MacOS'
    - template: templates/c-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          buildConfig: 'RelWithDebInfo'
          artifactName: 'onnxruntime-osx-x64-$(OnnxRuntimeVersion)'
          libraryName: 'libonnxruntime.$(OnnxRuntimeVersion).dylib'
          commitId: $(OnnxRuntimeGitCommitHash)
          
    - template: templates/clean-agent-build-directory-step.yml

- job: Windows_Packaging_CPU
  workspace:
    clean: all
  pool: 'Win-CPU-2019'
  timeoutInMinutes:  120
  strategy:
    maxParallel: 2
    matrix: 
      x86:
        EnvSetupScript: setup_env_x86.bat
        buildArch: x86
        msbuildArch: x86
        msbuildPlatform: Win32
        buildparameter: --x86
      x64:
        EnvSetupScript: setup_env.bat
        buildArch: x64
        msbuildArch: amd64
        msbuildPlatform: x64
        buildparameter:

  steps:
    - task: UsePythonVersion@0
      inputs: 
        versionSpec: '3.7' 
        addToPath: true 
        architecture: $(buildArch)

    - task: BatchScript@1
      displayName: 'setup env'
      inputs:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
        modifyEnvironment: true
        workingFolder: '$(Build.BinariesDirectory)'

    - script: |
       python -m pip install -q pyopenssl setuptools wheel numpy     
      workingDirectory: '$(Build.BinariesDirectory)'
      displayName: 'Install python modules' 
    
    - template: templates/set-test-data-variables-step.yml
    - template: templates/set-version-number-variables-step.yml
    - task: PythonScript@0
      displayName: 'Download test data'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\github\download_test_data.py'
        arguments: --test_data_url $(TestDataUrl) --build_dir $(Build.BinariesDirectory)
        workingDirectory: $(Build.BinariesDirectory) 


    - task: PythonScript@0
      displayName: 'Generate cmake config'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--config RelWithDebInfo --enable_lto --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" --use_openmp --build_shared_lib --enable_onnx_tests $(buildparameter)'
        workingDirectory: '$(Build.BinariesDirectory)'

 
    - task: VSBuild@1
      displayName: 'Build'
      inputs:
        solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.sln'
        platform: $(msbuildPlatform)
        configuration: RelWithDebInfo
        msbuildArchitecture: $(buildArch)
        maximumCpuCount: true
        logProjectEvents: true
        workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
        createLogFile: true


    - task: PythonScript@0
      displayName: 'test'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--config RelWithDebInfo --enable_lto --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --test --cmake_generator "Visual Studio 16 2019" --use_openmp --build_shared_lib --enable_onnx_tests $(buildparameter)'
        workingDirectory: '$(Build.BinariesDirectory)'

    - template: templates/c-api-artifacts-package-and-publish-steps-windows.yml
      parameters:
        buildConfig: RelWithDebInfo
        artifactName: 'onnxruntime-win-$(buildArch)-$(OnnxRuntimeVersion)'
        commitId: $(OnnxRuntimeGitCommitHash)
    - template: templates/clean-agent-build-directory-step.yml


- job: Windows_Packaging_GPU
  workspace:
    clean: all
  pool: 'Win-GPU-2019'
  timeoutInMinutes:  120
  variables:
    EnvSetupScript: setup_env_cuda.bat
    buildArch: x64
    msbuildArch: amd64
    msbuildPlatform: x64
    CUDA_VERSION: '10.1'
    buildparameter: --use_cuda --cuda_version=$(CUDA_VERSION) --cuda_home="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$(CUDA_VERSION)" --cudnn_home="C:\local\cudnn-$(CUDA_VERSION)-windows10-x64-v7.6.5.32\cuda"
  steps:
    - task: UsePythonVersion@0
      inputs: 
        versionSpec: '3.7' 
        addToPath: true 
        architecture: $(buildArch)

    - task: BatchScript@1
      displayName: 'setup env'
      inputs:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
        modifyEnvironment: true
        workingFolder: '$(Build.BinariesDirectory)'

    - script: |
       python -m pip install -q pyopenssl setuptools wheel numpy     
      workingDirectory: '$(Build.BinariesDirectory)'
      displayName: 'Install python modules' 
    
    - template: templates/set-test-data-variables-step.yml
    - template: templates/set-version-number-variables-step.yml
    - task: PythonScript@0
      displayName: 'Download test data'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\github\download_test_data.py'
        arguments: --test_data_url $(TestDataUrl) --build_dir $(Build.BinariesDirectory)
        workingDirectory: $(Build.BinariesDirectory) 


    - task: PythonScript@0
      displayName: 'Generate cmake config'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--config RelWithDebInfo --enable_lto --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" --use_openmp --build_shared_lib --enable_onnx_tests $(buildparameter)'
        workingDirectory: '$(Build.BinariesDirectory)'

 
    - task: VSBuild@1
      displayName: 'Build'
      inputs:
        solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.sln'
        platform: $(msbuildPlatform)
        configuration: RelWithDebInfo
        msbuildArchitecture: $(buildArch)
        maximumCpuCount: true
        logProjectEvents: true
        workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
        createLogFile: true

    - task: PythonScript@0
      displayName: 'test'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--config RelWithDebInfo --enable_lto --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --test --cmake_generator "Visual Studio 16 2019" --use_openmp --build_shared_lib --enable_onnx_tests $(buildparameter)'
        workingDirectory: '$(Build.BinariesDirectory)'

    - template: templates/c-api-artifacts-package-and-publish-steps-windows.yml
      parameters:
        buildConfig: RelWithDebInfo
        artifactName: 'onnxruntime-win-$(buildArch)-gpu-$(OnnxRuntimeVersion)'
        commitId: $(OnnxRuntimeGitCommitHash)
    - template: templates/clean-agent-build-directory-step.yml
