parameters:
- name: IsReleaseBuild
  displayName: Is a release build? Set it to true if you are doing an ONNX Runtime release.
  type: boolean
  default: false

- name: PreReleaseVersionSuffixString
  displayName: Suffix added to pre-release package version. Only used if IsReleaseBuild is true. Denotes the type of pre-release package.
  type: string
  values:
  - alpha
  - beta
  - rc
  - none
  default: none

- name: PreReleaseVersionSuffixNumber
  displayName: Number added to pre-release package version. Only used if IsReleaseBuild is true. Denotes the sequence of a pre-release package.
  type: number
  default: 0

stages:
- stage: Setup
  jobs:
  - job: Set_Variables
    pool:
      name: 'onnxruntime-Ubuntu2204-AMD-CPU'
      os: 'linux'
    templateContext:
      sdl:
        tsa:
          enabled: false #No source checkout
      outputs:
      - output: pipelineArtifact
        targetPath: $(Build.ArtifactStagingDirectory)
        artifactName: 'parameters_artifact'
    steps:
    - checkout: none
    - bash: |
        # Do not output ##vso[] commands with `set -x` or they may be parsed again and include a trailing quote.
        set +x
        if [[ "${{ parameters.IsReleaseBuild }}" = True && "${{ parameters.PreReleaseVersionSuffixString }}" != "none"  ]]; then
          if [[ "${{ parameters.PreReleaseVersionSuffixNumber }}" -eq 0 ]]; then
            echo "##vso[task.setvariable variable=ReleaseVersionSuffix;isOutput=true]-${{ parameters.PreReleaseVersionSuffixString }}"
          else
            echo "##vso[task.setvariable variable=ReleaseVersionSuffix;isOutput=true]-${{ parameters.PreReleaseVersionSuffixString }}.${{ parameters.PreReleaseVersionSuffixNumber }}"
          fi
        else
          echo "##vso[task.setvariable variable=ReleaseVersionSuffix;isOutput=true]"
        fi
      name: Set_Release_Version_Suffix
    - script: |
        # Extracting hours and minutes
        date=$(date +'%Y%m%d')
        # Set the hhmm value as a pipeline variable
        echo "##vso[task.setvariable variable=BuildDate;isOutput=true]$date"
      displayName: 'Set Start Date as Variable'
      name: Set_Build_Date

    - script: |
        # Extracting hours and minutes
        hhmm=$(date +'%H%M')
        # Set the hhmm value as a pipeline variable
        echo "##vso[task.setvariable variable=BuildTime;isOutput=true]$hhmm"
      displayName: 'Set Start Time as Variable'
      name: Set_Build_Time

    - bash: |
        echo "Recording pipeline parameters to a file..."
        # Create the file with the first parameter
        echo "IsReleaseBuild=${{ parameters.IsReleaseBuild }}" > $(Build.ArtifactStagingDirectory)/parameters.txt

        # Append the rest of the parameters
        echo "PreReleaseVersionSuffixString=${{ parameters.PreReleaseVersionSuffixString }}" >> $(Build.ArtifactStagingDirectory)/parameters.txt
        echo "PreReleaseVersionSuffixNumber=${{ parameters.PreReleaseVersionSuffixNumber }}" >> $(Build.ArtifactStagingDirectory)/parameters.txt

        echo "Parameters file content:"
        cat $(Build.ArtifactStagingDirectory)/parameters.txt
      displayName: 'Record Parameters to File'
