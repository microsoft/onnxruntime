parameters:
- name: build_py_parameters
  displayName: >
    Extra parameters to pass to build.py. Don't put newlines in here.
  type: string
  default: ''

# TODO: Now the Windows jobs use a different cmake build type. Consider to merge it.
- name: cmake_build_type
  type: string
  displayName: 'Linux packages cmake build type. Linux Only.'
  default: 'Release'
  values:
   - Debug
   - Release
   - RelWithDebInfo
   - MinSizeRel

- name: cuda_version
  type: string
  displayName: 'CUDA version. Windows Only.'
  default: '12.2'
  values:
   - 12.2

- name: PythonVersions
  type: object
  displayName: 'Python versions to build'
  default:
    - '3.10'
    - '3.11'
    - '3.12'
    - '3.13'

stages:
    - ${{ each python_version in parameters.PythonVersions }}:
      - template: py-win-gpu-stage.yml
        parameters:
          PYTHON_VERSION: ${{ python_version }}
          EP_NAME: gpu
          CudaVersion: ${{ parameters.cuda_version }}
          EP_BUILD_FLAGS: --enable_lto --use_cuda --cuda_home=$(Agent.TempDirectory)\v${{ parameters.cuda_version }} --cmake_extra_defines "CMAKE_CUDA_ARCHITECTURES=52-real;61-real;75-real;86-real;89-real;90a-virtual"
          use_tensorrt: True

    - template: py-linux-gpu-stage.yml
      parameters:
          arch: 'x86_64'
          machine_pool: 'onnxruntime-Ubuntu2204-AMD-CPU-Large'
          extra_build_arg: ${{ parameters.build_py_parameters }}
          cmake_build_type: ${{ parameters.cmake_build_type }}
          cuda_version: ${{ parameters.cuda_version }}
          docker_base_image: onnxruntimebuildcache.azurecr.io/internal/azureml/onnxruntime/build/cuda12_x64_almalinux8_gcc12:20250714.2
