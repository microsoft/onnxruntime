parameters:
- name: MACHINE_POOL
  type: string
  default: 'onnxruntime-Win2022-GPU-A10'

- name: EP_NAME
  type: string

- name: PYTHON_VERSION
  type: string

- name: EP_BUILD_FLAGS
  type: string

- name: BUILD_PY_PARAMETERS
  displayName: >
    Extra parameters to pass to build.py. Don't put newlines in here.
  type: string
  default: ''
- name: CudaVersion
  type: string
  default: '11.8'
  values:
    - 11.8
    - 12.2

- name: cmake_build_type
  type: string
  displayName: 'Linux packages cmake build type. Linux Only.'
  default: 'Release'
  values:
   - Debug
   - Release
   - RelWithDebInfo
   - MinSizeRel

- name: use_tensorrt
  type: boolean
  default: false

stages:
  - stage: Win_py_${{ parameters.EP_NAME }}_Wheels_${{ replace(parameters.PYTHON_VERSION,'.','_') }}_Build
    dependsOn: []
    jobs:
    - job: Win_py_${{ parameters.EP_NAME }}_Wheels_${{ replace(parameters.PYTHON_VERSION,'.','_') }}_Build
      timeoutInMinutes: 360
      workspace:
        clean: all
      pool:
        name: onnxruntime-Win-CPU-2022
        os: windows
      templateContext:
        codeSignValidation:
          enabled: true
          break: true
        psscriptanalyzer:
          enabled: true
        sdl:
          binskim:
            enabled: true
            scanOutputDirectoryOnly: true
            targetPathPattern: '+:file|*.dll;-:file|DirectML.dll'
        outputs:
        - output: pipelineArtifact
          targetPath: $(Build.ArtifactStagingDirectory)
          artifactName: win_${{ parameters.EP_NAME }}_wheel_${{ parameters.PYTHON_VERSION }}
      variables:
      - template: ../templates/common-variables.yml
      - name: GRADLE_OPTS
        value: '-Dorg.gradle.daemon=false'
      - name: VSGenerator
        value: 'Visual Studio 17 2022'
      - name: CUDA_MODULE_LOADING
        value: 'LAZY'
      - name: win_trt_folder
        ${{ if eq(parameters.CudaVersion, '11.8') }}:
          value: ${{ variables.win_trt_folder_cuda11 }}
        ${{ if eq(parameters.CudaVersion, '12.2') }}:
          value: ${{ variables.win_trt_folder_cuda12 }}
      - name: trt_build_flag
        ${{ if eq(parameters.use_tensorrt, true) }}:
          value: '--use_tensorrt --tensorrt_home="$(Agent.TempDirectory)\${{ variables.win_trt_folder }}"'
        ${{ if eq(parameters.use_tensorrt, false) }}:
          value: ''
      steps:
          - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
            displayName: 'Clean Agent Directories'
            condition: always()

          - checkout: self
            clean: true
            submodules: recursive

          - template: ../templates/telemetry-steps.yml

          - task: UsePythonVersion@0
            inputs:
              versionSpec: ${{ parameters.PYTHON_VERSION }}
              addToPath: true
              architecture: 'x64'

          - task: PipAuthenticate@1
            displayName: 'Pip Authenticate'
            inputs:
              artifactFeeds: 'Lotus'


          - template: ../templates/download-deps.yml

          - template: ../templates/jobs/download_win_gpu_library.yml
            parameters:
              CudaVersion: ${{ parameters.CudaVersion }}
              ${{ if or(contains(parameters.EP_BUILD_FLAGS, 'use_cuda'), eq(parameters.use_tensorrt, true)) }}:
                DownloadCUDA: true
              DownloadTRT: ${{ parameters.use_tensorrt }}

          - task: PythonScript@0
            displayName: 'Update deps.txt'
            inputs:
              scriptPath: $(Build.SourcesDirectory)/tools/ci_build/replace_urls_in_deps.py
              arguments: --new_dir $(Build.BinariesDirectory)/deps
              workingDirectory: $(Build.BinariesDirectory)

          - template: ../templates/set-nightly-build-option-variable-step.yml

          - task: PythonScript@0
            displayName: 'Generate cmake config'
            inputs:
              scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
              arguments: >
                --config ${{ parameters.cmake_build_type }}
                --build_dir $(Build.BinariesDirectory)
                --skip_submodule_sync
                --cmake_generator "$(VSGenerator)"
                --enable_pybind
                --enable_onnx_tests
                --parallel 4 --use_binskim_compliant_compile_flags --update --build
                $(TelemetryOption) ${{ parameters.BUILD_PY_PARAMETERS }} ${{ parameters.EP_BUILD_FLAGS }} ${{ variables.trt_build_flag }}
              workingDirectory: '$(Build.BinariesDirectory)'

          # Esrp signing
          - template: ../templates/win-esrp-dll.yml
            parameters:
              FolderPath: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\onnxruntime\capi'
              DisplayName: 'ESRP - Sign Native dlls'
              DoEsrp: true
              Pattern: '*.pyd,*.dll'

          - task: PythonScript@0
            displayName: 'Build wheel'
            inputs:
              scriptPath: '$(Build.SourcesDirectory)\setup.py'
              arguments: 'bdist_wheel ${{ parameters.BUILD_PY_PARAMETERS }} $(NightlyBuildOption) --wheel_name_suffix=${{ parameters.EP_NAME }}'
              workingDirectory: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}'

          - task: CopyFiles@2
            displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
            inputs:
              SourceFolder: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\dist'
              Contents: '*.whl'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - script: |
              7z x *.whl
            workingDirectory: '$(Build.ArtifactStagingDirectory)'
            displayName: 'unzip the package'

          - template: ../templates/component-governance-component-detection-steps.yml
            parameters:
              condition: 'succeeded'

  - stage: Win_py_${{ parameters.EP_NAME }}_Wheels_${{ replace(parameters.PYTHON_VERSION,'.','_') }}_Tests
    dependsOn: Win_py_${{ parameters.EP_NAME }}_Wheels_${{ replace(parameters.PYTHON_VERSION,'.','_') }}_Build
    jobs:
    - job: Win_py_${{ parameters.EP_NAME }}_Wheels_${{ replace(parameters.PYTHON_VERSION,'.','_') }}_Tests
      workspace:
        clean: all
      pool:
        name: ${{parameters.MACHINE_POOL}}
      steps:
        - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
          displayName: 'Clean Agent Directories'
          condition: always()

        - checkout: self
          clean: true
          submodules: none

        - task: UsePythonVersion@0
          inputs:
            versionSpec: ${{ parameters.PYTHON_VERSION }}
            addToPath: true
            architecture: 'x64'

        - template: ../templates/flex-downloadPipelineArtifact.yml
          parameters:
            ArtifactName: win_${{ parameters.EP_NAME }}_wheel_${{ parameters.PYTHON_VERSION }}
            StepName: 'Download Pipeline Artifact - Windows GPU Build'
            TargetPath: '$(Build.ArtifactStagingDirectory)'

        - template: ../templates/jobs/download_win_gpu_library.yml
          parameters:
            CudaVersion: ${{ parameters.CudaVersion }}
            ${{ if or(contains(parameters.EP_BUILD_FLAGS, 'use_cuda'), eq(parameters.use_tensorrt, true)) }}:
              DownloadCUDA: true
            DownloadTRT: ${{ parameters.use_tensorrt }}

        - task: PowerShell@2
          displayName: 'Install Third Party Dependencies'
          inputs:
            filePath: '$(Build.SourcesDirectory)/tools/ci_build/github/windows/install_third_party_deps.ps1'
            workingDirectory: '$(Build.BinariesDirectory)'
            arguments: -cpu_arch x64 -install_prefix $(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\installed -build_config ${{ parameters.cmake_build_type }}

        - template: jobs/steps/py_packaging_test_step.yml
          parameters:
            EP_NAME: DML
            PYTHON_VERSION: ${{ parameters.PYTHON_VERSION }}

        - template: jobs/steps/py_packaging_test_step.yml
          parameters:
            EP_NAME: CUDA
            PYTHON_VERSION: ${{ parameters.PYTHON_VERSION }}


