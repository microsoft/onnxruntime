parameters:
- name: MACHINE_POOL
  type: string
  default: 'onnxruntime-Win2022-GPU-A10'

# Package name suffix
- name: PYTHON_VERSION
  type: string

- name: EP_BUILD_FLAGS
  type: string

- name: BUILD_PY_PARAMETERS
  displayName: >
    Extra parameters to pass to build.py. Don't put newlines in here.
  type: string
  default: ''

- name: cmake_build_type
  type: string
  displayName: 'Linux packages cmake build type. Linux Only.'
  default: 'Release'
  values:
   - Debug
   - Release
   - RelWithDebInfo
   - MinSizeRel

stages:
  - stage: Win_py_webgpu_Wheels_${{ replace(parameters.PYTHON_VERSION,'.','_') }}_Build
    dependsOn: []
    jobs:
    - job: Win_py_webgpu_Wheels_${{ replace(parameters.PYTHON_VERSION,'.','_') }}_Build
      timeoutInMinutes: 360
      workspace:
        clean: all
      pool:
        name: onnxruntime-Win-CPU-VS2022-Latest
        os: windows
      templateContext:
        sdl:
          codeSignValidation:
            enabled: true
            # TODO: check why pyd file was not signed
            break: false
            additionalTargetsGlobPattern: f|**\*.pyd
          psscriptanalyzer:
            enabled: true
          binskim:
            enabled: true
            scanOutputDirectoryOnly: true
        outputs:
        - output: pipelineArtifact
          targetPath: $(Build.ArtifactStagingDirectory)
          artifactName: win_webgpu_wheel_${{ parameters.PYTHON_VERSION }}
      variables:
      - template: ../templates/common-variables.yml
      - name: GRADLE_OPTS
        value: '-Dorg.gradle.daemon=false'
      - name: VSGenerator
        value: 'Visual Studio 17 2022'
      steps:
      - checkout: self
        clean: true
        submodules: none

      - template: ../templates/setup-build-tools.yml
        parameters:
          host_cpu_arch: 'x64'
          python_version: ${{ parameters.PYTHON_VERSION }}

      - template: ../templates/set-nightly-build-option-variable-step.yml

      - task: PythonScript@0
        displayName: 'Build'
        inputs:
          scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
          arguments: >
            --config ${{ parameters.cmake_build_type }}
            --build_dir $(Build.BinariesDirectory)
            --skip_submodule_sync
            --cmake_generator "$(VSGenerator)"
            --enable_pybind
            --enable_onnx_tests
            --parallel 8 --use_vcpkg --use_vcpkg_ms_internal_asset_cache --use_binskim_compliant_compile_flags --update --build
            $(TelemetryOption) ${{ parameters.BUILD_PY_PARAMETERS }} ${{ parameters.EP_BUILD_FLAGS }}
          workingDirectory: '$(Build.BinariesDirectory)'

      - ${{if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/rel-'))}}:
        - template: ../templates/publish-symbolrequestprod-api.yml
          parameters:
            ${{if eq(variables['Build.SourceBranch'], 'refs/heads/main')}}:
              symbolExpiryTime: 60
            includePublicSymbolServer: true
            symbolsArtifactName: onnxruntime_webgpu_win_x64_${{ parameters.PYTHON_VERSION }}
            symbolsVersion: $(Build.BuildId)
            symbolProject: 'ONNX Runtime'
            subscription: 'OnnxrunTimeCodeSign_20240611'
            searchPattern: |
              $(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\onnxruntime.pdb
              $(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\onnxruntime_providers_shared.pdb
              $(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\onnxruntime_pybind11_state.pdb


      # Esrp signing
      - template: ../templates/win-esrp-dll.yml
        parameters:
          FolderPath: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\onnxruntime\capi'
          DisplayName: 'ESRP - Sign Native dlls'
          DoEsrp: true
          Pattern: '*.pyd,*.dll'

      - task: PythonScript@0
        displayName: 'Build wheel'
        inputs:
          scriptPath: '$(Build.SourcesDirectory)\setup.py'
          arguments: 'bdist_wheel ${{ parameters.BUILD_PY_PARAMETERS }} $(NightlyBuildOption) --wheel_name_suffix=webgpu ${{ variables.build_wheel_flag }}'
          workingDirectory: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}'

      - task: CopyFiles@2
        displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.BinariesDirectory)\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\dist'
          Contents: '*.whl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - script: |
          7z x *.whl
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
        displayName: 'unzip the package'

  - stage: Win_py_webgpu_Wheels_${{ replace(parameters.PYTHON_VERSION,'.','_') }}_Tests
    dependsOn: Win_py_webgpu_Wheels_${{ replace(parameters.PYTHON_VERSION,'.','_') }}_Build
    jobs:
    - job: Win_py_webgpu_Wheels_${{ replace(parameters.PYTHON_VERSION,'.','_') }}_Tests
      workspace:
        clean: all
      pool:
        name: ${{parameters.MACHINE_POOL}}
        os: windows
      templateContext:
        inputs:
        - input: pipelineArtifact
          artifactName: win_webgpu_wheel_${{ parameters.PYTHON_VERSION }}
          targetPath: '$(Build.ArtifactStagingDirectory)'
      steps:
        - checkout: self
          clean: true
          submodules: none

        - task: UsePythonVersion@0
          inputs:
            versionSpec: ${{ parameters.PYTHON_VERSION }}
            addToPath: true
            architecture: 'x64'

        - task: PipAuthenticate@1
          displayName: 'Pip Authenticate'
          inputs:
            artifactFeeds: 'Lotus'

        - script: python -m pip install -r $(Build.SourcesDirectory)\tools\ci_build\github\windows\python\requirements.txt
          env:
            TMPDIR: "$(Agent.TempDirectory)"

        - powershell: |
            $ErrorActionPreference = "Stop"
            python -m pip uninstall -y onnxruntime onnxruntime-webgpu -qq
            dir $(Build.ArtifactStagingDirectory)
            python -m pip --disable-pip-version-check install --no-index --find-links $(Build.ArtifactStagingDirectory) onnxruntime-webgpu
            mkdir -p $(Agent.TempDirectory)\ort_test_data
            Copy-Item -Path $(Build.sourcesDirectory)/onnxruntime/test/python/onnx_backend_test_series.py -Destination $(Agent.TempDirectory)\ort_test_data
            Copy-Item -Recurse -Path $(Build.sourcesDirectory)/onnxruntime/test/testdata -Destination $(Agent.TempDirectory)\ort_test_data
            cd $(Agent.TempDirectory)\ort_test_data
            python onnx_backend_test_series.py; $?
          workingDirectory: '$(Build.sourcesDirectory)'
          displayName: 'Run Python Tests'
