parameters:
- name: build_py_parameters
  displayName: >
    Extra parameters to pass to build.py. Don't put newlines in here.
  type: string
  default: ''

- name: enable_linux_cpu
  displayName: 'Whether Linux CPU package is built.'
  type: boolean
  default: true

- name: enable_windows_cpu
  displayName: 'Whether Windows CPU package is built.'
  type: boolean
  default: true

- name: enable_mac_cpu
  displayName: 'Whether Mac CPU package is built.'
  type: boolean
  default: true

- name: enable_linux_arm
  displayName: 'Whether Linux ARM package is built.'
  type: boolean
  default: true

- name: enable_windows_arm64_qnn
  displayName: 'Whether Windows ARM64 package with QNN EP is built.'
  type: boolean
  default: true

- name: enable_windows_arm64ec_qnn
  displayName: 'Whether Windows ARM64EC package with QNN EP is built.'
  type: boolean
  default: true

- name: enable_windows_x64_qnn
  displayName: 'Whether Windows x86_64 package with QNN EP is built.'
  type: boolean
  default: true

- name: enable_linux_x64_qnn
  displayName: 'Whether Linux x86_64 package with QNN EP is built.'
  type: boolean
  default: true

- name: cmake_build_type
  type: string
  displayName: 'Linux packages cmake build type. Linux Only.'
  default: 'Release'
  values:
   - Debug
   - Release
   - RelWithDebInfo
   - MinSizeRel

# Only applies to QNN packages.
- name: qnn_sdk_version
  type: string
  displayName: 'QNN SDK version. Only for QNN packages.'
  default: 2.38.0.250901

stages:
- ${{ if eq(parameters.enable_windows_cpu, true) }}:
  - stage: Python_Packaging_Windows_CPU
    dependsOn: []
    jobs:
    - job: Windows_py_Wheels
      pool:
        name: 'onnxruntime-Win-CPU-VS2022-Latest'
        os: windows
      templateContext:
        sdl:
          codeSignValidation:
            enabled: true
            # TODO: check why pyd file was not signed
            break: false
            additionalTargetsGlobPattern: f|**\*.pyd
          psscriptanalyzer:
            enabled: true
          binskim:
            enabled: true
            scanOutputDirectoryOnly: true
        outputs:
        - output: pipelineArtifact
          targetPath: $(Build.ArtifactStagingDirectory)
          artifactName: onnxruntime-win-$(PythonVersion)
      strategy:
        matrix:
          Python310_x64:
            PythonVersion: '3.10'
          Python311_x64:
            PythonVersion: '3.11'
          Python312_x64:
            PythonVersion: '3.12'
          Python313_x64:
            PythonVersion: '3.13'
      variables:
        OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
        ExtraParam: ${{ parameters.build_py_parameters }}
      timeoutInMinutes: 180
      workspace:
        clean: all

      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - template: ../templates/setup-build-tools.yml
        parameters:
          host_cpu_arch: 'x64'
          python_version: $(PythonVersion)

      - template: ../templates/set-nightly-build-option-variable-step.yml

      - script: python -m pip install -r $(Build.SourcesDirectory)\tools\ci_build\github\windows\python\requirements.txt
        env:
          TMPDIR: "$(Agent.TempDirectory)"

      - task: PythonScript@0
        displayName: 'Build'
        inputs:
          scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
          arguments: >
            --config ${{ parameters.cmake_build_type }}
            --enable_lto
            --build_dir $(Build.SourcesDirectory)\build
            --skip_submodule_sync
            --cmake_generator "Visual Studio 17 2022"
            --enable_pybind
            --enable_onnx_tests --use_vcpkg --use_vcpkg_ms_internal_asset_cache
            ${{ parameters.build_py_parameters }}
            --parallel --use_binskim_compliant_compile_flags --update --build
            $(TelemetryOption)

      - ${{if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/rel-'))}}:
        - template: ../templates/publish-symbolrequestprod-api.yml
          parameters:
            ${{if eq(variables['Build.SourceBranch'], 'refs/heads/main')}}:
              symbolExpiryTime: 60
            includePublicSymbolServer: true            
            symbolsArtifactName: onnxruntime_cpu_win_x64_$(PythonVersion)
            symbolsVersion: $(Build.BuildId)
            symbolProject: 'ONNX Runtime'
            subscription: 'OnnxrunTimeCodeSign_20240611'
            searchPattern: |
              $(Build.SourcesDirectory)\build\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\onnxruntime.pdb
              $(Build.SourcesDirectory)\build\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\onnxruntime_providers_shared.pdb
              $(Build.SourcesDirectory)\build\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\onnxruntime_pybind11_state.pdb

      # Esrp signing
      - template: ../templates/win-esrp-dll.yml
        parameters:
          FolderPath: '$(Build.SourcesDirectory)\build\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\onnxruntime\capi'
          DisplayName: 'ESRP - Sign Native dlls'
          DoEsrp: true
          Pattern: '*.pyd,*.dll'

      - task: PythonScript@0
        displayName: 'Build wheel'
        inputs:
          scriptPath: '$(Build.SourcesDirectory)\setup.py'
          arguments: 'bdist_wheel ${{ parameters.build_py_parameters }} $(NightlyBuildOption)'
          workingDirectory: '$(Build.SourcesDirectory)\build\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}'

      - task: CopyFiles@2
        displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)\build\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}\dist'
          Contents: '*.whl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - script: |
          7z x *.whl
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
        displayName: 'unzip the package'

      - powershell: |
         python -m pip uninstall -y onnxruntime onnxruntime-gpu -qq
         Get-ChildItem -Path $(Build.ArtifactStagingDirectory)/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname tabulate}
         Remove-Item -Recurse -Force onnxruntime
         if ("$(ExtraParam)" -contains "--use_azure") {
           $env:path="$(Build.SourcesDirectory)\build\${{ parameters.cmake_build_type }}\_deps\vcpkg-src\installed\x64-windows\bin;$(Build.SourcesDirectory)\build\${{ parameters.cmake_build_type }}\_deps\vcpkg-src\installed\x86-windows\bin;$env:path"
           python onnxruntime_test_python_azure.py
         }
         python onnx_backend_test_series.py
        workingDirectory: '$(Build.SourcesDirectory)\build\${{ parameters.cmake_build_type }}\${{ parameters.cmake_build_type }}'
        displayName: 'Run Python Tests'

- ${{ if eq(parameters.enable_mac_cpu, true) }}:
  - stage: Python_Packaging_MacOS
    dependsOn: []
    jobs:
      - template: ../templates/py-macos.yml
        parameters:
          arch: 'arm64'
          extra_build_arg: ${{ parameters.build_py_parameters }}
          cmake_build_type: ${{ parameters.cmake_build_type }}
          python_version: '3.10'
          
      - template: ../templates/py-macos.yml
        parameters:
          arch: 'arm64'
          extra_build_arg: ${{ parameters.build_py_parameters }}
          cmake_build_type: ${{ parameters.cmake_build_type }}
          python_version: '3.11'

      - template: ../templates/py-macos.yml
        parameters:
          arch: 'arm64'
          extra_build_arg: ${{ parameters.build_py_parameters }}
          cmake_build_type: ${{ parameters.cmake_build_type }}
          python_version: '3.12'
          
      - template: ../templates/py-macos.yml
        parameters:
          arch: 'arm64'
          extra_build_arg: ${{ parameters.build_py_parameters }}
          cmake_build_type: ${{ parameters.cmake_build_type }}
          python_version: '3.13'

      - template: ../templates/py-macos.yml
        parameters:
          arch: 'x86_64'
          extra_build_arg: ${{ parameters.build_py_parameters }}
          cmake_build_type: ${{ parameters.cmake_build_type }}
          python_version: '3.10'
          
      - template: ../templates/py-macos.yml
        parameters:
          arch: 'x86_64'
          extra_build_arg: ${{ parameters.build_py_parameters }}
          cmake_build_type: ${{ parameters.cmake_build_type }}
          python_version: '3.11'

      - template: ../templates/py-macos.yml
        parameters:
          arch: 'x86_64'
          extra_build_arg: ${{ parameters.build_py_parameters }}
          cmake_build_type: ${{ parameters.cmake_build_type }}
          python_version: '3.12'
          
      - template: ../templates/py-macos.yml
        parameters:
          arch: 'x86_64'
          extra_build_arg: ${{ parameters.build_py_parameters }}
          cmake_build_type: ${{ parameters.cmake_build_type }}
          python_version: '3.13'

- ${{ if eq(parameters.enable_linux_arm, true) }}:
  - stage: Python_Packaging_Linux_ARM
    dependsOn: []
    jobs:
      - template: ../templates/py-linux.yml
        parameters:
          arch: 'aarch64'
          machine_pool: 'onnxruntime-linux-ARM64-CPU-2019'
          extra_build_arg: ${{ parameters.build_py_parameters }}
          cmake_build_type: ${{ parameters.cmake_build_type }}
          is1ES: true

- ${{ if eq(parameters.enable_linux_cpu, true) }}:
  - stage: Python_Packaging_Linux_CPU
    dependsOn: []
    jobs:
    - template: ../templates/py-linux.yml
      parameters:
        arch: 'x86_64'
        machine_pool: 'onnxruntime-Ubuntu2404-AMD-CPU'
        extra_build_arg: ${{ parameters.build_py_parameters }}
        cmake_build_type: ${{ parameters.cmake_build_type }}
        is1ES: true

- ${{ if eq(parameters.enable_windows_arm64_qnn, true) }}:
  - stage: Python_Packaging_Windows_ARM64_QNN
    dependsOn: []
    jobs:
    - template: ../templates/py-win-arm64-qnn.yml
      parameters:
        MACHINE_POOL: 'onnxruntime-qnn-windows-vs-2022-arm64'
        QNN_SDK: ${{ parameters.qnn_sdk_version }}
        BUILD_PY_PARAMETERS: ${{ parameters.build_py_parameters }}
        PYTHON_VERSION: '3.11'

    - template: ../templates/py-win-arm64-qnn.yml
      parameters:
        MACHINE_POOL: 'onnxruntime-qnn-windows-vs-2022-arm64'
        QNN_SDK: ${{ parameters.qnn_sdk_version }}
        BUILD_PY_PARAMETERS: ${{ parameters.build_py_parameters }}
        PYTHON_VERSION: '3.12'

    - template: ../templates/py-win-arm64-qnn.yml
      parameters:
        MACHINE_POOL: 'onnxruntime-qnn-windows-vs-2022-arm64'
        QNN_SDK: ${{ parameters.qnn_sdk_version }}
        BUILD_PY_PARAMETERS: ${{ parameters.build_py_parameters }}
        PYTHON_VERSION: '3.13'

- ${{ if eq(parameters.enable_windows_arm64ec_qnn, true) }}:
  - stage: Python_Packaging_Windows_arm64ec_QNN
    dependsOn: []
    jobs:
      - template: ../templates/py-win-arm64ec-qnn.yml
        parameters:
          MACHINE_POOL: 'Onnxruntime-QNNEP-Windows-2022-CPU'
          QNN_SDK: ${{ parameters.qnn_sdk_version }}
          BUILD_PY_PARAMETERS: ${{ parameters.build_py_parameters }}

- ${{ if eq(parameters.enable_windows_x64_qnn, true) }}:
  - stage: Python_Packaging_Windows_x64_QNN
    dependsOn: []
    jobs:
      - template: ../templates/py-win-x64-qnn.yml
        parameters:
          MACHINE_POOL: 'Onnxruntime-QNNEP-Windows-2022-CPU'
          QNN_SDK: ${{ parameters.qnn_sdk_version }}
          BUILD_PY_PARAMETERS: ${{ parameters.build_py_parameters }}
          is1ES: true

- ${{ if eq(parameters.enable_linux_x64_qnn, true) }}:
  - stage: Python_Packaging_Linux_x64_QNN
    dependsOn: []
    jobs:
    - template: ../templates/py-linux-qnn.yml
      parameters:
        machine_pool: 'onnxruntime-Ubuntu2404-AMD-CPU'
        extra_build_arg: ${{ parameters.build_py_parameters }}
        cmake_build_type: ${{ parameters.cmake_build_type }}
        is1ES: true
