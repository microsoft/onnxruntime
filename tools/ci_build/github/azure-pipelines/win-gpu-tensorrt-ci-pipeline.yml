jobs:
- job: 'build'
  pool: 'onnxruntime-tensorrt8-winbuild-T4'
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    MsbuildArguments: '-detailedsummary -maxcpucount -consoleloggerparameters:PerformanceSummary'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    EnvSetupScript: setup_env_trt.bat
    buildArch: x64
    setVcvars: true
    BuildConfig: 'RelWithDebInfo'
    ALLOW_RELEASED_ONNX_OPSET_ONLY: '1'
    skipComponentGovernanceDetection: true
  timeoutInMinutes: 150
  workspace:
    clean: all
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      addToPath: true
      architecture: $(buildArch)

  - task: BatchScript@1
    displayName: 'setup env'
    inputs:
      filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - script: |
     python -m pip install -q setuptools wheel numpy
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Install python modules'

  - template: templates/download-deps.yml

  - task: PythonScript@0
    displayName: 'Update deps.txt'
    inputs:
      scriptPath: $(Build.SourcesDirectory)/tools/ci_build/replace_urls_in_deps.py
      arguments: --new_dir $(Build.BinariesDirectory)/deps
      workingDirectory: $(Build.BinariesDirectory)

  - task: PowerShell@2
    displayName: 'Install ONNX'
    inputs:
      filePath: '$(Build.SourcesDirectory)/tools/ci_build/github/windows/install_third_party_deps.ps1'
      workingDirectory: '$(Build.BinariesDirectory)'
      arguments: -cpu_arch x64 -install_prefix $(Build.BinariesDirectory)\$(BuildConfig)\installed -build_config $(BuildConfig)

  - task: PythonScript@0
    displayName: 'Generate cmake config'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: '--config $(BuildConfig) --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" --build_wheel --enable_onnx_tests --use_tensorrt --tensorrt_home="C:\local\TensorRT-8.6.1.6.Windows10.x86_64.cuda-11.8" --cuda_version=11.8 --cuda_home="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8" --cmake_extra_defines CMAKE_CUDA_ARCHITECTURES=75'
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: '$(Build.BinariesDirectory)\$(BuildConfig)\onnxruntime.sln'
      platform: 'x64'
      configuration: $(BuildConfig)
      msbuildArgs: $(MsbuildArguments)
      msbuildArchitecture: $(buildArch)
      maximumCpuCount: true
      logProjectEvents: false
      workingFolder: '$(Build.BinariesDirectory)\$(BuildConfig)'
      createLogFile: true

  - task: PythonScript@0
    displayName: 'Build wheel'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\setup.py'
      arguments: 'bdist_wheel'
      workingDirectory: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)'

  - script: |
     mklink  /D /J $(Build.BinariesDirectory)\$(BuildConfig)\models $(Build.BinariesDirectory)\models
     DIR dist\ /S /B > wheel_filename_file
     set /p WHEEL_FILENAME=<wheel_filename_file
     del wheel_filename_file
     python.exe -m pip install -q --upgrade %WHEEL_FILENAME%
     set PATH=$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig);%PATH%
     python $(Build.SourcesDirectory)\tools\ci_build\build.py --config $(BuildConfig) --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --test --cmake_generator "Visual Studio 16 2019" --build_wheel --enable_onnx_tests --use_tensorrt --tensorrt_home="C:\local\TensorRT-8.6.1.6.Windows10.x86_64.cuda-11.8" --cuda_version=11.8 --cuda_home="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8" --cmake_extra_defines CMAKE_CUDA_ARCHITECTURES=75

    workingDirectory: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)'
    displayName: 'Run tests'

