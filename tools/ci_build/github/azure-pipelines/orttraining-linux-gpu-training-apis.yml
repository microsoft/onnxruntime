##### start trigger Don't edit it manually, Please do edit set-trigger-rules.py ####
trigger:
  branches:
    include:
    - main
    - rel-*
  paths:
    exclude:
    - docs/**
    - README.md
    - CONTRIBUTING.md
    - BUILD.md
    - 'js/web'
    - 'onnxruntime/core/providers/js'
pr:
  branches:
    include:
    - main
    - rel-*
  paths:
    exclude:
    - docs/**
    - README.md
    - CONTRIBUTING.md
    - BUILD.md
    - 'js/web'
    - 'onnxruntime/core/providers/js'
#### end trigger ####

jobs:
- job: Onnxruntime_Linux_GPU_TrainingAPIs

  timeoutInMinutes: 120
  pool: 'Onnxruntime-Linux-GPU-NC6sv3'

  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - template: templates/run-docker-build-steps.yml
    parameters:
      RunDockerBuildArgs: |
        -o ubuntu20.04 -d gpu -e \
        -t onnxruntime_training_apis_tests_image \
        -x " \
          --config RelWithDebInfo \
          --enable_training \
          --enable_training_apis \
          --use_cuda --cuda_version=11.8 --cuda_home=/usr/local/cuda-11.8 --cudnn_home=/usr/local/cuda-11.8 \
          --build_wheel \
          --build_java \
          --skip_tests \
          " \
        -u
      DisplayName: 'Build onnxruntime'

  # Entry point for all ort training api tests
  - script: |
      docker run \
        --gpus all \
        --shm-size=1024m \
        --rm \
        --volume $(Build.SourcesDirectory):/onnxruntime_src \
        --volume $(Build.BinariesDirectory):/build \
        onnxruntime_training_apis_tests_image \
          /build/RelWithDebInfo/launch_test.py \
            --cwd /build/RelWithDebInfo --cmd_line_with_args "python orttraining_test_ort_apis.py --cwd /build/RelWithDebInfo" \
    displayName: 'Run ORT Training APIs Tests'
    condition: succeededOrFailed()
    timeoutInMinutes: 120
  - template: templates/component-governance-component-detection-steps.yml
    parameters:
      condition: 'succeeded'

  - template: templates/clean-agent-build-directory-step.yml
