jobs:
- job: CodeCoverage
  workspace:
    clean: all
  timeoutInMinutes:  150
  variables:
    skipComponentGovernanceDetection: true
  pool: 'Linux-CPU'
  steps:
    - template: templates/set-version-number-variables-step.yml

    - task: CmdLine@2
      inputs:
        script: |
          set -e
          ln -s /data/models .
          #Build onnxruntime and run the instrumented program(unitests)
          LLVM_PROFILE_FILE="%p.profraw" CFLAGS="-g -fprofile-instr-generate -fcoverage-mapping" CXXFLAGS="-g -fprofile-instr-generate -fcoverage-mapping" CC=clang CXX=clang++  python3 $(Build.SourcesDirectory)/tools/ci_build/build.py --build_dir=$(Build.BinariesDirectory) --config Debug --parallel --skip_submodule_sync --build_shared_lib --enable_onnx_tests --cmake_extra_defines RUN_MODELTEST_IN_DEBUG_MODE=ON

          cd Debug
          ./onnxruntime_mlas_test
          #Merge the mulitple prof data into a single indexed profile data file
          llvm-profdata merge -sparse -o ort.profdata *.profraw
          #Create coverage report, output the result to 'report.json'
          llvm-cov export -summary-only -instr-profile=ort.profdata onnxruntime_test_all -object onnxruntime_mlas_test -object onnxruntime_api_tests_without_env -object onnx_test_runner -object onnxruntime_shared_lib_test -object onnxruntime_global_thread_pools_test -object onnxruntime_api_tests_without_env $(Build.SourcesDirectory)/include/onnxruntime $(Build.SourcesDirectory)/onnxruntime/core $(Build.SourcesDirectory)/onnxruntime/contrib_ops > $(Build.BinariesDirectory)/report.json

          llvm-cov show -instr-profile=ort.profdata onnxruntime_test_all -object onnxruntime_mlas_test -object onnxruntime_api_tests_without_env -object onnx_test_runner -object onnxruntime_shared_lib_test -object onnxruntime_global_thread_pools_test -object onnxruntime_api_tests_without_env $(Build.SourcesDirectory)/include/onnxruntime $(Build.SourcesDirectory)/onnxruntime/core $(Build.SourcesDirectory)/onnxruntime/contrib_ops --format=html -output-dir=$(Build.ArtifactStagingDirectory)
        workingDirectory: $(Build.BinariesDirectory)

    - task: AzureCLI@2
      displayName: 'Azure CLI'
      inputs:
        azureSubscription: AIInfraBuildOnnxRuntimeOSS
        scriptType: bash
        scriptPath: $(Build.SourcesDirectory)/tools/ci_build/github/linux/upload_code_coverage_data.sh
        arguments: '"$(Build.BinariesDirectory)/report.json" "https://aiinfra.visualstudio.com/Lotus/_build/results?buildId=$(Build.BuildId)" x64 linux default'
        workingDirectory: '$(Build.BinariesDirectory)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: html

- job: Upload
  workspace:
    clean: all
  pool: 'Win-CPU-2021'
  variables:
  - name: runCodesignValidationInjection
    value: false
  - name: skipComponentGovernanceDetection
    value: true
  dependsOn:
  - CodeCoverage
  condition: and (succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  steps:
  - checkout: self
    submodules: false

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifact'
    inputs:
      buildType: 'current'
      artifactName: 'html'
      targetPath: '$(Build.BinariesDirectory)'
      
  - task: AzureFileCopy@4
    displayName: 'AzureBlob File Copy'
    inputs:
      SourcePath: '$(Build.BinariesDirectory)\*'
      azureSubscription: AIInfraBuildOnnxRuntimeOSS
      Destination: AzureBlob
      storage: onnxruntime
      ContainerName: '$web'
