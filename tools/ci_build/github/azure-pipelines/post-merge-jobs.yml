stages:
- stage: normal
  dependsOn: [ ]
  jobs:
  - template: templates/c-api-linux-cpu.yml
    parameters:
      AdditionalBuildFlags: --use_extensions
      BaseImage: 'centos:7'
      OnnxruntimeArch: 'x64'
      OnnxruntimeCFlags: '-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -fcf-protection -O3 -Wl,--strip-all'
      OnnxruntimeCXXFlags: '-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -fcf-protection -O3 -Wl,--strip-all'
      OnnxruntimeNodejsBindingArch: 'x64'
      PoolName: 'Linux-CPU'

  - template: templates/c-api-linux-cpu.yml
    parameters:
      AdditionalBuildFlags: --use_extensions
      BaseImage: 'arm64v8/centos:7'
      OnnxruntimeArch: 'aarch64'
      OnnxruntimeCFlags: '-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -O3 -Wl,--strip-all'
      OnnxruntimeCXXFlags: '-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -O3 -Wl,--strip-all'
      OnnxruntimeNodejsBindingArch: 'arm64'
      PoolName: 'aiinfra-linux-ARM64-CPU-2019'

  - template: templates/win-ci.yml
    parameters:
      DoCompliance: true
      DoEsrp: false
      job_name_suffix: CPU_x86_default
      EnvSetupScript: setup_env_x86.bat
      buildArch: x86
      msbuildPlatform: Win32
      packageName: x86
      buildparameter: --use_extensions --enable_onnx_tests
      runTests: true
      buildJava: false
      buildNodejs: false

  - template: templates/win-ci.yml
    parameters:
      DoCompliance: true
      DoEsrp: false
      job_name_suffix: CPU_arm_default
      EnvSetupScript: setup_env.bat
      buildArch: x64
      msbuildPlatform: arm
      packageName: arm
      buildparameter: --arm --use_extensions  --enable_onnx_tests --path_to_protoc_exe $(Build.BinariesDirectory)\RelWithDebInfo\installed\bin\protoc.exe
      runTests: false
      buildJava: false
      buildNodejs: false

  - template: templates/win-ci.yml
    parameters:
      DoCompliance: true
      DoEsrp: false
      job_name_suffix: CPU_arm64_default
      EnvSetupScript: setup_env.bat
      buildArch: x64
      msbuildPlatform: arm64
      packageName: arm64
      buildparameter: --build_nodejs --arm64 --use_extensions  --enable_onnx_tests --path_to_protoc_exe $(Build.BinariesDirectory)\RelWithDebInfo\installed\bin\protoc.exe
      runTests: false
      buildJava: false
      buildNodejs: true

  - template: templates/win-ci.yml
    parameters:
      DoCompliance: true
      DoEsrp: false
      job_name_suffix: CPU_x64_default
      EnvSetupScript: setup_env.bat
      buildArch: x64
      msbuildPlatform: x64
      packageName: x64
      buildparameter: --build_java --build_nodejs --use_extensions  --enable_onnx_tests
      runTests: true
      buildJava: true
      buildNodejs: true

  - template: templates/win-ci-vs-2019.yml
    parameters:
      BuildConfig: 'Debug'
      EnvSetupScript: setup_env.bat
      buildArch: x64
      additionalBuildFlags: --disable_memleak_checker --use_mimalloc
      msbuildPlatform: x64
      isX86: false
      job_name_suffix: x64_mimalloc
      RunOnnxRuntimeTests: true
      RunStaticCodeAnalysis: false
      isTraining: false
      ORT_EP_NAME: CPU
      GenerateDocumentation: false
      EnablePython: false
      MachinePool: 'Win-CPU-2021'
- stage: Mimalloc
  dependsOn: [ ]
  jobs:
  - template: templates/win-ci-vs-2019.yml
    parameters:
      BuildConfig: 'Debug'
      EnvSetupScript: setup_env.bat
      buildArch: x64
      additionalBuildFlags: --disable_memleak_checker --use_mimalloc
      msbuildPlatform: x64
      isX86: false
      job_name_suffix: x64_mimalloc
      RunOnnxRuntimeTests: true
      RunStaticCodeAnalysis: false
      isTraining: false
      ORT_EP_NAME: CPU
      GenerateDocumentation: false
      EnablePython: false
      MachinePool: 'Win-CPU-2021'
- stage: NoAbseil
  dependsOn: [ ]
  jobs:
  - template: templates/win-ci-vs-2019.yml
    parameters:
      BuildConfig: 'Debug'
      EnvSetupScript: setup_env.bat
      buildArch: x64
      additionalBuildFlags: --cmake_extra_defines onnxruntime_DISABLE_ABSEIL=ON
      msbuildPlatform: x64
      isX86: false
      job_name_suffix: x64_no_absl
      RunOnnxRuntimeTests: true
      RunStaticCodeAnalysis: false
      isTraining: false
      ORT_EP_NAME: CPU
      GenerateDocumentation: false
      EnablePython: false
      MachinePool: 'Win-CPU-2021'

- stage: MinimalBuildWithNoExceptions
  dependsOn: [ ]
  jobs:
  - template: templates/win-ci-vs-2019.yml
    parameters:
      BuildConfig: 'Debug'
      EnvSetupScript: setup_env.bat
      buildArch: x64
      additionalBuildFlags: --build_shared_lib --minimal_build --disable_exceptions
      msbuildPlatform: x64
      isX86: false
      job_name_suffix: x64_minimal_no_exception
      RunOnnxRuntimeTests: true
      RunStaticCodeAnalysis: false
      isTraining: false
      ORT_EP_NAME: CPU
      GenerateDocumentation: false
      EnablePython: false
      MachinePool: 'Win-CPU-2021'

- stage: DebugNodeInputsOutputs
  dependsOn: [ ]
  jobs:
  - template: templates/win-ci-vs-2019.yml
    parameters:
      BuildConfig: 'Debug'
      EnvSetupScript: setup_env.bat
      buildArch: x64
      additionalBuildFlags: --build_shared_lib --cmake_extra_defines onnxruntime_DEBUG_NODE_INPUTS_OUTPUTS=ON
      msbuildPlatform: x64
      isX86: false
      job_name_suffix: x64_debug_node_input_output
      RunOnnxRuntimeTests: true
      RunStaticCodeAnalysis: false
      isTraining: false
      ORT_EP_NAME: CPU
      GenerateDocumentation: false
      EnablePython: false
      MachinePool: 'Win-CPU-2021'

- stage: CodeCoverage
  dependsOn: [ ]
  jobs:
  - job: CodeCoverage
    workspace:
      clean: all
    timeoutInMinutes: 150
    variables:
      skipComponentGovernanceDetection: true
    pool: 'Linux-CPU'
    steps:
    - template: templates/set-version-number-variables-step.yml

    - task: CmdLine@2
      inputs:
        script: |
          set -e
          ln -s /data/models .
          #Build onnxruntime and run the instrumented program(unitests)
          LLVM_PROFILE_FILE="%p.profraw" CFLAGS="-g -fprofile-instr-generate -fcoverage-mapping" CXXFLAGS="-g -fprofile-instr-generate -fcoverage-mapping" CC=clang CXX=clang++  python3 $(Build.SourcesDirectory)/tools/ci_build/build.py --build_dir=$(Build.BinariesDirectory) --config Debug --parallel --skip_submodule_sync --build_shared_lib --enable_onnx_tests --cmake_extra_defines RUN_MODELTEST_IN_DEBUG_MODE=ON
          
          cd Debug
          ./onnxruntime_mlas_test
          #Merge the multiple prof data into a single indexed profile data file
          llvm-profdata merge -sparse -o ort.profdata *.profraw
          #Create coverage report, output the result to 'report.json'
          llvm-cov export -summary-only -instr-profile=ort.profdata onnxruntime_test_all -object onnxruntime_mlas_test -object onnxruntime_api_tests_without_env -object onnx_test_runner -object onnxruntime_shared_lib_test -object onnxruntime_global_thread_pools_test -object onnxruntime_api_tests_without_env $(Build.SourcesDirectory)/include/onnxruntime $(Build.SourcesDirectory)/onnxruntime/core $(Build.SourcesDirectory)/onnxruntime/contrib_ops > $(Build.BinariesDirectory)/report.json
          
          llvm-cov show -instr-profile=ort.profdata onnxruntime_test_all -object onnxruntime_mlas_test -object onnxruntime_api_tests_without_env -object onnx_test_runner -object onnxruntime_shared_lib_test -object onnxruntime_global_thread_pools_test -object onnxruntime_api_tests_without_env $(Build.SourcesDirectory)/include/onnxruntime $(Build.SourcesDirectory)/onnxruntime/core $(Build.SourcesDirectory)/onnxruntime/contrib_ops --format=html -output-dir=$(Build.ArtifactStagingDirectory)
        workingDirectory: $(Build.BinariesDirectory)

    - task: AzureCLI@2
      displayName: 'Azure CLI'
      inputs:
        azureSubscription: AIInfraBuildOnnxRuntimeOSS
        scriptType: bash
        scriptPath: $(Build.SourcesDirectory)/tools/ci_build/github/linux/upload_code_coverage_data.sh
        arguments: '"$(Build.BinariesDirectory)/report.json" "https://aiinfra.visualstudio.com/Lotus/_build/results?buildId=$(Build.BuildId)" x64 linux default'
        workingDirectory: '$(Build.BinariesDirectory)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: html

  - job: Upload
    workspace:
      clean: all
    pool: 'Win-CPU-2021'
    variables:
    - name: runCodesignValidationInjection
      value: false
    - name: skipComponentGovernanceDetection
      value: true
    dependsOn:
    - CodeCoverage
    condition: and (succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    steps:
    - checkout: self
      submodules: false

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifact'
      inputs:
        buildType: 'current'
        artifactName: 'html'
        targetPath: '$(Build.BinariesDirectory)'

    - task: AzureFileCopy@4
      displayName: 'AzureBlob File Copy'
      inputs:
        SourcePath: '$(Build.BinariesDirectory)\*'
        azureSubscription: AIInfraBuildOnnxRuntimeOSS
        Destination: AzureBlob
        storage: onnxruntime
        ContainerName: '$web'

- stage: AndroidCustomBuildScript
  dependsOn: [ ]
  jobs:
  - job: AndroidCustomBuildScript
    workspace:
      clean: all
    pool: 'Linux-CPU'
    variables:
      dockerImageTag: onnxruntime-android-custom-build
    steps:
    - checkout: self
      submodules: false

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        addToPath: true
        architecture: x64

    - task: CmdLine@2
      displayName: 'Run build_custom_android_package.py'
      inputs:
        script: |
          "$(Build.SourcesDirectory)/tools/android_custom_build/build_custom_android_package.py" \
            --docker_image_tag=$(dockerImageTag) \
            "$(Build.BinariesDirectory)/custom_android_package"
        workingDirectory: '$(Build.BinariesDirectory)'

    - task: CmdLine@2
      displayName: 'Clean up docker image'
      inputs:
        script: docker image rm $(dockerImageTag)
        workingDirectory: '$(Build.BinariesDirectory)'
      condition: succeededOrFailed()
