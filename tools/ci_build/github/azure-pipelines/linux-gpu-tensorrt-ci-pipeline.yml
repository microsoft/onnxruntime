##### start trigger Don't edit it manually, Please do edit set-trigger-rules.py ####
trigger:
  branches:
    include:
    - main
    - rel-*
  paths:
    exclude:
    - docs/**
    - README.md
    - CONTRIBUTING.md
    - BUILD.md
    - 'js/web'
    - 'onnxruntime/core/providers/js'
pr:
  branches:
    include:
    - main
    - rel-*
  paths:
    exclude:
    - docs/**
    - README.md
    - CONTRIBUTING.md
    - BUILD.md
    - 'js/web'
    - 'onnxruntime/core/providers/js'
#### end trigger ####

resources:
  repositories:
  - repository: manylinux
    type: Github
    endpoint: Microsoft
    name: pypa/manylinux
    ref: 5eda9aded5462201e6310105728d33016e637ea7

jobs:
- job: Linux_Build
  timeoutInMinutes: 180
  variables:
    skipComponentGovernanceDetection: true
    ALLOW_RELEASED_ONNX_OPSET_ONLY: '1'
    ORT_CACHE_DIR: '$(Agent.TempDirectory)/ort/ccache'
    TODAY: $[format('{0:dd}{0:MM}{0:yyyy}', pipeline.startTime)]
  workspace:
    clean: all
  pool: onnxruntime-tensorrt-linuxbuild-T4
  steps:
  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()

  - checkout: self
    clean: true
    submodules: none

  - template: templates/get-docker-image-steps.yml
    parameters:
      Dockerfile: tools/ci_build/github/linux/docker/Dockerfile.manylinux2_28_cuda11_8_tensorrt8_6
      Context: tools/ci_build/github/linux/docker
      DockerBuildArgs: "--network=host --build-arg POLICY=manylinux_2_28 --build-arg PLATFORM=x86_64 --build-arg PREPEND_PATH=/usr/local/cuda/bin --build-arg LD_LIBRARY_PATH_ARG=/usr/local/lib64 --build-arg DEVTOOLSET_ROOTPATH=/usr --build-arg BUILD_UID=$( id -u )"
      Repository: onnxruntimetensorrt86gpubuild

  - template: templates/linux-build-step-with-cache.yml
    parameters:
      WithCache: true
      Today: $(TODAY)
      AdditionalKey: gpu_tensorrt
      CacheDir: '$(ORT_CACHE_DIR)'
      BuildStep:
        - task: CmdLine@2
          inputs:
            script: |
              docker run --gpus all -e CFLAGS="-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -fcf-protection -O3 -Wl,--strip-all" -e CXXFLAGS="-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -fcf-protection -O3 -Wl,--strip-all" --rm \
                  --volume /data/onnx:/data/onnx:ro \
                  --volume $(Build.SourcesDirectory):/onnxruntime_src \
                  --volume $(Build.BinariesDirectory):/build \
                  --volume /data/models:/build/models:ro \
                  --volume $HOME/.onnx:/home/onnxruntimedev/.onnx \
                  --volume $(ORT_CACHE_DIR):/cache \
                  -e ALLOW_RELEASED_ONNX_OPSET_ONLY=0 \
                  -e NIGHTLY_BUILD \
                  -e BUILD_BUILDNUMBER \
                  -e CCACHE_DIR=/cache \
                  onnxruntimetensorrt86gpubuild \
                  /bin/bash -c "
                    set -ex; \
                    ccache -s; \
                      /opt/python/cp38-cp38/bin/python3 /onnxruntime_src/tools/ci_build/build.py \
                      --build_dir /build --cmake_generator Ninja \
                      --config Release \
                      --skip_submodule_sync \
                      --build_shared_lib \
                      --parallel \
                      --build_wheel \
                      --enable_onnx_tests --use_cuda --cuda_version=11.8 --cuda_home=/usr/local/cuda-11.8 --cudnn_home=/usr/local/cuda-11.8 \
                      --enable_pybind --build_java \
                      --use_tensorrt --tensorrt_home /usr \
                      --cmake_extra_defines CMAKE_CUDA_ARCHITECTURES=75 \
                      --use_cache; \
                     ccache -sv; \
                     ccache -z"
            workingDirectory: $(Build.SourcesDirectory)

  - template: templates/explicitly-defined-final-tasks.yml
