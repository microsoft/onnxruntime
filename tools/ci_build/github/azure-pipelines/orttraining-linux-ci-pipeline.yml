trigger:
  branches:
    include:
    - main
    - rel-*
  paths:
    exclude:
    - docs/**
    - README.md
    - CONTRIBUTING.md
    - BUILD.md
    - 'js/web'
    - 'js/node'
    - 'onnxruntime/core/providers/js'
pr:
  branches:
    include:
    - main
    - rel-*
  paths:
    exclude:
    - docs/**
    - README.md
    - CONTRIBUTING.md
    - BUILD.md
    - 'js/web'
    - 'js/node'
    - 'onnxruntime/core/providers/js'
resources:
  repositories:
  - repository: manylinux # The name used to reference this repository in the checkout step
    type: Github
    endpoint: Microsoft
    name: pypa/manylinux
    ref: 5eda9aded5462201e6310105728d33016e637ea7

jobs:
- job: Linux_Build
  timeoutInMinutes: 180
  workspace:
    clean: all
  variables:
    skipComponentGovernanceDetection: true
    CCACHE_DIR: $(Pipeline.Workspace)/ccache
    TODAY: $[format('{0:dd}{0:MM}{0:yyyy}', pipeline.startTime)]
  pool: onnxruntime-Ubuntu-2004-Training-CPU
  steps:
  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()

  - checkout: self
    clean: true
    submodules: none

  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      addToPath: true

  - template: templates/get-docker-image-steps.yml
    parameters:
      Dockerfile: tools/ci_build/github/linux/docker/Dockerfile.manylinux2014_cpu
      Context: tools/ci_build/github/linux/docker
      DockerBuildArgs: "--build-arg BUILD_UID=$( id -u )"
      Repository: onnxruntimecpubuild

  - task: Cache@2
    inputs:
      key: '"$(TODAY)" | "$(Build.SourceBranch)" | "$(Build.SourceVersion)"'
      path: $(CCACHE_DIR)
      cacheHitVar: CACHE_RESTORED
      restoreKeys: |
        "$(TODAY)" | "$(Build.SourceBranch)"
        "$(TODAY)" |
    displayName: Cach Task

  - task: CmdLine@2
    displayName: 'build'
    inputs:
      script: |
        mkdir -p $HOME/.onnx
        mkdir -p $(Pipeline.Workspace)/ccache
        docker run --rm \
          --volume /data/onnx:/data/onnx:ro \
          --volume $(Build.SourcesDirectory):/onnxruntime_src \
          --volume $(Build.BinariesDirectory):/build \
          --volume $HOME/.onnx:/home/onnxruntimedev/.onnx \
          --volume $(Pipeline.Workspace)/ccache:/cache \
          -e ALLOW_RELEASED_ONNX_OPSET_ONLY=0 \
          -e NIGHTLY_BUILD \
          -e BUILD_BUILDNUMBER \
          -e CCACHE_DIR=/cache \
          onnxruntimecpubuild \
          /bin/bash -c "
            set -ex; \
            ccache -s; \
            /opt/python/cp38-cp38/bin/python3 /onnxruntime_src/tools/ci_build/build.py \
              --build_dir /build --cmake_generator Ninja \
              --config Release \
              --skip_submodule_sync \
              --build_shared_lib \
              --parallel \
              --build_wheel \
              --enable_onnx_tests \
              --enable_training \
              --use_cache \
              --build_java --build_nodejs --update --build; \
                ccache -sv; \
                ccache -z"
      workingDirectory: $(Build.SourcesDirectory)

  - task: CmdLine@2
    displayName: 'Install python deps and run java tests'
    inputs:
      script: |
         set -e -x
         python3 -m pip uninstall -y ort-nightly-gpu ort-nightly onnxruntime onnxruntime-gpu onnxruntime-training onnxruntime-directml ort-nightly-directml onnx -qq
         cp $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker/scripts/manylinux/requirements.txt $(Build.BinariesDirectory)/requirements.txt
         # Test ORT with the latest ONNX release.
         sed -i "s/git+http:\/\/github\.com\/onnx\/onnx.*/onnx/" $(Build.BinariesDirectory)/requirements.txt
         python3 -m pip install -r $(Build.BinariesDirectory)/requirements.txt
         mkdir $(Build.BinariesDirectory)/requirements_torch_cpu/
         cp $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker/scripts/training/ortmodule/stage1/requirements_torch_cpu/requirements.txt $(Build.BinariesDirectory)/requirements_torch_cpu/requirements.txt
         python3 -m pip install -r $(Build.BinariesDirectory)/requirements_torch_cpu/requirements.txt
         cd $(Build.SourcesDirectory)/java
         $(Build.SourcesDirectory)/java/gradlew "cmakeCheck" "-DcmakeBuildDir=$(Build.BinariesDirectory)/Release"

  - task: CmdLine@2
    displayName: 'Install Release python package'
    inputs:
      script: |
         rm -rf $(Build.BinariesDirectory)/Release/onnxruntime $(Build.BinariesDirectory)/Release/pybind11
         python3 -m pip install $(Build.BinariesDirectory)/Release/dist/*.whl

  - task: PythonScript@0
    displayName: 'Run Release unit tests'
    inputs:
       scriptPath: $(Build.SourcesDirectory)/tools/ci_build/build.py
       workingDirectory: $(Build.BinariesDirectory)/Release
       arguments: >-
          --build_dir $(Build.BinariesDirectory)
          --cmake_generator Ninja
          --config Release
          --test
          --skip_submodule_sync
          --build_shared_lib
          --parallel
          --build_wheel
          --enable_onnx_tests
          --enable_training
          --build_nodejs
          --ctest_path ""

  - task: PublishTestResults@2
    displayName: 'Publish unit test results'
    inputs:
      testResultsFiles: '**/*.results.xml'
      searchFolder: '$(Build.BinariesDirectory)'
      testRunTitle: 'Unit Test Run'
    condition: succeededOrFailed()
