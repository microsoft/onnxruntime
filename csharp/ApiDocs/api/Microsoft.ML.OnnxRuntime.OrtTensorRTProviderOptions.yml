### YamlMime:ManagedReference
items:
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions
  commentId: T:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions
  id: OrtTensorRTProviderOptions
  parent: Microsoft.ML.OnnxRuntime
  children:
  - Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.#ctor
  - Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetDeviceId
  - Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetOptions
  - Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.IsInvalid
  - Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.ReleaseHandle
  - Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.UpdateOptions(System.Collections.Generic.Dictionary{System.String,System.String})
  langs:
  - csharp
  - vb
  name: OrtTensorRTProviderOptions
  nameWithType: OrtTensorRTProviderOptions
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions
  type: Class
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: OrtTensorRTProviderOptions
    path: ../src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
    startLine: 13
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nHolds the options for configuring a TensorRT Execution Provider instance\n"
  example: []
  syntax:
    content: 'public class OrtTensorRTProviderOptions : SafeHandle, IDisposable'
    content.vb: >-
      Public Class OrtTensorRTProviderOptions
          Inherits SafeHandle
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Runtime.InteropServices.SafeHandle
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.#ctor
  commentId: M:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.#ctor
  id: '#ctor'
  parent: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions
  langs:
  - csharp
  - vb
  name: OrtTensorRTProviderOptions()
  nameWithType: OrtTensorRTProviderOptions.OrtTensorRTProviderOptions()
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.OrtTensorRTProviderOptions()
  type: Constructor
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: .ctor
    path: ../src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
    startLine: 31
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nConstructs an empty OrtTensorRTProviderOptions instance\n"
  example: []
  syntax:
    content: public OrtTensorRTProviderOptions()
    content.vb: Public Sub New
  overload: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetOptions
  commentId: M:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetOptions
  id: GetOptions
  parent: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions
  langs:
  - csharp
  - vb
  name: GetOptions()
  nameWithType: OrtTensorRTProviderOptions.GetOptions()
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetOptions()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetOptions
    path: ../src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
    startLine: 44
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nGet TensorRT EP provider options\n"
  example: []
  syntax:
    content: public string GetOptions()
    return:
      type: System.String
      description: 'return C# UTF-16 encoded string '
    content.vb: Public Function GetOptions As String
  overload: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetOptions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.UpdateOptions(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.UpdateOptions(System.Collections.Generic.Dictionary{System.String,System.String})
  id: UpdateOptions(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions
  langs:
  - csharp
  - vb
  name: UpdateOptions(Dictionary<String, String>)
  nameWithType: OrtTensorRTProviderOptions.UpdateOptions(Dictionary<String, String>)
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.UpdateOptions(System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: UpdateOptions
    path: ../src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
    startLine: 63
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nUpdates  the configuration knobs of OrtTensorRTProviderOptions that will eventually be used to configure a TensorRT EP\nPlease refer to the following on different key/value pairs to configure a TensorRT EP and their meaning:\nhttps://www.onnxruntime.ai/docs/reference/execution-providers/TensorRT-ExecutionProvider.html\n"
  example: []
  syntax:
    content: public void UpdateOptions(Dictionary<string, string> providerOptions)
    parameters:
    - id: providerOptions
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: key/value pairs used to configure a TensorRT Execution Provider
    content.vb: Public Sub UpdateOptions(providerOptions As Dictionary(Of String, String))
  overload: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.UpdateOptions*
  nameWithType.vb: OrtTensorRTProviderOptions.UpdateOptions(Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.UpdateOptions(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: UpdateOptions(Dictionary(Of String, String))
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetDeviceId
  commentId: M:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetDeviceId
  id: GetDeviceId
  parent: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions
  langs:
  - csharp
  - vb
  name: GetDeviceId()
  nameWithType: OrtTensorRTProviderOptions.GetDeviceId()
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetDeviceId()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetDeviceId
    path: ../src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
    startLine: 84
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nGet device id of TensorRT EP.\n"
  example: []
  syntax:
    content: public int GetDeviceId()
    return:
      type: System.Int32
      description: 'device id '
    content.vb: Public Function GetDeviceId As Integer
  overload: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetDeviceId*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.IsInvalid
  commentId: P:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.IsInvalid
  id: IsInvalid
  parent: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions
  langs:
  - csharp
  - vb
  name: IsInvalid
  nameWithType: OrtTensorRTProviderOptions.IsInvalid
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.IsInvalid
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: IsInvalid
    path: ../src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
    startLine: 97
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nOverrides SafeHandle.IsInvalid\n"
  example: []
  syntax:
    content: public override bool IsInvalid { get; }
    parameters: []
    return:
      type: System.Boolean
      description: returns true if handle is equal to Zero
    content.vb: Public Overrides ReadOnly Property IsInvalid As Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.IsInvalid
  overload: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.IsInvalid*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.ReleaseHandle
  commentId: M:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions
  langs:
  - csharp
  - vb
  name: ReleaseHandle()
  nameWithType: OrtTensorRTProviderOptions.ReleaseHandle()
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.ReleaseHandle()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: ReleaseHandle
    path: ../src/Microsoft.ML.OnnxRuntime/ProviderOptions.shared.cs
    startLine: 112
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nOverrides SafeHandle.ReleaseHandle() to properly dispose of\nthe native instance of OrtTensorRTProviderOptions\n"
  example: []
  syntax:
    content: protected override bool ReleaseHandle()
    return:
      type: System.Boolean
      description: always returns true
    content.vb: Protected Overrides Function ReleaseHandle As Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  overload: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.ReleaseHandle*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.ML.OnnxRuntime
  commentId: N:Microsoft.ML.OnnxRuntime
  name: Microsoft.ML.OnnxRuntime
  nameWithType: Microsoft.ML.OnnxRuntime
  fullName: Microsoft.ML.OnnxRuntime
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.InteropServices.SafeHandle
  commentId: T:System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Runtime.InteropServices.SafeHandle.handle
  commentId: F:System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: handle
  nameWithType: SafeHandle.handle
  fullName: System.Runtime.InteropServices.SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousAddRef(Boolean)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    nameWithType: SafeHandle.DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    nameWithType: SafeHandle.DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousGetHandle()
  nameWithType: SafeHandle.DangerousGetHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    nameWithType: SafeHandle.DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    nameWithType: SafeHandle.DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousRelease()
  nameWithType: SafeHandle.DangerousRelease()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    nameWithType: SafeHandle.DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    nameWithType: SafeHandle.DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Dispose()
  nameWithType: SafeHandle.Dispose()
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: SetHandle(IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    nameWithType: SafeHandle.SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    nameWithType: SafeHandle.SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: SetHandleAsInvalid()
  nameWithType: SafeHandle.SetHandleAsInvalid()
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    nameWithType: SafeHandle.SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    nameWithType: SafeHandle.SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: true
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.#ctor*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.#ctor
  name: OrtTensorRTProviderOptions
  nameWithType: OrtTensorRTProviderOptions.OrtTensorRTProviderOptions
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.OrtTensorRTProviderOptions
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetOptions*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetOptions
  name: GetOptions
  nameWithType: OrtTensorRTProviderOptions.GetOptions
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetOptions
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.UpdateOptions*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.UpdateOptions
  name: UpdateOptions
  nameWithType: OrtTensorRTProviderOptions.UpdateOptions
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.UpdateOptions
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetDeviceId*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetDeviceId
  name: GetDeviceId
  nameWithType: OrtTensorRTProviderOptions.GetDeviceId
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.GetDeviceId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: IsInvalid
  nameWithType: SafeHandle.IsInvalid
  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.IsInvalid*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.IsInvalid
  name: IsInvalid
  nameWithType: OrtTensorRTProviderOptions.IsInvalid
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.IsInvalid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  commentId: M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: ReleaseHandle()
  nameWithType: SafeHandle.ReleaseHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    nameWithType: SafeHandle.ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    nameWithType: SafeHandle.ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.ReleaseHandle*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.ReleaseHandle
  name: ReleaseHandle
  nameWithType: OrtTensorRTProviderOptions.ReleaseHandle
  fullName: Microsoft.ML.OnnxRuntime.OrtTensorRTProviderOptions.ReleaseHandle
