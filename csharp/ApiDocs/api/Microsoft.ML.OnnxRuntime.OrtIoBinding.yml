### YamlMime:ManagedReference
items:
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding
  commentId: T:Microsoft.ML.OnnxRuntime.OrtIoBinding
  id: OrtIoBinding
  parent: Microsoft.ML.OnnxRuntime
  children:
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String,Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue)
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String,Microsoft.ML.OnnxRuntime.OrtExternalAllocation)
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String,Microsoft.ML.OnnxRuntime.Tensors.TensorElementType,System.Int64[],Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String,Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue)
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String,Microsoft.ML.OnnxRuntime.OrtExternalAllocation)
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String,Microsoft.ML.OnnxRuntime.Tensors.TensorElementType,System.Int64[],Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutputToDevice(System.String,Microsoft.ML.OnnxRuntime.OrtMemoryInfo)
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundInputs
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundOutputs
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputNames
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputValues
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.IsInvalid
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.ReleaseHandle
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundInputs
  - Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundOutputs
  langs:
  - csharp
  - vb
  name: OrtIoBinding
  nameWithType: OrtIoBinding
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding
  type: Class
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: OrtIoBinding
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 28
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nThis class enables binding of inputs and/or outputs to pre-allocated\nmemory. This enables interesting scenarios. For example, if your input\nalready resides in some pre-allocated memory like GPU, you can bind\nthat piece of memory to an input name and shape and onnxruntime will use that as input.\nOther traditional inputs can also be bound that already exists as Tensors.\n\nNote, that this arrangement is designed to minimize data copies and to that effect\nyour memory allocations must match what is expected by the model, whether you run on\nCPU or GPU. Data copy will still be made, if your pre-allocated memory location does not\nmatch the one expected by the model. However, copies with OrtIoBindings are only done once,\nat the time of the binding, not at run time. This means, that if your input data required a copy,\nyour further input modifications would not be seen by onnxruntime unless you rebind it, even if it is\nthe same buffer. If you require the scenario where data is copied, OrtIOBinding may not be the best match\nfor your use case.\n\nThe fact that data copy is not made during runtime also has performance implications.\n"
  example: []
  syntax:
    content: 'public class OrtIoBinding : SafeHandle, IDisposable'
    content.vb: >-
      Public Class OrtIoBinding
          Inherits SafeHandle
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Runtime.InteropServices.SafeHandle
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.IsInvalid
  commentId: P:Microsoft.ML.OnnxRuntime.OrtIoBinding.IsInvalid
  id: IsInvalid
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: IsInvalid
  nameWithType: OrtIoBinding.IsInvalid
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.IsInvalid
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: IsInvalid
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 52
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nOverrides SafeHandle.IsInvalid\n"
  example: []
  syntax:
    content: public override bool IsInvalid { get; }
    parameters: []
    return:
      type: System.Boolean
      description: returns true if handle is equal to Zero
    content.vb: Public Overrides ReadOnly Property IsInvalid As Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.IsInvalid
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.IsInvalid*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String,Microsoft.ML.OnnxRuntime.Tensors.TensorElementType,System.Int64[],Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String,Microsoft.ML.OnnxRuntime.Tensors.TensorElementType,System.Int64[],Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  id: BindInput(System.String,Microsoft.ML.OnnxRuntime.Tensors.TensorElementType,System.Int64[],Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: BindInput(String, TensorElementType, Int64[], OrtMemoryAllocation)
  nameWithType: OrtIoBinding.BindInput(String, TensorElementType, Int64[], OrtMemoryAllocation)
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String, Microsoft.ML.OnnxRuntime.Tensors.TensorElementType, System.Int64[], Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: BindInput
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 64
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nBind a piece of pre-allocated native memory as a OrtValue Tensor with a given shape\nto an input with a given name. The model will read the specified input from that memory\npossibly avoiding the need to copy between devices. OrtMemoryAllocation continues to own\nthe chunk of native memory, and the allocation should be alive until the end of execution.\n"
  example: []
  syntax:
    content: public void BindInput(string name, TensorElementType elementType, long[] shape, OrtMemoryAllocation allocation)
    parameters:
    - id: name
      type: System.String
      description: of the input
    - id: elementType
      type: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
      description: Tensor element type
    - id: shape
      type: System.Int64[]
      description: ''
    - id: allocation
      type: Microsoft.ML.OnnxRuntime.OrtMemoryAllocation
      description: native memory allocation
    content.vb: Public Sub BindInput(name As String, elementType As TensorElementType, shape As Long(), allocation As OrtMemoryAllocation)
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput*
  nameWithType.vb: OrtIoBinding.BindInput(String, TensorElementType, Int64(), OrtMemoryAllocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String, Microsoft.ML.OnnxRuntime.Tensors.TensorElementType, System.Int64(), Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  name.vb: BindInput(String, TensorElementType, Int64(), OrtMemoryAllocation)
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String,Microsoft.ML.OnnxRuntime.OrtExternalAllocation)
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String,Microsoft.ML.OnnxRuntime.OrtExternalAllocation)
  id: BindInput(System.String,Microsoft.ML.OnnxRuntime.OrtExternalAllocation)
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: BindInput(String, OrtExternalAllocation)
  nameWithType: OrtIoBinding.BindInput(String, OrtExternalAllocation)
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String, Microsoft.ML.OnnxRuntime.OrtExternalAllocation)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: BindInput
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 77
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nBind externally (not from OrtAllocator) allocated memory as input.\nThe model will read the specified input from that memory\npossibly avoiding the need to copy between devices. The user code continues to own\nthe chunk of externally allocated memory, and the allocation should be alive until the end of execution.\n"
  example: []
  syntax:
    content: public void BindInput(string name, OrtExternalAllocation allocation)
    parameters:
    - id: name
      type: System.String
      description: name
    - id: allocation
      type: Microsoft.ML.OnnxRuntime.OrtExternalAllocation
      description: non ort allocated memory
    content.vb: Public Sub BindInput(name As String, allocation As OrtExternalAllocation)
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String,Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue)
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String,Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue)
  id: BindInput(System.String,Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue)
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: BindInput(String, FixedBufferOnnxValue)
  nameWithType: OrtIoBinding.BindInput(String, FixedBufferOnnxValue)
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput(System.String, Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: BindInput
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 88
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nBind the input with the given name as an OrtValue Tensor allocated in pinned managed memory.\nInstance of FixedBufferOnnxValue owns the memory and should be alive until the end of execution.\n"
  example: []
  syntax:
    content: public void BindInput(string name, FixedBufferOnnxValue fixedValue)
    parameters:
    - id: name
      type: System.String
      description: name of input
    - id: fixedValue
      type: Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue
      description: ''
    content.vb: Public Sub BindInput(name As String, fixedValue As FixedBufferOnnxValue)
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundInputs
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundInputs
  id: SynchronizeBoundInputs
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: SynchronizeBoundInputs()
  nameWithType: OrtIoBinding.SynchronizeBoundInputs()
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundInputs()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: SynchronizeBoundInputs
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 101
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nBlocks until device completes all preceding requested tasks.\nUseful for memory synchronization.\n"
  example: []
  syntax:
    content: public void SynchronizeBoundInputs()
    content.vb: Public Sub SynchronizeBoundInputs
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundInputs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String,Microsoft.ML.OnnxRuntime.Tensors.TensorElementType,System.Int64[],Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String,Microsoft.ML.OnnxRuntime.Tensors.TensorElementType,System.Int64[],Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  id: BindOutput(System.String,Microsoft.ML.OnnxRuntime.Tensors.TensorElementType,System.Int64[],Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: BindOutput(String, TensorElementType, Int64[], OrtMemoryAllocation)
  nameWithType: OrtIoBinding.BindOutput(String, TensorElementType, Int64[], OrtMemoryAllocation)
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String, Microsoft.ML.OnnxRuntime.Tensors.TensorElementType, System.Int64[], Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: BindOutput
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 114
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nBind model output to an OrtValue as Tensor with a given type and shape. An instance of OrtMemoryAllocaiton\nowns the memory and should be alive for the time of execution.\n"
  example: []
  syntax:
    content: public void BindOutput(string name, TensorElementType elementType, long[] shape, OrtMemoryAllocation allocation)
    parameters:
    - id: name
      type: System.String
      description: of the output
    - id: elementType
      type: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
      description: tensor element type
    - id: shape
      type: System.Int64[]
      description: tensor shape
    - id: allocation
      type: Microsoft.ML.OnnxRuntime.OrtMemoryAllocation
      description: allocated memory
    content.vb: Public Sub BindOutput(name As String, elementType As TensorElementType, shape As Long(), allocation As OrtMemoryAllocation)
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput*
  nameWithType.vb: OrtIoBinding.BindOutput(String, TensorElementType, Int64(), OrtMemoryAllocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String, Microsoft.ML.OnnxRuntime.Tensors.TensorElementType, System.Int64(), Microsoft.ML.OnnxRuntime.OrtMemoryAllocation)
  name.vb: BindOutput(String, TensorElementType, Int64(), OrtMemoryAllocation)
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String,Microsoft.ML.OnnxRuntime.OrtExternalAllocation)
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String,Microsoft.ML.OnnxRuntime.OrtExternalAllocation)
  id: BindOutput(System.String,Microsoft.ML.OnnxRuntime.OrtExternalAllocation)
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: BindOutput(String, OrtExternalAllocation)
  nameWithType: OrtIoBinding.BindOutput(String, OrtExternalAllocation)
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String, Microsoft.ML.OnnxRuntime.OrtExternalAllocation)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: BindOutput
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 127
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nBind externally (not from OrtAllocator) allocated memory as output.\nThe model will read the specified input from that memory\npossibly avoiding the need to copy between devices. The user code continues to own\nthe chunk of externally allocated memory, and the allocation should be alive until the end of execution.\n"
  example: []
  syntax:
    content: public void BindOutput(string name, OrtExternalAllocation allocation)
    parameters:
    - id: name
      type: System.String
      description: name
    - id: allocation
      type: Microsoft.ML.OnnxRuntime.OrtExternalAllocation
      description: non ort allocated memory
    content.vb: Public Sub BindOutput(name As String, allocation As OrtExternalAllocation)
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String,Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue)
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String,Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue)
  id: BindOutput(System.String,Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue)
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: BindOutput(String, FixedBufferOnnxValue)
  nameWithType: OrtIoBinding.BindOutput(String, FixedBufferOnnxValue)
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput(System.String, Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: BindOutput
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 138
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nBind model output to a given instance of FixedBufferOnnxValue which owns the underlying\npinned managed memory and should be alive for the time of execution.\n"
  example: []
  syntax:
    content: public void BindOutput(string name, FixedBufferOnnxValue fixedValue)
    parameters:
    - id: name
      type: System.String
      description: of the output
    - id: fixedValue
      type: Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue
      description: ''
    content.vb: Public Sub BindOutput(name As String, fixedValue As FixedBufferOnnxValue)
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutputToDevice(System.String,Microsoft.ML.OnnxRuntime.OrtMemoryInfo)
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutputToDevice(System.String,Microsoft.ML.OnnxRuntime.OrtMemoryInfo)
  id: BindOutputToDevice(System.String,Microsoft.ML.OnnxRuntime.OrtMemoryInfo)
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: BindOutputToDevice(String, OrtMemoryInfo)
  nameWithType: OrtIoBinding.BindOutputToDevice(String, OrtMemoryInfo)
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutputToDevice(System.String, Microsoft.ML.OnnxRuntime.OrtMemoryInfo)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: BindOutputToDevice
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 153
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nThis function will bind model output with the given name to a device\nspecified by the memInfo.\n"
  example: []
  syntax:
    content: public void BindOutputToDevice(string name, OrtMemoryInfo memInfo)
    parameters:
    - id: name
      type: System.String
      description: output name
    - id: memInfo
      type: Microsoft.ML.OnnxRuntime.OrtMemoryInfo
      description: instance of memory info
    content.vb: Public Sub BindOutputToDevice(name As String, memInfo As OrtMemoryInfo)
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutputToDevice*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundOutputs
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundOutputs
  id: SynchronizeBoundOutputs
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: SynchronizeBoundOutputs()
  nameWithType: OrtIoBinding.SynchronizeBoundOutputs()
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundOutputs()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: SynchronizeBoundOutputs
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 164
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nBlocks until device completes all preceding requested tasks.\nUseful for memory synchronization.\n"
  example: []
  syntax:
    content: public void SynchronizeBoundOutputs()
    content.vb: Public Sub SynchronizeBoundOutputs
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundOutputs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputNames
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputNames
  id: GetOutputNames
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: GetOutputNames()
  nameWithType: OrtIoBinding.GetOutputNames()
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputNames()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetOutputNames
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 232
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nReturns an array of output names in the same order they were bound\n"
  example: []
  syntax:
    content: public string[] GetOutputNames()
    return:
      type: System.String[]
      description: array of output names
    content.vb: Public Function GetOutputNames As String()
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputNames*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputValues
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputValues
  id: GetOutputValues
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: GetOutputValues()
  nameWithType: OrtIoBinding.GetOutputValues()
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputValues()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetOutputValues
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 277
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  syntax:
    content: public IDisposableReadOnlyCollection<OrtValue> GetOutputValues()
    return:
      type: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection{Microsoft.ML.OnnxRuntime.OrtValue}
    content.vb: Public Function GetOutputValues As IDisposableReadOnlyCollection(Of OrtValue)
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputValues*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundInputs
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundInputs
  id: ClearBoundInputs
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: ClearBoundInputs()
  nameWithType: OrtIoBinding.ClearBoundInputs()
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundInputs()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: ClearBoundInputs
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 313
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nClear all bound inputs and start anew\n"
  example: []
  syntax:
    content: public void ClearBoundInputs()
    content.vb: Public Sub ClearBoundInputs
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundInputs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundOutputs
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundOutputs
  id: ClearBoundOutputs
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: ClearBoundOutputs()
  nameWithType: OrtIoBinding.ClearBoundOutputs()
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundOutputs()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: ClearBoundOutputs
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 321
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nClear all bound outputs\n"
  example: []
  syntax:
    content: public void ClearBoundOutputs()
    content.vb: Public Sub ClearBoundOutputs
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundOutputs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.ReleaseHandle
  commentId: M:Microsoft.ML.OnnxRuntime.OrtIoBinding.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.ML.OnnxRuntime.OrtIoBinding
  langs:
  - csharp
  - vb
  name: ReleaseHandle()
  nameWithType: OrtIoBinding.ReleaseHandle()
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.ReleaseHandle()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: ReleaseHandle
    path: ../src/Microsoft.ML.OnnxRuntime/OrtIoBinding.shared.cs
    startLine: 332
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime
  summary: "\nOverrides SafeHandle.ReleaseHandle() to properly dispose of\nthe native instance of OrtIoBidning\n"
  example: []
  syntax:
    content: protected override bool ReleaseHandle()
    return:
      type: System.Boolean
      description: always returns true
    content.vb: Protected Overrides Function ReleaseHandle As Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  overload: Microsoft.ML.OnnxRuntime.OrtIoBinding.ReleaseHandle*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.ML.OnnxRuntime
  commentId: N:Microsoft.ML.OnnxRuntime
  name: Microsoft.ML.OnnxRuntime
  nameWithType: Microsoft.ML.OnnxRuntime
  fullName: Microsoft.ML.OnnxRuntime
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.InteropServices.SafeHandle
  commentId: T:System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Runtime.InteropServices.SafeHandle.handle
  commentId: F:System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: handle
  nameWithType: SafeHandle.handle
  fullName: System.Runtime.InteropServices.SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousAddRef(Boolean)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    nameWithType: SafeHandle.DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    nameWithType: SafeHandle.DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousGetHandle()
  nameWithType: SafeHandle.DangerousGetHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    nameWithType: SafeHandle.DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    nameWithType: SafeHandle.DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousRelease()
  nameWithType: SafeHandle.DangerousRelease()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    nameWithType: SafeHandle.DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    nameWithType: SafeHandle.DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Dispose()
  nameWithType: SafeHandle.Dispose()
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: SetHandle(IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    nameWithType: SafeHandle.SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    nameWithType: SafeHandle.SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: SetHandleAsInvalid()
  nameWithType: SafeHandle.SetHandleAsInvalid()
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    nameWithType: SafeHandle.SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    nameWithType: SafeHandle.SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: true
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: IsInvalid
  nameWithType: SafeHandle.IsInvalid
  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.IsInvalid*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.IsInvalid
  name: IsInvalid
  nameWithType: OrtIoBinding.IsInvalid
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.IsInvalid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput
  name: BindInput
  nameWithType: OrtIoBinding.BindInput
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindInput
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
  parent: Microsoft.ML.OnnxRuntime.Tensors
  name: TensorElementType
  nameWithType: TensorElementType
  fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
- uid: System.Int64[]
  isExternal: true
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  nameWithType.vb: Int64()
  fullName.vb: System.Int64()
  name.vb: Int64()
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.ML.OnnxRuntime.OrtMemoryAllocation
  commentId: T:Microsoft.ML.OnnxRuntime.OrtMemoryAllocation
  parent: Microsoft.ML.OnnxRuntime
  name: OrtMemoryAllocation
  nameWithType: OrtMemoryAllocation
  fullName: Microsoft.ML.OnnxRuntime.OrtMemoryAllocation
- uid: Microsoft.ML.OnnxRuntime.Tensors
  commentId: N:Microsoft.ML.OnnxRuntime.Tensors
  name: Microsoft.ML.OnnxRuntime.Tensors
  nameWithType: Microsoft.ML.OnnxRuntime.Tensors
  fullName: Microsoft.ML.OnnxRuntime.Tensors
- uid: Microsoft.ML.OnnxRuntime.OrtExternalAllocation
  commentId: T:Microsoft.ML.OnnxRuntime.OrtExternalAllocation
  parent: Microsoft.ML.OnnxRuntime
  name: OrtExternalAllocation
  nameWithType: OrtExternalAllocation
  fullName: Microsoft.ML.OnnxRuntime.OrtExternalAllocation
- uid: Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue
  commentId: T:Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue
  parent: Microsoft.ML.OnnxRuntime
  name: FixedBufferOnnxValue
  nameWithType: FixedBufferOnnxValue
  fullName: Microsoft.ML.OnnxRuntime.FixedBufferOnnxValue
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundInputs*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundInputs
  name: SynchronizeBoundInputs
  nameWithType: OrtIoBinding.SynchronizeBoundInputs
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundInputs
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput
  name: BindOutput
  nameWithType: OrtIoBinding.BindOutput
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutput
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutputToDevice*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutputToDevice
  name: BindOutputToDevice
  nameWithType: OrtIoBinding.BindOutputToDevice
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.BindOutputToDevice
- uid: Microsoft.ML.OnnxRuntime.OrtMemoryInfo
  commentId: T:Microsoft.ML.OnnxRuntime.OrtMemoryInfo
  parent: Microsoft.ML.OnnxRuntime
  name: OrtMemoryInfo
  nameWithType: OrtMemoryInfo
  fullName: Microsoft.ML.OnnxRuntime.OrtMemoryInfo
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundOutputs*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundOutputs
  name: SynchronizeBoundOutputs
  nameWithType: OrtIoBinding.SynchronizeBoundOutputs
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.SynchronizeBoundOutputs
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputNames*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputNames
  name: GetOutputNames
  nameWithType: OrtIoBinding.GetOutputNames
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputNames
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputValues*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputValues
  name: GetOutputValues
  nameWithType: OrtIoBinding.GetOutputValues
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.GetOutputValues
- uid: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection{Microsoft.ML.OnnxRuntime.OrtValue}
  commentId: T:Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection{Microsoft.ML.OnnxRuntime.OrtValue}
  parent: Microsoft.ML.OnnxRuntime
  definition: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection`1
  name: IDisposableReadOnlyCollection<OrtValue>
  nameWithType: IDisposableReadOnlyCollection<OrtValue>
  fullName: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection<Microsoft.ML.OnnxRuntime.OrtValue>
  nameWithType.vb: IDisposableReadOnlyCollection(Of OrtValue)
  fullName.vb: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection(Of Microsoft.ML.OnnxRuntime.OrtValue)
  name.vb: IDisposableReadOnlyCollection(Of OrtValue)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection`1
    name: IDisposableReadOnlyCollection
    nameWithType: IDisposableReadOnlyCollection
    fullName: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ML.OnnxRuntime.OrtValue
    name: OrtValue
    nameWithType: OrtValue
    fullName: Microsoft.ML.OnnxRuntime.OrtValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection`1
    name: IDisposableReadOnlyCollection
    nameWithType: IDisposableReadOnlyCollection
    fullName: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ML.OnnxRuntime.OrtValue
    name: OrtValue
    nameWithType: OrtValue
    fullName: Microsoft.ML.OnnxRuntime.OrtValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection`1
  commentId: T:Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection`1
  name: IDisposableReadOnlyCollection<T>
  nameWithType: IDisposableReadOnlyCollection<T>
  fullName: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection<T>
  nameWithType.vb: IDisposableReadOnlyCollection(Of T)
  fullName.vb: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection(Of T)
  name.vb: IDisposableReadOnlyCollection(Of T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection`1
    name: IDisposableReadOnlyCollection
    nameWithType: IDisposableReadOnlyCollection
    fullName: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection`1
    name: IDisposableReadOnlyCollection
    nameWithType: IDisposableReadOnlyCollection
    fullName: Microsoft.ML.OnnxRuntime.IDisposableReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundInputs*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundInputs
  name: ClearBoundInputs
  nameWithType: OrtIoBinding.ClearBoundInputs
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundInputs
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundOutputs*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundOutputs
  name: ClearBoundOutputs
  nameWithType: OrtIoBinding.ClearBoundOutputs
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.ClearBoundOutputs
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  commentId: M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: ReleaseHandle()
  nameWithType: SafeHandle.ReleaseHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    nameWithType: SafeHandle.ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    nameWithType: SafeHandle.ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.OrtIoBinding.ReleaseHandle*
  commentId: Overload:Microsoft.ML.OnnxRuntime.OrtIoBinding.ReleaseHandle
  name: ReleaseHandle
  nameWithType: OrtIoBinding.ReleaseHandle
  fullName: Microsoft.ML.OnnxRuntime.OrtIoBinding.ReleaseHandle
