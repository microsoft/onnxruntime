### YamlMime:ManagedReference
items:
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  id: Tensor`1
  parent: Microsoft.ML.OnnxRuntime.Tensors
  children:
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor(System.Array,System.Boolean)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor(System.ReadOnlySpan{System.Int32},System.Boolean)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty(System.ReadOnlySpan{System.Int32})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1(System.ReadOnlySpan{System.Int32})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains(`0)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo(`0[],System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Dimensions
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill(`0)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString(System.Boolean)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32,System.Boolean)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf(`0)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsFixedSize
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReadOnly
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReversedStride
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.Int32[])
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.ReadOnlySpan{System.Int32})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Length
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Rank
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape(System.ReadOnlySpan{System.Int32})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue(System.Int32,`0)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Strides
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Clear
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Count
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyCollection{T}#Count
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#Count
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#IsSynchronized
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#SyncRoot
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Add(System.Object)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Clear
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Contains(System.Object)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#IndexOf(System.Object)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Item(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Remove(System.Object)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#RemoveAt(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
  langs:
  - csharp
  - vb
  name: Tensor<T>
  nameWithType: Tensor<T>
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>
  type: Class
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Tensor
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 493
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nRepresents a multi-dimensional collection of objects of type T that can be accessed by indices.\n"
  example: []
  syntax:
    content: 'public abstract class Tensor<T> : TensorBase, IList, ICollection, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IStructuralComparable, IStructuralEquatable'
    typeParameters:
    - id: T
      description: type contained within the Tensor.  Typically a value type such as int, double, float, etc.
    content.vb: >-
      Public MustInherit Class Tensor(Of T)
          Inherits TensorBase
          Implements IList, ICollection, IList(Of T), ICollection(Of T), IReadOnlyList(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable, IStructuralComparable, IStructuralEquatable
  inheritance:
  - System.Object
  - Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  derivedClasses:
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  inheritedMembers:
  - Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(System.Type)
  - Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
  - Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Tensor(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T)
  name.vb: Tensor(Of T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Tensor(Int32)
  nameWithType: Tensor<T>.Tensor(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Tensor(System.Int32)
  type: Constructor
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: .ctor
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 645
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nInitialize a 1-dimensional tensor of the specified length\n"
  example: []
  syntax:
    content: protected Tensor(int length)
    parameters:
    - id: length
      type: System.Int32
      description: Size of the 1-dimensional tensor
    content.vb: Protected Sub New(length As Integer)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor*
  nameWithType.vb: Tensor(Of T).Tensor(Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Tensor(System.Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor(System.ReadOnlySpan{System.Int32},System.Boolean)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor(System.ReadOnlySpan{System.Int32},System.Boolean)
  id: '#ctor(System.ReadOnlySpan{System.Int32},System.Boolean)'
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Tensor(ReadOnlySpan<Int32>, Boolean)
  nameWithType: Tensor<T>.Tensor(ReadOnlySpan<Int32>, Boolean)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Tensor(System.ReadOnlySpan<System.Int32>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: .ctor
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 658
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nInitialize an n-dimensional tensor with the specified dimensions and layout.  ReverseStride=true gives a stride of 1-element width to the first dimension (0).  ReverseStride=false gives a stride of 1-element width to the last dimension (n-1).\n"
  example: []
  syntax:
    content: protected Tensor(ReadOnlySpan<int> dimensions, bool reverseStride)
    parameters:
    - id: dimensions
      type: System.ReadOnlySpan{System.Int32}
      description: An span of integers that represent the size of each dimension of the Tensor to create.
    - id: reverseStride
      type: System.Boolean
      description: 'False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.'
    content.vb: Protected Sub New(dimensions As ReadOnlySpan(Of Integer), reverseStride As Boolean)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor*
  nameWithType.vb: Tensor(Of T).Tensor(ReadOnlySpan(Of Int32), Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Tensor(System.ReadOnlySpan(Of System.Int32), System.Boolean)
  name.vb: Tensor(ReadOnlySpan(Of Int32), Boolean)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor(System.Array,System.Boolean)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor(System.Array,System.Boolean)
  id: '#ctor(System.Array,System.Boolean)'
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Tensor(Array, Boolean)
  nameWithType: Tensor<T>.Tensor(Array, Boolean)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Tensor(System.Array, System.Boolean)
  type: Constructor
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: .ctor
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 694
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nInitializes tensor with same dimensions as array, content of array is ignored.  \nReverseStride=true gives a stride of 1-element width to the first dimension (0).  \nReverseStride=false gives a stride of 1-element width to the last dimension (n-1).\n"
  example: []
  syntax:
    content: protected Tensor(Array fromArray, bool reverseStride)
    parameters:
    - id: fromArray
      type: System.Array
      description: Array from which to derive dimensions.
    - id: reverseStride
      type: System.Boolean
      description: "\nFalse (default) to indicate that the first dimension is most major (farthest apart) and the \nlast dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  \nTrue to indicate that the last dimension is most major (farthest apart) and the first dimension \nis most minor (closest together): akin to column-major in a rank-2 tensor."
    content.vb: Protected Sub New(fromArray As Array, reverseStride As Boolean)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor*
  nameWithType.vb: Tensor(Of T).Tensor(Array, Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Tensor(System.Array, System.Boolean)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Length
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Length
  id: Length
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Tensor<T>.Length
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Length
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Length
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 718
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nTotal length of the Tensor.\n"
  example: []
  syntax:
    content: public long Length { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property Length As Long
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Length*
  nameWithType.vb: Tensor(Of T).Length
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Length
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Rank
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Rank
  id: Rank
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Rank
  nameWithType: Tensor<T>.Rank
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Rank
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Rank
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 723
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nRank of the tensor: number of dimensions.\n"
  example: []
  syntax:
    content: public int Rank { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Rank As Integer
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Rank*
  nameWithType.vb: Tensor(Of T).Rank
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Rank
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReversedStride
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReversedStride
  id: IsReversedStride
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IsReversedStride
  nameWithType: Tensor<T>.IsReversedStride
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsReversedStride
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: IsReversedStride
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 728
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nTrue if strides are reversed (AKA Column-major)\n"
  example: []
  syntax:
    content: public bool IsReversedStride { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReversedStride As Boolean
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReversedStride*
  nameWithType.vb: Tensor(Of T).IsReversedStride
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsReversedStride
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Dimensions
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Dimensions
  id: Dimensions
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Dimensions
  nameWithType: Tensor<T>.Dimensions
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Dimensions
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Dimensions
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 733
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nReturns a readonly view of the dimensions of this tensor.\n"
  example: []
  syntax:
    content: public ReadOnlySpan<int> Dimensions { get; }
    parameters: []
    return:
      type: System.ReadOnlySpan{System.Int32}
    content.vb: Public ReadOnly Property Dimensions As ReadOnlySpan(Of Integer)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Dimensions*
  nameWithType.vb: Tensor(Of T).Dimensions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Dimensions
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Strides
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Strides
  id: Strides
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Strides
  nameWithType: Tensor<T>.Strides
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Strides
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Strides
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 738
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nReturns a readonly view of the strides of this tensor.\n"
  example: []
  syntax:
    content: public ReadOnlySpan<int> Strides { get; }
    parameters: []
    return:
      type: System.ReadOnlySpan{System.Int32}
    content.vb: Public ReadOnly Property Strides As ReadOnlySpan(Of Integer)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Strides*
  nameWithType.vb: Tensor(Of T).Strides
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Strides
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill(`0)
  id: Fill(`0)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Fill(T)
  nameWithType: Tensor<T>.Fill(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Fill(T)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Fill
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 744
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nSets all elements in Tensor to <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  example: []
  syntax:
    content: public virtual void Fill(T value)
    parameters:
    - id: value
      type: '{T}'
      description: Value to fill
    content.vb: Public Overridable Sub Fill(value As T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill*
  nameWithType.vb: Tensor(Of T).Fill(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Fill(T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
  id: Clone
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Tensor<T>.Clone()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Clone()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Clone
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 756
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nCreates a shallow copy of this tensor, with new backing storage.\n"
  example: []
  syntax:
    content: public abstract Tensor<T> Clone()
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: A shallow copy of this tensor.
    content.vb: Public MustOverride Function Clone As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone*
  nameWithType.vb: Tensor(Of T).Clone()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Clone()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
  id: CloneEmpty
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: CloneEmpty()
  nameWithType: Tensor<T>.CloneEmpty()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: CloneEmpty
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 762
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nCreates a new Tensor with the same layout and dimensions as this tensor with elements initialized to their default value.\n"
  example: []
  syntax:
    content: public virtual Tensor<T> CloneEmpty()
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: A new Tensor with the same layout and dimensions as this tensor with elements initialized to their default value.
    content.vb: Public Overridable Function CloneEmpty As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty*
  nameWithType.vb: Tensor(Of T).CloneEmpty()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty(System.ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty(System.ReadOnlySpan{System.Int32})
  id: CloneEmpty(System.ReadOnlySpan{System.Int32})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: CloneEmpty(ReadOnlySpan<Int32>)
  nameWithType: Tensor<T>.CloneEmpty(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty(System.ReadOnlySpan<System.Int32>)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: CloneEmpty
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 772
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nCreates a new Tensor with the specified dimensions and the same layout as this tensor with elements initialized to their default value.\n"
  example: []
  syntax:
    content: public virtual Tensor<T> CloneEmpty(ReadOnlySpan<int> dimensions)
    parameters:
    - id: dimensions
      type: System.ReadOnlySpan{System.Int32}
      description: An span of integers that represent the size of each dimension of the DenseTensor to create.
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: A new Tensor with the same layout as this tensor and specified <code data-dev-comment-type="paramref" class="paramref">dimensions</code> with elements initialized to their default value.
    content.vb: Public Overridable Function CloneEmpty(dimensions As ReadOnlySpan(Of Integer)) As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty*
  nameWithType.vb: Tensor(Of T).CloneEmpty(ReadOnlySpan(Of Int32))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(System.ReadOnlySpan(Of System.Int32))
  name.vb: CloneEmpty(ReadOnlySpan(Of Int32))
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1
  id: CloneEmpty``1
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: CloneEmpty<TResult>()
  nameWithType: Tensor<T>.CloneEmpty<TResult>()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty<TResult>()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: CloneEmpty
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 782
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nCreates a new Tensor of a different type with the same layout and size as this tensor with elements initialized to their default value.\n"
  example: []
  syntax:
    content: public virtual Tensor<TResult> CloneEmpty<TResult>()
    typeParameters:
    - id: TResult
      description: Type contained within the new Tensor.  Typically a value type such as int, double, float, etc.
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{TResult}}
      description: A new Tensor with the same layout and dimensions as this tensor with elements of <code data-dev-comment-type="typeparamref" class="typeparamref">TResult</code> type initialized to their default value.
    content.vb: Public Overridable Function CloneEmpty(Of TResult) As Tensor(Of TResult)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty*
  nameWithType.vb: Tensor(Of T).CloneEmpty(Of TResult)()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(Of TResult)()
  name.vb: CloneEmpty(Of TResult)()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1(System.ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1(System.ReadOnlySpan{System.Int32})
  id: CloneEmpty``1(System.ReadOnlySpan{System.Int32})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: CloneEmpty<TResult>(ReadOnlySpan<Int32>)
  nameWithType: Tensor<T>.CloneEmpty<TResult>(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty<TResult>(System.ReadOnlySpan<System.Int32>)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: CloneEmpty
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 793
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nCreates a new Tensor of a different type with the specified dimensions and the same layout as this tensor with elements initialized to their default value.\n"
  example: []
  syntax:
    content: public abstract Tensor<TResult> CloneEmpty<TResult>(ReadOnlySpan<int> dimensions)
    parameters:
    - id: dimensions
      type: System.ReadOnlySpan{System.Int32}
      description: An span of integers that represent the size of each dimension of the DenseTensor to create.
    typeParameters:
    - id: TResult
      description: Type contained within the new Tensor.  Typically a value type such as int, double, float, etc.
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{TResult}}
      description: A new Tensor with the same layout as this tensor of specified <code data-dev-comment-type="paramref" class="paramref">dimensions</code> with elements of <code data-dev-comment-type="typeparamref" class="typeparamref">TResult</code> type initialized to their default value.
    content.vb: Public MustOverride Function CloneEmpty(Of TResult)(dimensions As ReadOnlySpan(Of Integer)) As Tensor(Of TResult)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty*
  nameWithType.vb: Tensor(Of T).CloneEmpty(Of TResult)(ReadOnlySpan(Of Int32))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(Of TResult)(System.ReadOnlySpan(Of System.Int32))
  name.vb: CloneEmpty(Of TResult)(ReadOnlySpan(Of Int32))
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
  id: GetDiagonal
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: GetDiagonal()
  nameWithType: Tensor<T>.GetDiagonal()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetDiagonal
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 799
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nGets the n-1 dimension diagonal from the n dimension tensor.\n"
  example: []
  syntax:
    content: public Tensor<T> GetDiagonal()
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: An n-1 dimension tensor with the values from the main diagonal of this tensor.
    content.vb: Public Function GetDiagonal As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal*
  nameWithType.vb: Tensor(Of T).GetDiagonal()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal(System.Int32)
  id: GetDiagonal(System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: GetDiagonal(Int32)
  nameWithType: Tensor<T>.GetDiagonal(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal(System.Int32)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetDiagonal
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 809
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nGets the n-1 dimension diagonal from the n dimension tensor at the specified offset from center.\n"
  example: []
  syntax:
    content: public Tensor<T> GetDiagonal(int offset)
    parameters:
    - id: offset
      type: System.Int32
      description: Offset of diagonal to set in returned tensor.  0 for the main diagonal, less than zero for diagonals below, greater than zero from diagonals above.
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: An n-1 dimension tensor with the values from the specified diagonal of this tensor.
    content.vb: Public Function GetDiagonal(offset As Integer) As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal*
  nameWithType.vb: Tensor(Of T).GetDiagonal(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal(System.Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
  id: GetTriangle
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: GetTriangle()
  nameWithType: Tensor<T>.GetTriangle()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetTriangle
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 890
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nGets a tensor representing the elements below and including the diagonal, with the rest of the elements zero-ed.\n"
  example: []
  syntax:
    content: public Tensor<T> GetTriangle()
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: A tensor with the values from this tensor at and below the main diagonal and zeros elsewhere.
    content.vb: Public Function GetTriangle As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle*
  nameWithType.vb: Tensor(Of T).GetTriangle()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32)
  id: GetTriangle(System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: GetTriangle(Int32)
  nameWithType: Tensor<T>.GetTriangle(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle(System.Int32)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetTriangle
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 900
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nGets a tensor representing the elements below and including the specified diagonal, with the rest of the elements zero-ed.\n"
  example: []
  syntax:
    content: public Tensor<T> GetTriangle(int offset)
    parameters:
    - id: offset
      type: System.Int32
      description: Offset of diagonal to set in returned tensor.  0 for the main diagonal, less than zero for diagonals below, greater than zero from diagonals above.
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: A tensor with the values from this tensor at and below the specified diagonal and zeros elsewhere.
    content.vb: Public Function GetTriangle(offset As Integer) As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle*
  nameWithType.vb: Tensor(Of T).GetTriangle(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle(System.Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
  id: GetUpperTriangle
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: GetUpperTriangle()
  nameWithType: Tensor<T>.GetUpperTriangle()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetUpperTriangle
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 909
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nGets a tensor representing the elements above and including the diagonal, with the rest of the elements zero-ed.\n"
  example: []
  syntax:
    content: public Tensor<T> GetUpperTriangle()
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: A tensor with the values from this tensor at and above the main diagonal and zeros elsewhere.
    content.vb: Public Function GetUpperTriangle As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle*
  nameWithType.vb: Tensor(Of T).GetUpperTriangle()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle(System.Int32)
  id: GetUpperTriangle(System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: GetUpperTriangle(Int32)
  nameWithType: Tensor<T>.GetUpperTriangle(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle(System.Int32)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetUpperTriangle
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 919
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nGets a tensor representing the elements above and including the specified diagonal, with the rest of the elements zero-ed.\n"
  example: []
  syntax:
    content: public Tensor<T> GetUpperTriangle(int offset)
    parameters:
    - id: offset
      type: System.Int32
      description: Offset of diagonal to set in returned tensor.  0 for the main diagonal, less than zero for diagonals below, greater than zero from diagonals above.
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: A tensor with the values from this tensor at and above the specified diagonal and zeros elsewhere.
    content.vb: Public Function GetUpperTriangle(offset As Integer) As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle*
  nameWithType.vb: Tensor(Of T).GetUpperTriangle(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle(System.Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32,System.Boolean)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32,System.Boolean)
  id: GetTriangle(System.Int32,System.Boolean)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: GetTriangle(Int32, Boolean)
  nameWithType: Tensor<T>.GetTriangle(Int32, Boolean)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle(System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetTriangle
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 930
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nImplementation method for GetTriangle, GetLowerTriangle, GetUpperTriangle\n"
  example: []
  syntax:
    content: public Tensor<T> GetTriangle(int offset, bool upper)
    parameters:
    - id: offset
      type: System.Int32
      description: Offset of diagonal to set in returned tensor.
    - id: upper
      type: System.Boolean
      description: true for upper triangular and false otherwise
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: ''
    content.vb: Public Function GetTriangle(offset As Integer, upper As Boolean) As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle*
  nameWithType.vb: Tensor(Of T).GetTriangle(Int32, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle(System.Int32, System.Boolean)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape(System.ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape(System.ReadOnlySpan{System.Int32})
  id: Reshape(System.ReadOnlySpan{System.Int32})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Reshape(ReadOnlySpan<Int32>)
  nameWithType: Tensor<T>.Reshape(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Reshape(System.ReadOnlySpan<System.Int32>)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Reshape
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1016
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nReshapes the current tensor to new dimensions, using the same backing storage if possible.\n"
  example: []
  syntax:
    content: public abstract Tensor<T> Reshape(ReadOnlySpan<int> dimensions)
    parameters:
    - id: dimensions
      type: System.ReadOnlySpan{System.Int32}
      description: An span of integers that represent the size of each dimension of the Tensor to create.
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: A new tensor that reinterprets this tensor with different dimensions.
    content.vb: Public MustOverride Function Reshape(dimensions As ReadOnlySpan(Of Integer)) As Tensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape*
  nameWithType.vb: Tensor(Of T).Reshape(ReadOnlySpan(Of Int32))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Reshape(System.ReadOnlySpan(Of System.Int32))
  name.vb: Reshape(ReadOnlySpan(Of Int32))
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.Int32[])
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.Int32[])
  id: Item(System.Int32[])
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Item[Int32[]]
  nameWithType: Tensor<T>.Item[Int32[]]
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item[System.Int32[]]
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: this[]
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1023
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nObtains the value at the specified indices\n"
  example: []
  syntax:
    content: public virtual T this[params int[] indices] { get; set; }
    parameters:
    - id: indices
      type: System.Int32[]
      description: A one-dimensional array of integers that represent the indices specifying the position of the element to get.
    return:
      type: '{T}'
      description: The value at the specified position in this Tensor.
    content.vb: Public Overridable Property Item(ParamArray indices As Integer()) As T
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item*
  nameWithType.vb: Tensor(Of T).Item(Int32())
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item(System.Int32())
  name.vb: Item(Int32())
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.ReadOnlySpan{System.Int32})
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.ReadOnlySpan{System.Int32})
  id: Item(System.ReadOnlySpan{System.Int32})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Item[ReadOnlySpan<Int32>]
  nameWithType: Tensor<T>.Item[ReadOnlySpan<Int32>]
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item[System.ReadOnlySpan<System.Int32>]
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: this[]
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1051
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nObtains the value at the specified indices\n"
  example: []
  syntax:
    content: public virtual T this[ReadOnlySpan<int> indices] { get; set; }
    parameters:
    - id: indices
      type: System.ReadOnlySpan{System.Int32}
      description: A span integers that represent the indices specifying the position of the element to get.
    return:
      type: '{T}'
      description: The value at the specified position in this Tensor.
    content.vb: Public Overridable Property Item(indices As ReadOnlySpan(Of Integer)) As T
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item*
  nameWithType.vb: Tensor(Of T).Item(ReadOnlySpan(Of Int32))
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item(System.ReadOnlySpan(Of System.Int32))
  name.vb: Item(ReadOnlySpan(Of Int32))
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: GetValue(Int32)
  nameWithType: Tensor<T>.GetValue(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetValue(System.Int32)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetValue
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1069
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nGets the value at the specied index, where index is a linearized version of n-dimension indices using strides.\n"
  example: []
  syntax:
    content: public abstract T GetValue(int index)
    parameters:
    - id: index
      type: System.Int32
      description: An integer index computed as a dot-product of indices.
    return:
      type: '{T}'
      description: The value at the specified position in this Tensor.
    content.vb: Public MustOverride Function GetValue(index As Integer) As T
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue*
  nameWithType.vb: Tensor(Of T).GetValue(Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetValue(System.Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue(System.Int32,`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue(System.Int32,`0)
  id: SetValue(System.Int32,`0)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: SetValue(Int32, T)
  nameWithType: Tensor<T>.SetValue(Int32, T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.SetValue(System.Int32, T)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: SetValue
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1076
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nSets the value at the specied index, where index is a linearized version of n-dimension indices using strides.\n"
  example: []
  syntax:
    content: public abstract void SetValue(int index, T value)
    parameters:
    - id: index
      type: System.Int32
      description: An integer index computed as a dot-product of indices.
    - id: value
      type: '{T}'
      description: The new value to set at the specified position in this Tensor.
    content.vb: Public MustOverride Sub SetValue(index As Integer, value As T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue*
  nameWithType.vb: Tensor(Of T).SetValue(Int32, T)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).SetValue(System.Int32, T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  id: Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Compare(Tensor<T>, Tensor<T>)
  nameWithType: Tensor<T>.Compare(Tensor<T>, Tensor<T>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>, Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Compare
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1086
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nPerforms a value comparison of the content and shape of two tensors.  Two tensors are equal if they have the same shape and same value at every set of indices.  If not equal a tensor is greater or less than another tensor based on the first non-equal element when enumerating in linear order.\n"
  example: []
  syntax:
    content: public static int Compare(Tensor<T> left, Tensor<T> right)
    parameters:
    - id: left
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: ''
    - id: right
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function Compare(left As Tensor(Of T), right As Tensor(Of T)) As Integer
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare*
  nameWithType.vb: Tensor(Of T).Compare(Tensor(Of T), Tensor(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T), Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T))
  name.vb: Compare(Tensor(Of T), Tensor(Of T))
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  id: Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Equals(Tensor<T>, Tensor<T>)
  nameWithType: Tensor<T>.Equals(Tensor<T>, Tensor<T>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>, Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Equals
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1097
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nPerforms a value equality comparison of the content of two tensors. Two tensors are equal if they have the same shape and same value at every set of indices.\n"
  example: []
  syntax:
    content: public static bool Equals(Tensor<T> left, Tensor<T> right)
    parameters:
    - id: left
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: ''
    - id: right
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function Equals(left As Tensor(Of T), right As Tensor(Of T)) As Boolean
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals*
  nameWithType.vb: Tensor(Of T).Equals(Tensor(Of T), Tensor(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T), Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T))
  name.vb: Equals(Tensor(Of T), Tensor(Of T))
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Tensor<T>.IEnumerable.GetEnumerator()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1104
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Tensor(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#Count
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ICollection.Count
  nameWithType: Tensor<T>.ICollection.Count
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.ICollection.Count
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.ICollection.Count
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1111
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: int ICollection.Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.Count As Integer Implements ICollection.Count
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#Count*
  implements:
  - System.Collections.ICollection.Count
  nameWithType.vb: Tensor(Of T).System.Collections.ICollection.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.ICollection.Count
  name.vb: System.Collections.ICollection.Count
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#IsSynchronized
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  nameWithType: Tensor<T>.ICollection.IsSynchronized
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.ICollection.IsSynchronized
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1113
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#IsSynchronized*
  implements:
  - System.Collections.ICollection.IsSynchronized
  nameWithType.vb: Tensor(Of T).System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#SyncRoot
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  nameWithType: Tensor<T>.ICollection.SyncRoot
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.ICollection.SyncRoot
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1115
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: object ICollection.SyncRoot { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#SyncRoot*
  implements:
  - System.Collections.ICollection.SyncRoot
  nameWithType.vb: Tensor(Of T).System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: Tensor<T>.ICollection.CopyTo(Array, Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.ICollection.CopyTo
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1117
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#CopyTo*
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  nameWithType.vb: Tensor(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Item(System.Int32)
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  nameWithType: Tensor<T>.IList.Item[Int32]
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IList.this[]
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1147
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: object IList.this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this[]
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Item*
  implements:
  - System.Collections.IList.Item(System.Int32)
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsFixedSize
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsFixedSize
  id: IsFixedSize
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IsFixedSize
  nameWithType: Tensor<T>.IsFixedSize
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsFixedSize
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: IsFixedSize
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1170
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nAlways fixed size Tensor\n"
  example: []
  syntax:
    content: public bool IsFixedSize { get; }
    parameters: []
    return:
      type: System.Boolean
      description: always true
    content.vb: Public ReadOnly Property IsFixedSize As Boolean
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsFixedSize*
  implements:
  - System.Collections.IList.IsFixedSize
  nameWithType.vb: Tensor(Of T).IsFixedSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsFixedSize
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReadOnly
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: Tensor<T>.IsReadOnly
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: IsReadOnly
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1176
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nTensor is not readonly\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
      description: always false
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReadOnly*
  implements:
  - System.Collections.IList.IsReadOnly
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: Tensor(Of T).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsReadOnly
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Add(System.Object)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  nameWithType: Tensor<T>.IList.Add(Object)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IList.Add
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1178
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: int IList.Add(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Add*
  implements:
  - System.Collections.IList.Add(System.Object)
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Add(Object)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Clear
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList.Clear()
  nameWithType: Tensor<T>.IList.Clear()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Clear()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IList.Clear
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1183
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: void IList.Clear()
    content.vb: Sub System.Collections.IList.Clear Implements IList.Clear
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Clear*
  implements:
  - System.Collections.IList.Clear
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Clear()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Clear()
  name.vb: System.Collections.IList.Clear()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Contains(System.Object)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  nameWithType: Tensor<T>.IList.Contains(Object)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IList.Contains
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1188
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: bool IList.Contains(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Contains*
  implements:
  - System.Collections.IList.Contains(System.Object)
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  nameWithType: Tensor<T>.IList.IndexOf(Object)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IList.IndexOf
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1197
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: int IList.IndexOf(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#IndexOf*
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: Tensor(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  nameWithType: Tensor<T>.IList.Insert(Int32, Object)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IList.Insert
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1206
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: void IList.Insert(int index, object value)
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Insert*
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Remove(System.Object)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  nameWithType: Tensor<T>.IList.Remove(Object)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IList.Remove
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1211
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: void IList.Remove(object value)
    parameters:
    - id: value
      type: System.Object
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Remove*
  implements:
  - System.Collections.IList.Remove(System.Object)
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList.RemoveAt(Int32)
  nameWithType: Tensor<T>.IList.RemoveAt(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IList.RemoveAt
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1216
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: void IList.RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Sub System.Collections.IList.RemoveAt(index As Integer) Implements IList.RemoveAt
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#RemoveAt*
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  nameWithType.vb: Tensor(Of T).System.Collections.IList.RemoveAt(Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: Tensor<T>.IEnumerable<T>.GetEnumerator()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1223
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Count
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Count
  id: System#Collections#Generic#ICollection{T}#Count
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Count
  nameWithType: Tensor<T>.ICollection<T>.Count
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.Count
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.ICollection<T>.Count
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1233
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: int ICollection<T>.Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.Count As Integer Implements ICollection(Of T).Count
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.Count
  name.vb: System.Collections.Generic.ICollection<T>.Count
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  nameWithType: Tensor<T>.ICollection<T>.Add(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1235
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Clear()
  nameWithType: Tensor<T>.ICollection<T>.Clear()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.ICollection<T>.Clear
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1240
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: void ICollection<T>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.Clear()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  id: System#Collections#Generic#ICollection{T}#Contains(`0)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Contains(T)
  nameWithType: Tensor<T>.ICollection<T>.Contains(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.ICollection<T>.Contains
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1245
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: bool ICollection<T>.Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<T>.Contains(item As T) As Boolean Implements ICollection(Of T).Contains
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.Contains(T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.Contains(T)
  name.vb: System.Collections.Generic.ICollection<T>.Contains(T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains(`0)
  id: Contains(`0)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: Tensor<T>.Contains(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Contains(T)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: Contains
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1259
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nDetermines whether an element is in the Tensor&lt;T>.\n"
  example: []
  syntax:
    content: protected virtual bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
      description: "\nThe object to locate in the Tensor&lt;T>. The value can be null for reference types.\n"
    return:
      type: System.Boolean
      description: "\ntrue if item is found in the Tensor&lt;T>; otherwise, false.\n"
    content.vb: Protected Overridable Function Contains(item As T) As Boolean
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains*
  nameWithType.vb: Tensor(Of T).Contains(T)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Contains(T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  id: System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.CopyTo(T[], Int32)
  nameWithType: Tensor<T>.ICollection<T>.CopyTo(T[], Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.ICollection<T>.CopyTo
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1264
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: void ICollection<T>.CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Sub System.Collections.Generic.ICollection<T>.CopyTo(array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo(`0[],System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: Tensor<T>.CopyTo(T[], Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: CopyTo
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1278
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nCopies the elements of the Tensor&lt;T> to an Array, starting at a particular Array index.\n"
  example: []
  syntax:
    content: protected virtual void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\nThe one-dimensional Array that is the destination of the elements copied from Tensor&lt;T>. The Array must have zero-based indexing.\n"
    - id: arrayIndex
      type: System.Int32
      description: "\nThe zero-based index in array at which copying begins.\n"
    content.vb: Protected Overridable Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo*
  nameWithType.vb: Tensor(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Remove(T)
  nameWithType: Tensor<T>.ICollection<T>.Remove(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.ICollection<T>.Remove
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1295
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: bool ICollection<T>.Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(item As T) As Boolean Implements ICollection(Of T).Remove
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyCollection{T}#Count
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyCollection{T}#Count
  id: System#Collections#Generic#IReadOnlyCollection{T}#Count
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IReadOnlyCollection<T>.Count
  nameWithType: Tensor<T>.IReadOnlyCollection<T>.Count
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IReadOnlyCollection<T>.Count
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.IReadOnlyCollection<T>.Count
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1303
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: int IReadOnlyCollection<T>.Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyCollection<T>.Count As Integer Implements IReadOnlyCollection(Of T).Count
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyCollection{T}#Count*
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IReadOnlyCollection<T>.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IReadOnlyCollection<T>.Count
  name.vb: System.Collections.Generic.IReadOnlyCollection<T>.Count
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList<T>.Item[Int32]
  nameWithType: Tensor<T>.IList<T>.Item[Int32]
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.IList<T>.this[]
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1308
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: T IList<T>.this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<T>.Item(index As Integer) As T Implements IList(Of T).this[]
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Item*
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IList<T>.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.Item(Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  id: System#Collections#Generic#IList{T}#IndexOf(`0)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList<T>.IndexOf(T)
  nameWithType: Tensor<T>.IList<T>.IndexOf(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IList<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.IList<T>.IndexOf
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1314
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: int IList<T>.IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
    content.vb: Function System.Collections.Generic.IList<T>.IndexOf(item As T) As Integer Implements IList(Of T).IndexOf
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#IndexOf*
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IList<T>.IndexOf(T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IList<T>.IndexOf(T)
  name.vb: System.Collections.Generic.IList<T>.IndexOf(T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: Tensor<T>.IndexOf(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: IndexOf
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1324
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nDetermines the index of a specific item in the Tensor&lt;T>.\n"
  example: []
  syntax:
    content: protected virtual int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the Tensor&lt;T>.
    return:
      type: System.Int32
      description: The index of item if found in the tensor; otherwise, -1.
    content.vb: Protected Overridable Function IndexOf(item As T) As Integer
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf*
  nameWithType.vb: Tensor(Of T).IndexOf(T)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IndexOf(T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList<T>.Insert(Int32, T)
  nameWithType: Tensor<T>.IList<T>.Insert(Int32, T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.IList<T>.Insert
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1337
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: void IList<T>.Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{T}'
    content.vb: Sub System.Collections.Generic.IList<T>.Insert(index As Integer, item As T) Implements IList(Of T).Insert
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Insert*
  implements:
  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IList<T>.Insert(Int32, T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IList<T>.RemoveAt(Int32)
  nameWithType: Tensor<T>.IList<T>.RemoveAt(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.IList<T>.RemoveAt
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1342
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: void IList<T>.RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Sub System.Collections.Generic.IList<T>.RemoveAt(index As Integer) Implements IList(Of T).RemoveAt
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#RemoveAt*
  implements:
  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IList<T>.RemoveAt(Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  id: System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IReadOnlyList<T>.Item[Int32]
  nameWithType: Tensor<T>.IReadOnlyList<T>.Item[Int32]
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.Generic.IReadOnlyList<T>.this[]
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1350
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: T IReadOnlyList<T>.this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyList<T>.Item(index As Integer) As T Implements IReadOnlyList(Of T).this[]
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyList{T}#Item*
  implements:
  - System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IReadOnlyList<T>.Item(Int32)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IReadOnlyList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IReadOnlyList<T>.Item(Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IStructuralComparable.CompareTo(Object, IComparer)
  nameWithType: Tensor<T>.IStructuralComparable.CompareTo(Object, IComparer)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IStructuralComparable.CompareTo
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1355
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)
    parameters:
    - id: other
      type: System.Object
    - id: comparer
      type: System.Collections.IComparer
    return:
      type: System.Int32
    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralComparable#CompareTo*
  implements:
  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  nameWithType.vb: Tensor(Of T).System.Collections.IStructuralComparable.CompareTo(Object, IComparer)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  nameWithType: Tensor<T>.IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IStructuralEquatable.Equals
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1457
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
    parameters:
    - id: other
      type: System.Object
    - id: comparer
      type: System.Collections.IEqualityComparer
    return:
      type: System.Boolean
    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#Equals*
  implements:
  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  nameWithType.vb: Tensor(Of T).System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Tensor<T>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: System.Collections.IStructuralEquatable.GetHashCode
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1550
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  syntax:
    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
    return:
      type: System.Int32
    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#GetHashCode*
  implements:
  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  nameWithType.vb: Tensor(Of T).System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
  id: ToDenseTensor
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: ToDenseTensor()
  nameWithType: Tensor<T>.ToDenseTensor()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.ToDenseTensor()
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: ToDenseTensor
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1570
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nCreates a copy of this tensor as a DenseTensor&lt;T>.  If this tensor is already a DenseTensor&lt;T> calling this method is equivalent to calling Clone().\n"
  example: []
  syntax:
    content: public virtual DenseTensor<T> ToDenseTensor()
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor{{T}}
      description: ''
    content.vb: Public Overridable Function ToDenseTensor As DenseTensor(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor*
  nameWithType.vb: Tensor(Of T).ToDenseTensor()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).ToDenseTensor()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString(System.Boolean)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString(System.Boolean)
  id: GetArrayString(System.Boolean)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  langs:
  - csharp
  - vb
  name: GetArrayString(Boolean)
  nameWithType: Tensor<T>.GetArrayString(Boolean)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetArrayString(System.Boolean)
  type: Method
  source:
    remote:
      path: csharp/src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
      branch: csharp-docs
      repo: https://github.com/cassiebreviu/onnxruntime.git
    id: GetArrayString
    path: ../src/Microsoft.ML.OnnxRuntime/Tensors/Tensor.shared.cs
    startLine: 1587
  assemblies:
  - Microsoft.ML.OnnxRuntime
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nGet a string representation of Tensor\n"
  example: []
  syntax:
    content: public string GetArrayString(bool includeWhitespace = true)
    parameters:
    - id: includeWhitespace
      type: System.Boolean
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetArrayString(includeWhitespace As Boolean = True) As String
  overload: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString*
  nameWithType.vb: Tensor(Of T).GetArrayString(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetArrayString(System.Boolean)
references:
- uid: Microsoft.ML.OnnxRuntime.Tensors
  commentId: N:Microsoft.ML.OnnxRuntime.Tensors
  name: Microsoft.ML.OnnxRuntime.Tensors
  nameWithType: Microsoft.ML.OnnxRuntime.Tensors
  fullName: Microsoft.ML.OnnxRuntime.Tensors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  parent: Microsoft.ML.OnnxRuntime.Tensors
  name: TensorBase
  nameWithType: TensorBase
  fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  commentId: T:System.Collections.Generic.IReadOnlyList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IStructuralComparable
  commentId: T:System.Collections.IStructuralComparable
  parent: System.Collections
  isExternal: true
  name: IStructuralComparable
  nameWithType: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
- uid: System.Collections.IStructuralEquatable
  commentId: T:System.Collections.IStructuralEquatable
  parent: System.Collections
  isExternal: true
  name: IStructuralEquatable
  nameWithType: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
- uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(System.Type)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(System.Type)
  parent: Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  isExternal: true
  name: GetTypeInfo(Type)
  nameWithType: TensorBase.GetTypeInfo(Type)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(System.Type)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(System.Type)
    name: GetTypeInfo
    nameWithType: TensorBase.GetTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(System.Type)
    name: GetTypeInfo
    nameWithType: TensorBase.GetTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
  parent: Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  name: GetElementTypeInfo(TensorElementType)
  nameWithType: TensorBase.GetElementTypeInfo(TensorElementType)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
    name: GetElementTypeInfo
    nameWithType: TensorBase.GetElementTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
    name: TensorElementType
    nameWithType: TensorElementType
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
    name: GetElementTypeInfo
    nameWithType: TensorBase.GetElementTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
    name: TensorElementType
    nameWithType: TensorElementType
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  parent: Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  name: GetTypeInfo()
  nameWithType: TensorBase.GetTypeInfo()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
    name: GetTypeInfo
    nameWithType: TensorBase.GetTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
    name: GetTypeInfo
    nameWithType: TensorBase.GetTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.#ctor
  name: Tensor
  nameWithType: Tensor<T>.Tensor
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Tensor
  nameWithType.vb: Tensor(Of T).Tensor
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Tensor
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ReadOnlySpan{System.Int32}
  commentId: T:System.ReadOnlySpan{System.Int32}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Int32>
  nameWithType: ReadOnlySpan<Int32>
  fullName: System.ReadOnlySpan<System.Int32>
  nameWithType.vb: ReadOnlySpan(Of Int32)
  fullName.vb: System.ReadOnlySpan(Of System.Int32)
  name.vb: ReadOnlySpan(Of Int32)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Length*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Length
  name: Length
  nameWithType: Tensor<T>.Length
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Length
  nameWithType.vb: Tensor(Of T).Length
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Length
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Rank*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Rank
  name: Rank
  nameWithType: Tensor<T>.Rank
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Rank
  nameWithType.vb: Tensor(Of T).Rank
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Rank
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReversedStride*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReversedStride
  name: IsReversedStride
  nameWithType: Tensor<T>.IsReversedStride
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsReversedStride
  nameWithType.vb: Tensor(Of T).IsReversedStride
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsReversedStride
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Dimensions*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Dimensions
  name: Dimensions
  nameWithType: Tensor<T>.Dimensions
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Dimensions
  nameWithType.vb: Tensor(Of T).Dimensions
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Dimensions
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Strides*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Strides
  name: Strides
  nameWithType: Tensor<T>.Strides
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Strides
  nameWithType.vb: Tensor(Of T).Strides
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Strides
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill
  name: Fill
  nameWithType: Tensor<T>.Fill
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Fill
  nameWithType.vb: Tensor(Of T).Fill
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Fill
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
  name: Clone
  nameWithType: Tensor<T>.Clone
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Clone
  nameWithType.vb: Tensor(Of T).Clone
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Clone
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  parent: Microsoft.ML.OnnxRuntime.Tensors
  name: Tensor<T>
  nameWithType: Tensor<T>
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>
  nameWithType.vb: Tensor(Of T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T)
  name.vb: Tensor(Of T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
  name: CloneEmpty
  nameWithType: Tensor<T>.CloneEmpty
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty
  nameWithType.vb: Tensor(Of T).CloneEmpty
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{TResult}}
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.Tensor{``0}
  parent: Microsoft.ML.OnnxRuntime.Tensors
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  name: Tensor<TResult>
  nameWithType: Tensor<TResult>
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<TResult>
  nameWithType.vb: Tensor(Of TResult)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of TResult)
  name.vb: Tensor(Of TResult)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
  name: GetDiagonal
  nameWithType: Tensor<T>.GetDiagonal
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal
  nameWithType.vb: Tensor(Of T).GetDiagonal
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
  name: GetTriangle
  nameWithType: Tensor<T>.GetTriangle
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle
  nameWithType.vb: Tensor(Of T).GetTriangle
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
  name: GetUpperTriangle
  nameWithType: Tensor<T>.GetUpperTriangle
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle
  nameWithType.vb: Tensor(Of T).GetUpperTriangle
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape
  name: Reshape
  nameWithType: Tensor<T>.Reshape
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Reshape
  nameWithType.vb: Tensor(Of T).Reshape
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Reshape
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item
  name: Item
  nameWithType: Tensor<T>.Item
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item
  nameWithType.vb: Tensor(Of T).Item
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue
  name: GetValue
  nameWithType: Tensor<T>.GetValue
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetValue
  nameWithType.vb: Tensor(Of T).GetValue
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetValue
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue
  name: SetValue
  nameWithType: Tensor<T>.SetValue
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.SetValue
  nameWithType.vb: Tensor(Of T).SetValue
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).SetValue
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare
  name: Compare
  nameWithType: Tensor<T>.Compare
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Compare
  nameWithType.vb: Tensor(Of T).Compare
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Compare
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals
  name: Equals
  nameWithType: Tensor<T>.Equals
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Equals
  nameWithType.vb: Tensor(Of T).Equals
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Equals
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: Tensor<T>.IEnumerable.GetEnumerator
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Tensor(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#Count*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#Count
  name: ICollection.Count
  nameWithType: Tensor<T>.ICollection.Count
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.ICollection.Count
  nameWithType.vb: Tensor(Of T).System.Collections.ICollection.Count
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.ICollection.Count
  name.vb: System.Collections.ICollection.Count
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: true
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#IsSynchronized*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: Tensor<T>.ICollection.IsSynchronized
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: Tensor(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: true
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#SyncRoot*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: Tensor<T>.ICollection.SyncRoot
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: Tensor(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: true
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#CopyTo*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#ICollection#CopyTo
  name: ICollection.CopyTo
  nameWithType: Tensor<T>.ICollection.CopyTo
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.ICollection.CopyTo
  nameWithType.vb: Tensor(Of T).System.Collections.ICollection.CopyTo
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.ICollection.CopyTo
  name.vb: System.Collections.ICollection.CopyTo
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Item*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Item
  name: IList.Item
  nameWithType: Tensor<T>.IList.Item
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Item
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Item
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Item
  name.vb: System.Collections.IList.Item
- uid: System.Collections.IList.Item(System.Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  nameWithType: IList.Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  nameWithType.vb: IList.Item(Int32)
  fullName.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsFixedSize*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsFixedSize
  name: IsFixedSize
  nameWithType: Tensor<T>.IsFixedSize
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsFixedSize
  nameWithType.vb: Tensor(Of T).IsFixedSize
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsFixedSize
- uid: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: true
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReadOnly*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReadOnly
  name: IsReadOnly
  nameWithType: Tensor<T>.IsReadOnly
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsReadOnly
  nameWithType.vb: Tensor(Of T).IsReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsReadOnly
- uid: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: true
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Add*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Add
  name: IList.Add
  nameWithType: Tensor<T>.IList.Add
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Add
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Add
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Add
  name.vb: System.Collections.IList.Add
- uid: System.Collections.IList.Add(System.Object)
  commentId: M:System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Clear*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Clear
  name: IList.Clear
  nameWithType: Tensor<T>.IList.Clear
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Clear
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Clear
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Clear
  name.vb: System.Collections.IList.Clear
- uid: System.Collections.IList.Clear
  commentId: M:System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: true
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Contains*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Contains
  name: IList.Contains
  nameWithType: Tensor<T>.IList.Contains
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Contains
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Contains
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Contains
  name.vb: System.Collections.IList.Contains
- uid: System.Collections.IList.Contains(System.Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#IndexOf*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#IndexOf
  name: IList.IndexOf
  nameWithType: Tensor<T>.IList.IndexOf
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.IndexOf
  nameWithType.vb: Tensor(Of T).System.Collections.IList.IndexOf
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.IndexOf
  name.vb: System.Collections.IList.IndexOf
- uid: System.Collections.IList.IndexOf(System.Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Insert*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Insert
  name: IList.Insert
  nameWithType: Tensor<T>.IList.Insert
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Insert
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Insert
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Insert
  name.vb: System.Collections.IList.Insert
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  nameWithType: IList.Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Remove*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#Remove
  name: IList.Remove
  nameWithType: Tensor<T>.IList.Remove
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.Remove
  nameWithType.vb: Tensor(Of T).System.Collections.IList.Remove
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.Remove
  name.vb: System.Collections.IList.Remove
- uid: System.Collections.IList.Remove(System.Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#RemoveAt*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IList#RemoveAt
  name: IList.RemoveAt
  nameWithType: Tensor<T>.IList.RemoveAt
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IList.RemoveAt
  nameWithType.vb: Tensor(Of T).System.Collections.IList.RemoveAt
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IList.RemoveAt
  name.vb: System.Collections.IList.RemoveAt
- uid: System.Collections.IList.RemoveAt(System.Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<T>.GetEnumerator
  nameWithType: Tensor<T>.IEnumerable<T>.GetEnumerator
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Count*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Count
  name: ICollection<T>.Count
  nameWithType: Tensor<T>.ICollection<T>.Count
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.Count
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.Count
  name.vb: System.Collections.Generic.ICollection<T>.Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Add*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Add
  name: ICollection<T>.Add
  nameWithType: Tensor<T>.ICollection<T>.Add
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.Add
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.Add
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.Add
  name.vb: System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Clear*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Clear
  name: ICollection<T>.Clear
  nameWithType: Tensor<T>.ICollection<T>.Clear
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.Clear
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.Clear
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.Clear
  name.vb: System.Collections.Generic.ICollection<T>.Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Contains*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Contains
  name: ICollection<T>.Contains
  nameWithType: Tensor<T>.ICollection<T>.Contains
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.Contains
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.Contains
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.Contains
  name.vb: System.Collections.Generic.ICollection<T>.Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains
  name: Contains
  nameWithType: Tensor<T>.Contains
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Contains
  nameWithType.vb: Tensor(Of T).Contains
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Contains
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#CopyTo*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#CopyTo
  name: ICollection<T>.CopyTo
  nameWithType: Tensor<T>.ICollection<T>.CopyTo
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.CopyTo
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.CopyTo
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.CopyTo
  name.vb: System.Collections.Generic.ICollection<T>.CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo
  name: CopyTo
  nameWithType: Tensor<T>.CopyTo
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CopyTo
  nameWithType.vb: Tensor(Of T).CopyTo
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CopyTo
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Remove*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#ICollection{T}#Remove
  name: ICollection<T>.Remove
  nameWithType: Tensor<T>.ICollection<T>.Remove
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.ICollection<T>.Remove
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.ICollection<T>.Remove
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.ICollection<T>.Remove
  name.vb: System.Collections.Generic.ICollection<T>.Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyCollection{T}#Count*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyCollection{T}#Count
  name: IReadOnlyCollection<T>.Count
  nameWithType: Tensor<T>.IReadOnlyCollection<T>.Count
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IReadOnlyCollection<T>.Count
  name.vb: System.Collections.Generic.IReadOnlyCollection<T>.Count
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection{`0}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  nameWithType: IReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection`1.Count
  isExternal: true
  name: Count
  nameWithType: IReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Item*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Item
  name: IList<T>.Item
  nameWithType: Tensor<T>.IList<T>.Item
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IList<T>.Item
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IList<T>.Item
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IList<T>.Item
  name.vb: System.Collections.Generic.IList<T>.Item
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#IndexOf*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#IndexOf
  name: IList<T>.IndexOf
  nameWithType: Tensor<T>.IList<T>.IndexOf
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IList<T>.IndexOf
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IList<T>.IndexOf
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IList<T>.IndexOf
  name.vb: System.Collections.Generic.IList<T>.IndexOf
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf
  name: IndexOf
  nameWithType: Tensor<T>.IndexOf
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IndexOf
  nameWithType.vb: Tensor(Of T).IndexOf
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IndexOf
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Insert*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#Insert
  name: IList<T>.Insert
  nameWithType: Tensor<T>.IList<T>.Insert
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IList<T>.Insert
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IList<T>.Insert
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IList<T>.Insert
  name.vb: System.Collections.Generic.IList<T>.Insert
- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#RemoveAt*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IList{T}#RemoveAt
  name: IList<T>.RemoveAt
  nameWithType: Tensor<T>.IList<T>.RemoveAt
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IList<T>.RemoveAt
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IList<T>.RemoveAt
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IList<T>.RemoveAt
  name.vb: System.Collections.Generic.IList<T>.RemoveAt
- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyList{T}#Item*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#Generic#IReadOnlyList{T}#Item
  name: IReadOnlyList<T>.Item
  nameWithType: Tensor<T>.IReadOnlyList<T>.Item
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.Generic.IReadOnlyList<T>.Item
  nameWithType.vb: Tensor(Of T).System.Collections.Generic.IReadOnlyList<T>.Item
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.Generic.IReadOnlyList<T>.Item
  name.vb: System.Collections.Generic.IReadOnlyList<T>.Item
- uid: System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IReadOnlyList{`0}.Item(System.Int32)
  parent: System.Collections.Generic.IReadOnlyList{{T}}
  definition: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IReadOnlyList<T>.Item[Int32]
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  nameWithType.vb: IReadOnlyList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: IReadOnlyList<T>.Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: IReadOnlyList(Of T).Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IReadOnlyList<T>.Item[Int32]
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  nameWithType.vb: IReadOnlyList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: IReadOnlyList<T>.Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: IReadOnlyList(Of T).Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralComparable#CompareTo*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralComparable#CompareTo
  name: IStructuralComparable.CompareTo
  nameWithType: Tensor<T>.IStructuralComparable.CompareTo
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IStructuralComparable.CompareTo
  nameWithType.vb: Tensor(Of T).System.Collections.IStructuralComparable.CompareTo
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IStructuralComparable.CompareTo
  name.vb: System.Collections.IStructuralComparable.CompareTo
- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.IStructuralComparable
  isExternal: true
  name: CompareTo(Object, IComparer)
  nameWithType: IStructuralComparable.CompareTo(Object, IComparer)
  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    nameWithType: IStructuralComparable.CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.IComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    nameWithType: IStructuralComparable.CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.IComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IComparer
  commentId: T:System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#Equals*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#Equals
  name: IStructuralEquatable.Equals
  nameWithType: Tensor<T>.IStructuralEquatable.Equals
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IStructuralEquatable.Equals
  nameWithType.vb: Tensor(Of T).System.Collections.IStructuralEquatable.Equals
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IStructuralEquatable.Equals
  name.vb: System.Collections.IStructuralEquatable.Equals
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: true
  name: Equals(Object, IEqualityComparer)
  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    nameWithType: IStructuralEquatable.Equals
    fullName: System.Collections.IStructuralEquatable.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    nameWithType: IStructuralEquatable.Equals
    fullName: System.Collections.IStructuralEquatable.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEqualityComparer
  commentId: T:System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: true
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#GetHashCode*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.System#Collections#IStructuralEquatable#GetHashCode
  name: IStructuralEquatable.GetHashCode
  nameWithType: Tensor<T>.IStructuralEquatable.GetHashCode
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.System.Collections.IStructuralEquatable.GetHashCode
  nameWithType.vb: Tensor(Of T).System.Collections.IStructuralEquatable.GetHashCode
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).System.Collections.IStructuralEquatable.GetHashCode
  name.vb: System.Collections.IStructuralEquatable.GetHashCode
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: true
  name: GetHashCode(IEqualityComparer)
  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    nameWithType: IStructuralEquatable.GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    nameWithType: IStructuralEquatable.GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
  name: ToDenseTensor
  nameWithType: Tensor<T>.ToDenseTensor
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.ToDenseTensor
  nameWithType.vb: Tensor(Of T).ToDenseTensor
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).ToDenseTensor
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor{{T}}
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor{``0}
  parent: Microsoft.ML.OnnxRuntime.Tensors
  definition: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  name: DenseTensor<T>
  nameWithType: DenseTensor<T>
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>
  nameWithType.vb: DenseTensor(Of T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T)
  name.vb: DenseTensor(Of T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
    name: DenseTensor
    nameWithType: DenseTensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
    name: DenseTensor
    nameWithType: DenseTensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  name: DenseTensor<T>
  nameWithType: DenseTensor<T>
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>
  nameWithType.vb: DenseTensor(Of T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T)
  name.vb: DenseTensor(Of T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
    name: DenseTensor
    nameWithType: DenseTensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
    name: DenseTensor
    nameWithType: DenseTensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString
  name: GetArrayString
  nameWithType: Tensor<T>.GetArrayString
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetArrayString
  nameWithType.vb: Tensor(Of T).GetArrayString
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetArrayString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
