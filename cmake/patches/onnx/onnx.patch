diff --git a/CMakeLists.txt b/CMakeLists.txt
index 47995579..6cc439f6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -57,6 +57,7 @@ option(ONNX_USE_LITE_PROTO "Use lite protobuf instead of full." OFF)
 option(ONNX_DISABLE_EXCEPTIONS "Disable exception handling." OFF)
 option(ONNX_DISABLE_STATIC_REGISTRATION "Disable static registration for ONNX operator schemas." OFF)
 option(ONNX_USE_UNITY_BUILD "Enable Unity (Jumbo) build for" OFF)
+option(ONNX_MINIMAL_BUILD "Build only essential ONNX components" OFF)
 if(WIN32)
   option(ONNX_USE_MSVC_STATIC_RUNTIME "Build with MSVC static runtime" OFF)
 endif()
@@ -411,14 +412,28 @@ relative_protobuf_generate_cpp(ONNX_PROTO_SRCS
 
 add_library(onnx_proto ${ONNX_PROTO_SRCS})
 
-file(GLOB_RECURSE __tmp_srcs "${ONNX_ROOT}/onnx/*.h" "${ONNX_ROOT}/onnx/*.cc")
-file(GLOB_RECURSE onnx_gtests_src "${ONNX_ROOT}/onnx/test/cpp/*.h"
-    "${ONNX_ROOT}/onnx/test/cpp/*.cc"
-    "${ONNX_ROOT}/onnx/backend/test/cpp/*.cc"
-    "${ONNX_ROOT}/onnx/backend/test/cpp/*.h")
-list(REMOVE_ITEM __tmp_srcs "${ONNX_ROOT}/onnx/cpp2py_export.cc")
-list(REMOVE_ITEM __tmp_srcs ${onnx_gtests_src})
-list(APPEND ONNX_SRCS ${__tmp_srcs})
+if(ONNX_MINIMAL_BUILD)
+    message(STATUS "Configuring ONNX minimal build")
+    set(ONNX_SRCS
+      "${ONNX_ROOT}/onnx/common/common.h"
+      "${ONNX_ROOT}/onnx/defs/data_type_utils.h"
+      "${ONNX_ROOT}/onnx/defs/data_type_utils.cc"
+    )
+    # Ensure ONNX_ML is treated as ON for minimal build consistency with ORT's file
+    set(ONNX_ML ON CACHE BOOL "Enable traditional ML API." FORCE)
+    # Minimal build doesn't need Python or tests
+    set(ONNX_BUILD_PYTHON OFF CACHE BOOL "Build Python binaries" FORCE)
+    set(ONNX_BUILD_TESTS OFF CACHE BOOL "Build ONNX C++ APIs Tests" FORCE)
+else()
+    file(GLOB_RECURSE __tmp_srcs "${ONNX_ROOT}/onnx/*.h" "${ONNX_ROOT}/onnx/*.cc")
+    file(GLOB_RECURSE onnx_gtests_src "${ONNX_ROOT}/onnx/test/cpp/*.h"
+        "${ONNX_ROOT}/onnx/test/cpp/*.cc"
+        "${ONNX_ROOT}/onnx/backend/test/cpp/*.cc"
+        "${ONNX_ROOT}/onnx/backend/test/cpp/*.h")
+    list(REMOVE_ITEM __tmp_srcs "${ONNX_ROOT}/onnx/cpp2py_export.cc")
+    list(REMOVE_ITEM __tmp_srcs ${onnx_gtests_src})
+    list(APPEND ONNX_SRCS ${__tmp_srcs})
+endif()
 
 # Hide all symbols we don't need
 set_target_properties(onnx_proto PROPERTIES CXX_VISIBILITY_PRESET hidden)
@@ -440,19 +455,6 @@ add_onnx_global_defines(onnx_proto)
 target_include_directories(onnx_proto PUBLIC
   $<BUILD_INTERFACE:${ONNX_ROOT}>
   $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
-if(MSVC)
-  # For disabling Protobuf related warnings
-  target_compile_options(onnx_proto PUBLIC
-    /wd4146 # unary minus operator applied to unsigned type,
-            # result still unsigned
-    /wd4244 # 'argument': conversion from 'google::
-            # protobuf::uint64' to 'int', possible
-            # loss of data
-    /wd4267 # Conversion from 'size_t' to 'int',
-            # possible loss of data
-    /wd4141 # 'inline': used more than once
-  )
-endif()
 
 if(CMAKE_SYSTEM_NAME STREQUAL "AIX")
   # whole-archive linker option not available on AIX.
diff --git a/onnx/defs/nn/old.cc b/onnx/defs/nn/old.cc
index 40635f97..44770774 100644
--- a/onnx/defs/nn/old.cc
+++ b/onnx/defs/nn/old.cc
@@ -4090,7 +4090,6 @@ ONNX_OPERATOR_SET_SCHEMA(
     GroupNormalization,
     18,
     OpSchema()
-        .Deprecate()
         .SetDoc(GroupNormalization_ver18_doc)
         .Attr("epsilon", "The epsilon value to use to avoid division by zero.", AttributeProto::FLOAT, 1e-5f)
         .Attr(
diff --git a/onnx/defs/schema.h b/onnx/defs/schema.h
index ddd95454..34647987 100644
--- a/onnx/defs/schema.h
+++ b/onnx/defs/schema.h
@@ -999,7 +999,7 @@ class OpSchemaRegistry final : public ISchemaRegistry {
   class OpSchemaRegisterOnce final {
    public:
     // Export to cpp custom register macro
-    explicit OpSchemaRegisterOnce(
+    OpSchemaRegisterOnce(
         OpSchema op_schema,
         int opset_version_to_load = 0,
         bool fail_duplicate_schema = true) {
