name: "macOS CI Reusable Workflow for build and test"
description: "This is a reusable workflow for macOS CI pipelines to build and test"

on:
  workflow_call:
    inputs:
      use_webgpu:
        required: false
        type: boolean
        default: false
      use_xnnpack:
        required: false
        type: boolean
        default: false
      use_coreml:
        required: false
        type: boolean
        default: false
      python_version:
        required: false
        type: string
        default: "3.11"
      matrix_include:
        required: false
        type: string
        description: "JSON string specifying combinations to include in the matrix"
        # we do not have enough resources to run all combinations
        # Include arm64 + Debug combination by default
        default: >-
          [
            {"machine": "arm64", "target": "arm64", "build_config": "Debug"}
          ]

jobs:
  build-and-test:
    strategy:
      matrix:
        # To avoid creating too many jobs, we explicitly specify the combinations to run.
        #
        # # Specify the machine architecture to run the build on.
        # machine: ["x86_64", "arm64"]
        #
        # # Specify the target architecture for the build.
        # target: ["x86_64", "arm64"]
        #
        # # Specify the build configuration for the build.
        # build_config: ["Debug", "Release"]
        #
        include: ${{ fromJSON(inputs.matrix_include) }}

    # "macos-13" is a x86_64 image, and "macos-15" is an arm64 image.
    # see also: https://github.com/actions/runner-images/blob/main/README.md
    runs-on: ${{ matrix.machine == 'x86_64' && 'macos-13' || 'macos-15' }}
    env:
      build_flags: >
        --build_dir ./build
        --skip_submodule_sync
        --parallel
        --use_binskim_compliant_compile_flags
        --build_shared_lib
        --build_nodejs
        --build_objc
        --build_java
        --build_wheel
        ${{ inputs.use_webgpu && '--use_webgpu' || '' }}
        ${{ inputs.use_xnnpack && '--use_xnnpack' || '' }}
        ${{ inputs.use_coreml && '--use_coreml --skip_onnx_tests' || '' }}
        --use_vcpkg --use_vcpkg_ms_internal_asset_cache
        --config ${{ matrix.build_config }}
        --osx_arch ${{ matrix.target }}

      # xCode version needs to match the "runs-on" configuration.
      xcode_version: ${{ matrix.machine == 'x86_64' && '14.3.1' || '16' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: macOS CI pipeline prepare steps
        uses: ./.github/actions/macos-ci-setup
        with:
          platform_machine: ${{ matrix.machine }}
          python_version: ${{ inputs.python_version }}
          xcode_version: ${{ env.xcode_version }}
          use_cache: true

      - uses: actions/cache@v4
        id: onnx-node-tests-cache
        with:
          path: ${{ github.workspace }}/js/test/
          key: onnxnodetests-${{ hashFiles('js/scripts/prepare-onnx-node-tests.ts') }}

      - name: Setup environment variables
        shell: bash
        run: |
          set -e -x
          export PATH=${{ github.workspace }}/build/installed/bin:$PATH
          export ONNX_ML=1
          export CMAKE_ARGS="-DONNX_GEN_PB_TYPE_STUBS=ON -DONNX_WERROR=OFF"
          python -m pip install -r '${{ github.workspace }}/tools/ci_build/github/linux/docker/scripts/requirements.txt'

      - name: Configure Build (build.py --update)
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          rm -rf ${{ github.workspace }}/build/${{ matrix.build_config }}
          python ./tools/ci_build/build.py --update ${{ env.build_flags }}

      - name: Build (build.py --build)
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          python ./tools/ci_build/build.py --build ${{ env.build_flags }}

      - name: Install
        shell: bash
        run: |
          set -e -x
          rm -rf ${{ github.workspace }}/build/installed
          cd ${{ github.workspace }}/build/${{ matrix.build_config }}
          make install DESTDIR=${{ github.workspace }}/build/installed

      - name: Running Tests (build.py --test)
        # Skip tests when cross-compiling
        if: ${{ matrix.machine == matrix.target }}
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          python ./tools/ci_build/build.py --test ${{ env.build_flags }}
