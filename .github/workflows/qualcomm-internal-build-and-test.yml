# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: MIT

name: Qualcomm Internal Build & Test
on:
  workflow_call:
    inputs:
      do_all:
        type: boolean
        default: true
      do_linux_x86_64:
        type: boolean
        default: false
      do_windows_arm64:
        type: boolean
        default: false
      # If true, build with NIGHTLY_BUILD=1, etc. to enable --nightly_build
      nightly_build:
        type: boolean
        default: true
      # Cross-compiling from X64 to ARM64 is faster with our runners, but cannot produce a wheel.
      windows_arm64_runner_arch:
        type: string
        default: "X64"
      target_py_vsn:
        default: "3.12"
        type: string

env:
  ORT_NIGHTLY_BUILD: "${{ inputs.nightly_build == true && '1' || '0' }}"

jobs:

  build-android-aarch64:
    if: ${{ inputs.do_all }}
    runs-on: ["self-hosted", "X64", "Linux", "Build"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Build Android
        run: |
          python3 qcom/build_and_test.py archive_ort_android_aarch64

      - uses: actions/upload-artifact@v3
        with:
          name: ORT Android Tests
          path: |
            ${{ github.workspace }}/build/onnxruntime-tests-android-aarch64.zip

  build-linux-x86_64:
    if: ${{ inputs.do_all || inputs.do_linux_x86_64 }}
    runs-on: ["self-hosted", "X64", "Linux", "Build"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Build Linux x86_64
        run: |
          python3 qcom/build_and_test.py archive_ort_linux_x86_64

      - uses: actions/upload-artifact@v3
        with:
          name: ORT Linux x86_64 Tests
          path: |
            ${{ github.workspace }}/build/onnxruntime-tests-linux-x86_64.tar.bz2

      - uses: actions/upload-artifact@v3
        with:
          name: ORT Linux x86_64 Python Wheel
          path: |
            ${{ github.workspace }}/build/linux-x86_64/Release/dist/onnxruntime_qnn*.whl

  build-linux-aarch64-oe-gcc11_2:
    if: ${{ inputs.do_all || inputs.do_linux_x86_64 }}
    runs-on: ["self-hosted", "X64", "Linux", "Build"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Build Linux AArch64 OE GCC 11.2
        run: |
          python3 qcom/build_and_test.py build_ort_linux_aarch64_oe_gcc11_2

  build-and-test-windows-arm64:
    if: ${{ inputs.do_all || inputs.do_windows_arm64 }}
    uses: ./.github/workflows/qualcomm-internal-build-and-test-windows.yml
    secrets: inherit
    with:
      nightly_build: ${{ inputs.nightly_build }}
      build_runner_arch: ${{ inputs.windows_arm64_runner_arch }}
      target_arch: arm64
      upload_wheel: ${{ inputs.windows_arm64_runner_arch == 'ARM64' }}
      target_py_vsn: ${{ inputs.windows_arm64_runner_arch == 'ARM64' && inputs.target_py_vsn || 'None' }}
      test_runner_arch: arm64

  build-and-test-windows-arm64ec:
    if: ${{ inputs.do_all }}
    uses: ./.github/workflows/qualcomm-internal-build-and-test-windows.yml
    secrets: inherit
    with:
      nightly_build: ${{ inputs.nightly_build }}
      target_arch: arm64ec
      upload_wheel: false  # ARM64x is the way to go so let's not confuse matters by publishing artifacts
      target_py_vsn: ${{ inputs.target_py_vsn }}
      run_tests: false  # ARM64ec tests are horribly broken so this is a build-only config in CI.

  build-and-test-windows-x86_64:
    if: ${{ inputs.do_all }}
    uses: ./.github/workflows/qualcomm-internal-build-and-test-windows.yml
    secrets: inherit
    with:
      nightly_build: ${{ inputs.nightly_build }}
      target_arch: x86_64
      target_py_vsn: ${{ inputs.target_py_vsn }}

  lint:
    if: ${{ inputs.do_all }}
    runs-on: ["self-hosted", "X64", "Linux", "Build"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Run Linting Tool
        run: |
          python3 qcom/build_and_test.py lint

  # Intentionally not "test-android-aarch64" to avoid breaking required PR checks
  test-android:
    if: ${{ inputs.do_all }}
    runs-on: ["self-hosted", "Linux", "QDC"]
    needs: [build-android-aarch64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - uses: actions/download-artifact@v3
        with:
          name: ORT Android Tests
          path: |
            ${{ github.workspace }}/build

      - name: Test Android
        env:
          QDC_API_TOKEN: ${{ secrets.QDC_API_TOKEN }}
        run: |
          python3 qcom/build_and_test.py create_venv test_ort_qdc_android_aarch64 --only

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4.0.4
        if: always() # always run even if the previous step fails
        with:
          check_name: android-test-results
          report_paths: ${{ github.workspace }}/build/qdc-android/*.results.xml

      - uses: actions/upload-artifact@v3
        if: always() # always run even if the previous step fails
        with:
          name: ORT Android AArch64 Test Results
          path: |
            ${{ github.workspace }}/build/qdc-android/*.*

  # Intentionally not "test-linux-x86_64" to avoid breaking required PR checks
  test-linux:
    if: ${{ inputs.do_all || inputs.do_linux_x86_64 }}
    runs-on: ["self-hosted", "Linux", "X64", "Build"]
    needs: [build-linux-x86_64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - uses: actions/download-artifact@v3
        with:
          name: ORT Linux x86_64 Tests
          path: |
            ${{ github.workspace }}/build

      - name: Test Linux
        run: |
          python3 qcom/build_and_test.py create_venv extract_ort_linux_x86_64 test_ort_linux_x86_64 --only

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4.0.4
        if: always() # always run even if the previous step fails
        with:
          check_name: linux-test-results
          report_paths: ${{ github.workspace }}/build/linux-x86_64/Release/*.results.xml

      - uses: actions/upload-artifact@v3
        if: always() # always run even if the previous step fails
        with:
          name: ORT Linux x86_64 Test Results
          path: |
            ${{ github.workspace }}/build/linux-x86_64/Release/*.results.xml
