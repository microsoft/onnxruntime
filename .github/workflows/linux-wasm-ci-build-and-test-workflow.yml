name: "Linux WASM CI Reusable Workflow for build and test"
description: "This is a reusable workflow for Linux WASM CI pipelines to build and test"

on:
  workflow_call:
    inputs:
      build_config:
        required: true
        type: string
      extra_build_args:
        required: false
        type: string
        default: ""
      skip_publish:
        required: false
        type: boolean
        default: false
      build_jsep:
        required: false
        type: boolean
        default: false
      build_webgpu:
        required: false
        type: boolean
        default: false

jobs:
  build-wasm:
    runs-on: ["self-hosted", "1ES.Pool=onnxruntime-github-Ubuntu2204-AMD-CPU"]
    env:
      buildArch: x64
      common_build_args: --parallel --use_vcpkg --use_vcpkg_ms_internal_asset_cache --config ${{ inputs.build_config }} --skip_submodule_sync --build_wasm --enable_wasm_simd --enable_wasm_threads ${{ inputs.extra_build_args }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: ${{ env.buildArch }}
      - uses: microsoft/onnxruntime-github-actions/setup-build-tools@v0.0.5
        with:
          vcpkg-version: '2025.03.19'
          vcpkg-hash: '17e96169cd3f266c4716fcdc1bb728e6a64f103941ece463a2834d50694eba4fb48f30135503fd466402afa139abc847ef630733c442595d1c34979f261b0114'
          cmake-version: '3.31.6'
          cmake-hash: '42395e20b10a8e9ef3e33014f9a4eed08d46ab952e02d2c1bbc8f6133eca0d7719fb75680f9bbff6552f20fcd1b73d86860f7f39388d631f98fb6f622b37cf04'
          add-cmake-to-path: 'true'
          disable-terrapin: 'true'
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install EMSDK
        run: |
          set -ex
          cd ${{ github.workspace }}/cmake/external/emsdk
          ./emsdk install 4.0.4
          ./emsdk activate 4.0.4

      - name: Build and test (browser) (simd + threads)
        run: |
          set -e -x
          source ${{ github.workspace }}/cmake/external/emsdk/emsdk_env.sh
          cd '${{ github.workspace }}'
          python ./tools/ci_build/build.py \
            ${{ env.common_build_args }} \
            --build_dir ${{ github.workspace }}/build/wasm_inferencing \
            --wasm_run_tests_in_browser

      - name: Build (simd + threads + JSEP)
        if: ${{ inputs.build_jsep == true }}
        run: |
          set -e -x
          source ${{ github.workspace }}/cmake/external/emsdk/emsdk_env.sh
          cd '${{ github.workspace }}'
          python ./tools/ci_build/build.py \
            ${{ env.common_build_args }} \
            --build_dir ${{ github.workspace }}/build/wasm_inferencing_jsep \
            --use_jsep \
            --use_webnn \
            --target onnxruntime_webassembly \
            --skip_tests

      - name: Build (simd + threads + WebGPU experimental)
        if: ${{ inputs.build_webgpu == true }}
        run: |
          set -e -x
          source ${{ github.workspace }}/cmake/external/emsdk/emsdk_env.sh
          cd '${{ github.workspace }}'
          python ./tools/ci_build/build.py \
            ${{ env.common_build_args }} \
            --build_dir ${{ github.workspace }}/build/wasm_inferencing_webgpu \
            --use_webgpu \
            --use_jsep \
            --use_webnn \
            --target onnxruntime_webassembly \
            --skip_tests

      - name: Create Artifacts
        if: ${{ inputs.skip_publish != true }}
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/wasm/
          cp ${{ github.workspace }}/build/wasm_inferencing/${{ inputs.build_config }}/ort-wasm-simd-threaded.wasm ${{ github.workspace }}/artifacts/wasm/
          cp ${{ github.workspace }}/build/wasm_inferencing/${{ inputs.build_config }}/ort-wasm-simd-threaded.mjs ${{ github.workspace }}/artifacts/wasm/
          if [ -d ${{ github.workspace }}/build/wasm_inferencing_jsep ]; then
            cp ${{ github.workspace }}/build/wasm_inferencing_jsep/${{ inputs.build_config }}/ort-wasm-simd-threaded.jsep.wasm ${{ github.workspace }}/artifacts/wasm/
            cp ${{ github.workspace }}/build/wasm_inferencing_jsep/${{ inputs.build_config }}/ort-wasm-simd-threaded.jsep.mjs ${{ github.workspace }}/artifacts/wasm/
          fi

      - name: Create WebGPU Artifacts
        if: ${{ inputs.skip_publish != true && inputs.build_webgpu == true }}
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/wasm_webgpu/
          cp ${{ github.workspace }}/build/wasm_inferencing_webgpu/${{ inputs.build_config }}/ort-wasm-simd-threaded.jsep.wasm ${{ github.workspace }}/artifacts/wasm_webgpu/
          cp ${{ github.workspace }}/build/wasm_inferencing_webgpu/${{ inputs.build_config }}/ort-wasm-simd-threaded.jsep.mjs ${{ github.workspace }}/artifacts/wasm_webgpu/

      - name: Upload WASM artifacts
        if: ${{ inputs.skip_publish != true }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build_config }}_wasm
          path: ${{ github.workspace }}/artifacts/wasm

      - name: Upload WebGPU artifacts
        if: ${{ inputs.skip_publish != true && inputs.build_webgpu == true }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build_config }}_wasm_webgpu
          path: ${{ github.workspace }}/artifacts/wasm_webgpu

      - name: Publish test results
        if: ${{ always() && inputs.build_config == 'Debug' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}/build/**/*.results.xml
