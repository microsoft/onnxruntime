name: Reusable Linux CPU/GPU Build and Test

on:
  workflow_call:
    inputs:
      pool_name:
        description: 'The specific 1ES pool name (e.g., onnxruntime-github-Ubuntu2204-AMD-CPU)'
        required: true
        type: string
      build_config:
        description: 'Build configuration (Debug or Release)'
        required: true
        type: string
      architecture:
        description: 'Target architecture (x64 or arm64)'
        required: true
        type: string
      dockerfile_path:
        description: 'Path to the Dockerfile relative to the workspace root'
        required: true
        type: string
      docker_image_repo:
        description: 'Name for the Docker image repository'
        required: true
        type: string
      docker_build_args:
        description: 'Arguments to pass to the docker image build command'
        required: false
        type: string
        default: ''
      execution_providers:
        description: 'Space-separated list of execution providers to enable (passed to build.py)'
        required: false
        type: string
        default: ''
      extra_build_flags:
        description: 'Additional flags for the build.py script (appended after EP flags)'
        required: false
        type: string
        default: ''
      python_path_prefix:
        description: 'Optional prefix to add to the PATH for python command (e.g., PATH=/opt/python/cp310-cp310/bin:$PATH)'
        required: false
        type: string
        default: ''
      python_version:
        description: 'Python version to set up on the runner host'
        required: false
        type: string
        default: '3.x'
      run_tests:
        description: 'Whether to execute the test suite after building'
        required: false
        type: boolean
        default: true
      upload_build_output:
        description: 'Whether to upload the build output directory as an artifact (used when tests are skipped)'
        required: false
        type: boolean
        default: false
    secrets:
      GH_TOKEN:
        description: 'GitHub token for accessing actions/packages'
        required: true

jobs:
  build_test_pipeline:
    runs-on:
      - self-hosted
      - "1ES.Pool=${{ inputs.pool_name }}"
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Download ORT Actions Asset (v0.0.2) # <-- Adjust version as needed
        uses: dsaltares/fetch-gh-release-asset@1.1.2 # Action to download assets
        with:
          repo: 'microsoft/onnxruntime-github-actions'   # The repo containing the actions
          version: 'tags/v0.0.2'                          # The specific tag/version to use
          file: 'onnxruntime-actions-v0.0.2.zip'         # The asset filename (matches release workflow output)
          target: 'onnxruntime-actions.zip'             # Local filename to save as
        env:
          # Use default token for public repos, provide PAT for private if necessary
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Unzip ORT Actions
        run: |
          mkdir -p ./.github/_downloaded_actions # Create a directory to hold them
          unzip onnxruntime-actions.zip -d ./.github/_downloaded_actions
          echo "Unzipped contents:"
          ls -lR ./.github/_downloaded_actions # Verify structure

      - name: Build Docker Image (${{ inputs.architecture }} / ${{ inputs.build_config }})
        uses: ./.github/_downloaded_actions/build-docker-image
        with:
          Dockerfile: ${{ github.workspace }}/${{ inputs.dockerfile_path }}
          Repository: ${{ inputs.docker_image_repo }}
          DockerBuildArgs: ${{ inputs.docker_build_args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      # ------------- Update Step (CMake Generation) -------------
      - name: Generate Build Files (CMake) (${{ inputs.architecture }} / ${{ inputs.build_config }})
        id: update_step
        uses: ./.github/_downloaded_actions/run-build-script-in-docker
        with:
          docker_image: ${{ inputs.docker_image_repo }}
          build_config: ${{ inputs.build_config }}
          mode: 'update'
          execution_providers: ${{ inputs.execution_providers }} # Pass down EP list
          extra_build_flags: ${{ inputs.extra_build_flags }}
          python_path_prefix: ${{ inputs.python_path_prefix }}

      # ------------- Build Step (Compilation) -------------
      - name: Build ONNX Runtime (${{ inputs.architecture }} / ${{ inputs.build_config }})
        id: build_step
        uses: ./.github/_downloaded_actions/run-build-script-in-docker
        with:
          docker_image: ${{ inputs.docker_image_repo }}
          build_config: ${{ inputs.build_config }}
          mode: 'build'
          execution_providers: ${{ inputs.execution_providers }} # Pass down EP list
          extra_build_flags: ${{ inputs.extra_build_flags }}
          python_path_prefix: ${{ inputs.python_path_prefix }}

      # ------------- Test Step -------------
      - name: Test ONNX Runtime (${{ inputs.architecture }} / ${{ inputs.build_config }})
        id: test_step
        if: inputs.run_tests == true
        uses: ./.github/_downloaded_actions/run-build-script-in-docker
        with:
          docker_image: ${{ inputs.docker_image_repo }}
          build_config: ${{ inputs.build_config }}
          mode: 'test'
          execution_providers: ${{ inputs.execution_providers }} # Pass down EP list
          extra_build_flags: ${{ inputs.extra_build_flags }}
          python_path_prefix: ${{ inputs.python_path_prefix }}

      # ------------- Prepare Artifact Step -------------
      - name: Prepare Build Output for Upload
        if: inputs.upload_build_output == true
        shell: bash
        run: |
          #!/bin/bash
          set -e -x
          BUILD_DIR="${{ runner.temp }}/${{ inputs.build_config }}"
          if [ ! -d "${BUILD_DIR}" ]; then
            echo "Error: Build directory ${BUILD_DIR} not found. Cannot prepare artifact."
            exit 1
          fi
          echo "--- Cleaning build directory: ${BUILD_DIR} ---"
          rm -rf "${BUILD_DIR}/onnxruntime" || true
          rm -rf "${BUILD_DIR}/pybind11" || true
          rm -rf "${BUILD_DIR}/vcpkg_installed" || true
          rm -f "${BUILD_DIR}/models" || true
          DEPS_DIR="${BUILD_DIR}/_deps"
          if [ -d "${DEPS_DIR}" ]; then
            echo "Cleaning ${DEPS_DIR}, keeping onnx-src..."
            find "${DEPS_DIR}" -mindepth 1 ! -regex "^${DEPS_DIR}/onnx-src\(/.*\)?$" -delete
          else
            echo "${DEPS_DIR} does not exist, skipping deps cleanup."
          fi
          echo "--- Saving executable permissions ---"
          cd "${BUILD_DIR}"
          find . -executable -type f -printf '%p\n' > perms.txt
          echo "--- Cleanup and permission saving complete for ${BUILD_DIR} ---"

      # ------------- Upload Build Output Step -------------
      - name: Upload Build Output Artifact
        if: inputs.upload_build_output == true
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ inputs.architecture }}-${{ inputs.build_config }}
          path: ${{ runner.temp }}/${{ inputs.build_config }}
          if-no-files-found: error

      # ------------- Upload Log on Build Failure Step -------------
      - name: Upload VCPKG Manifest Install Log on Update or Build Failure
        if: steps.update_step.outcome == 'failure' || steps.build_step.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: vcpkg-manifest-install-log-${{ inputs.architecture }}-${{ inputs.build_config }}
          path: ${{ runner.temp }}/${{ inputs.build_config }}/${{ inputs.build_config }}/vcpkg-manifest-install.log
          if-no-files-found: ignore
