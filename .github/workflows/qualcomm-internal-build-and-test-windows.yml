# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: MIT

name: Qualcomm Internal Windows Build
on:
  workflow_call:
    inputs:
      target_arch:
        default: arm64
        type: string
      # If true, build with NIGHTLY_BUILD=1, etc. to enable --nightly_build
      nightly_build:
        type: boolean
        default: true
      # Cross-compiling from X64 to ARM64 is faster with our runners, but cannot produce a wheel.
      build_runner_arch:
        default: "X64"
        type: string
      run_tests:
        default: true
        type: boolean
      test_runner_arch:
        default: "X64"
        type: string
      upload_wheel:
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      target_arch:
        description: "The architecture for which to build: arm64, arm64ec, arm64x, or x86_64."
        default: arm64
        type: string
      # If true, build with NIGHTLY_BUILD=1, etc. to enable --nightly_build
      nightly_build:
        description: "If true, include a verbose version string in wheel file names."
        type: boolean
        default: true
      # Cross-compiling from X64 to ARM64 is faster with our runners, but cannot produce an ARM64 wheel.
      build_runner_arch:
        description: "The architecture of the build machine to use. X64 are faster, but ARM64 can produce ARM64 wheels."
        default: "X64"
        type: string
      test_runner_arch:
        description: "The architecture of the test machine to use: X64 or ARM64."
        default: "X64"
        type: string
      run_tests:
        description: "If true, also run unit tests"
        default: true
        type: boolean
      upload_wheel:
        description: "If true, include the wheel as a workflow artifact."
        default: true
        type: boolean

env:
  ORT_NIGHTLY_BUILD: "${{ inputs.nightly_build == true && '1' || '0' }}"

jobs:
  build-windows:
    name: "build-windows-${{inputs.target_arch}}"
    runs-on: ["self-hosted", "Windows", "${{ inputs.build_runner_arch }}", "Build"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Build Windows ${{ inputs.target_arch }}
        shell: cmd
        run: |
          python .\qcom\build_and_test.py archive_ort_windows_${{ inputs.target_arch }}

      - uses: actions/upload-artifact@v3
        with:
          name: ORT Windows ${{ inputs.target_arch }} Tests
          path: |
            ${{ github.workspace }}/build/onnxruntime-tests-windows-${{ inputs.target_arch }}.zip

      - uses: actions/upload-artifact@v3
        if: ${{ inputs.upload_wheel }}
        with:
          name: ORT Windows ${{ inputs.target_arch }} Python Wheel
          path: |
            ${{ github.workspace }}/build/windows-${{ inputs.target_arch }}/Release/dist/onnxruntime_qnn*.whl
            ${{ github.workspace }}/build/windows-${{ inputs.target_arch }}/Release/Release/dist/onnxruntime_qnn*.whl

  test-windows:
    name: "test-windows-${{inputs.target_arch}}"
    if: ${{ inputs.run_tests }}
    runs-on: ["self-hosted", "Windows", "${{ inputs.test_runner_arch }}", "Build"]
    needs: [build-windows]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - uses: actions/download-artifact@v3
        with:
          name: ORT Windows ${{inputs.target_arch}} Tests
          path: |
            ${{ github.workspace }}/build

      - name: Test Windows ${{inputs.target_arch}}
        shell: cmd
        run: |
          python .\qcom\build_and_test.py create_venv extract_ort_windows_${{inputs.target_arch}} test_ort_windows_${{inputs.target_arch}} --only

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4.0.4
        if: always() # always run even if the previous step fails
        with:
          check_name: windows-${{inputs.target_arch}}-test-results
          report_paths: |
            ${{ github.workspace }}/build/windows-${{inputs.target_arch}}/Release/*.results.xml
            ${{ github.workspace }}/build/windows-${{inputs.target_arch}}/Release/Release/*.results.xml

      - uses: actions/upload-artifact@v3
        if: always() # always run even if the previous step fails
        with:
          name: ORT Windows ${{inputs.target_arch}} Test Results
          path: |
            ${{ github.workspace }}/build/windows-${{inputs.target_arch}}/Release/*.results.xml
            ${{ github.workspace }}/build/windows-${{inputs.target_arch}}/Release/Release/*.results.xml
