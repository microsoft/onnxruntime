# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RuntimeOptimizations(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRuntimeOptimizations(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RuntimeOptimizations()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def RuntimeOptimizationsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x52\x54\x4D", size_prefixed=size_prefixed)

    # RuntimeOptimizations
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # mapping from optimizer name to [RuntimeOptimizationRecord]
    # RuntimeOptimizations
    def Records(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ort_flatbuffers_py.fbs.RuntimeOptimizationRecordContainerEntry import RuntimeOptimizationRecordContainerEntry
            obj = RuntimeOptimizationRecordContainerEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RuntimeOptimizations
    def RecordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RuntimeOptimizations
    def RecordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def RuntimeOptimizationsStart(builder): builder.StartObject(1)
def RuntimeOptimizationsAddRecords(builder, records): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(records), 0)
def RuntimeOptimizationsStartRecordsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RuntimeOptimizationsEnd(builder): return builder.EndObject()
