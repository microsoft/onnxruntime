diff --git a/onnxruntime/test/onnx/dataitem_request.cc b/onnxruntime/test/onnx/dataitem_request.cc
index d8deafb70b..86a97493f8 100644
--- a/onnxruntime/test/onnx/dataitem_request.cc
+++ b/onnxruntime/test/onnx/dataitem_request.cc
@@ -135,6 +135,7 @@ std::pair<EXECUTE_RESULT, TIME_SPEC> DataTaskRequestContext::RunImpl() {
   }
 
   EXECUTE_RESULT res = EXECUTE_RESULT::SUCCESS;
+  int32_t out_idx = 0;
   for (auto& output : expected_output_values) {
     const std::string& output_name = output.first;
     OrtValue* expected_output_value = output.second;  // Automatic cast
@@ -158,7 +159,7 @@ std::pair<EXECUTE_RESULT, TIME_SPEC> DataTaskRequestContext::RunImpl() {
       } else {  // Both expect and actual OrtValues are not None, proceed with data checking
         ret =
             CompareOrtValue(*actual_output_value, *expected_output_value, per_sample_tolerance,
-                            relative_per_sample_tolerance, post_procesing);
+                            relative_per_sample_tolerance, post_procesing, out_idx);
       }
     } else {  // Expected output is None, ensure that the received output OrtValue is None as well
       if (actual_output_value->IsAllocated()) {
@@ -211,9 +212,7 @@ std::pair<EXECUTE_RESULT, TIME_SPEC> DataTaskRequestContext::RunImpl() {
     if (compare_result != COMPARE_RESULT::SUCCESS && !ret.second.empty()) {
       LOGS_DEFAULT(ERROR) << test_case_.GetTestCaseName() << ":output=" << output_name << ":" << ret.second;
     }
-    if (compare_result != COMPARE_RESULT::SUCCESS) {
-      break;
-    }
+    out_idx ++;
   }
   return std::make_pair(res, spent_time_);
 }
diff --git a/onnxruntime/test/util/compare_ortvalue.cc b/onnxruntime/test/util/compare_ortvalue.cc
index cc4c0440d2..1a37b6f28a 100644
--- a/onnxruntime/test/util/compare_ortvalue.cc
+++ b/onnxruntime/test/util/compare_ortvalue.cc
@@ -188,11 +188,75 @@ std::pair<COMPARE_RESULT, std::string> CompareFloatResult(const Tensor& outvalue
   return res;
 }
 
+template <typename FLOAT_TYPE>
+std::pair<COMPARE_RESULT, std::string> CompareFloatResult(const Tensor& outvalue, const Tensor& expected_value,
+                                                          double per_sample_tolerance,
+                                                          double relative_per_sample_tolerance, bool post_processing, int32_t out_idx) {
+  const size_t size1 = static_cast<size_t>(expected_value.Shape().Size());
+  const FLOAT_TYPE* expected_output = expected_value.Data<FLOAT_TYPE>();
+  const FLOAT_TYPE* real_output = outvalue.Data<FLOAT_TYPE>();
+
+  std::string expected_name = "expected_res"+ std::to_string(out_idx)+ ".txt";
+  std::string npures_name = "npu_res"+ std::to_string(out_idx)+ ".txt";
+  std::ofstream expected_res(expected_name), npu_res(npures_name);
+  for(size_t i = 0 ; i < size1; i++){
+    expected_res << expected_output[i] << std::endl;
+    npu_res << real_output[i] << std::endl;
+  }
+  expected_res.close();
+  npu_res.close();
+
+  std::pair<COMPARE_RESULT, std::string> res = std::make_pair(COMPARE_RESULT::SUCCESS, "");
+  double max_diff = 0;
+  size_t diff_count = 0;
+  for (size_t di = 0; di != size1; ++di) {
+    const double real_value =
+        post_processing ? std::max<double>(0.0, std::min<double>(255.0, real_output[di])) : real_output[di];
+    const double diff = std::fabs(expected_output[di] - real_value);
+    const double tol = per_sample_tolerance + relative_per_sample_tolerance * std::fabs(expected_output[di]);
+    if (!IsResultCloselyMatch<double>(real_value, expected_output[di], diff, tol)) {
+      res.first = COMPARE_RESULT::RESULT_DIFFERS;
+      // update error message if this is a larger diff
+      if (diff > max_diff || (std::isnan(diff) && !std::isnan(max_diff))) {
+        int64_t expected_int = 0;
+        int64_t real_int = 0;
+        memcpy(&expected_int, &expected_output[di], sizeof(FLOAT_TYPE));
+        memcpy(&real_int, &real_output[di], sizeof(FLOAT_TYPE));
+
+        std::ostringstream oss;
+        oss << std::hex << "expected " << expected_output[di] << " (" << expected_int << "), got " << real_value << " ("
+            << real_int << ")"
+            << ", diff: " << diff << ", tol=" << tol << std::dec << " idx=" << di << ".";
+        res.second = oss.str();
+        max_diff = diff;
+      }
+      ++diff_count;
+    }
+  }
+
+  if (res.first == COMPARE_RESULT::SUCCESS) return res;
+
+  std::ostringstream oss;
+  oss << res.second << " " << diff_count << " of " << size1 << " differ";
+  res.second = oss.str();
+  return res;
+}
+
+
 template <typename T>
-std::pair<COMPARE_RESULT, std::string> IsResultExactlyMatch(const Tensor& outvalue, const Tensor& expected_value) {
+std::pair<COMPARE_RESULT, std::string> IsResultExactlyMatch(const Tensor& outvalue, const Tensor& expected_value, int32_t out_idx) {
   const size_t size1 = static_cast<size_t>(expected_value.Shape().Size());
   const T* expected_output = expected_value.Data<T>();
   const T* real_output = outvalue.Data<T>();
+  std::string expected_name = "expected_res"+ std::to_string(out_idx)+ ".txt";
+  std::string npures_name = "npu_res"+ std::to_string(out_idx)+ ".txt";
+  std::ofstream expected_res(expected_name), npu_res(npures_name);
+  for(size_t i = 0 ; i < size1; i++){
+    expected_res << expected_output[i] << std::endl;
+    npu_res << real_output[i] << std::endl;
+  }
+  expected_res.close();
+  npu_res.close();
   for (size_t di = 0; di != size1; ++di) {
     if (expected_output[di] != real_output[di]) {
       std::ostringstream oss;
@@ -205,10 +269,12 @@ std::pair<COMPARE_RESULT, std::string> IsResultExactlyMatch(const Tensor& outval
 
 template <>
 std::pair<COMPARE_RESULT, std::string> IsResultExactlyMatch<Int4x2>(const Tensor& outvalue,
-                                                                    const Tensor& expected_value) {
+                                                                    const Tensor& expected_value,
+                                                                    int32_t placehold) {
   const size_t size1 = static_cast<size_t>(expected_value.Shape().Size());
   const Int4x2* expected_output = expected_value.Data<Int4x2>();
   const Int4x2* real_output = outvalue.Data<Int4x2>();
+  (void) placehold;
   for (size_t di = 0; di != size1; ++di) {
     size_t r = di >> 1;
     size_t c = di & 0x1;
@@ -224,10 +290,12 @@ std::pair<COMPARE_RESULT, std::string> IsResultExactlyMatch<Int4x2>(const Tensor
 
 template <>
 std::pair<COMPARE_RESULT, std::string> IsResultExactlyMatch<UInt4x2>(const Tensor& outvalue,
-                                                                     const Tensor& expected_value) {
+                                                                     const Tensor& expected_value,
+                                                                     int32_t placehold) {
   const size_t size1 = static_cast<size_t>(expected_value.Shape().Size());
   const UInt4x2* expected_output = expected_value.Data<UInt4x2>();
   const UInt4x2* real_output = outvalue.Data<UInt4x2>();
+  (void) placehold;
   for (size_t di = 0; di != size1; ++di) {
     size_t r = di >> 1;
     size_t c = di & 0x1;
@@ -244,7 +312,7 @@ std::pair<COMPARE_RESULT, std::string> IsResultExactlyMatch<UInt4x2>(const Tenso
 std::pair<COMPARE_RESULT, std::string> CompareFloat16Result(const Tensor& outvalue, const Tensor& expected_value,
                                                             double per_sample_tolerance,
                                                             double relative_per_sample_tolerance,
-                                                            bool post_processing) {
+                                                            bool post_processing, int32_t out_idx) {
   const size_t size1 = static_cast<size_t>(expected_value.Shape().Size());
   const MLFloat16* expected_output = expected_value.Data<MLFloat16>();
   const MLFloat16* real_output = outvalue.Data<MLFloat16>();
@@ -267,7 +335,7 @@ std::pair<COMPARE_RESULT, std::string> CompareFloat16Result(const Tensor& outval
 std::pair<COMPARE_RESULT, std::string> CompareBFloat16Result(const Tensor& outvalue, const Tensor& expected_value,
                                                              double per_sample_tolerance,
                                                              double relative_per_sample_tolerance,
-                                                             bool post_processing) {
+                                                             bool post_processing, int32_t out_idx) {
   const size_t size1 = static_cast<size_t>(expected_value.Shape().Size());
   const BFloat16* expected_output = expected_value.Data<BFloat16>();
   const BFloat16* real_output = outvalue.Data<BFloat16>();
@@ -289,7 +357,7 @@ std::pair<COMPARE_RESULT, std::string> CompareBFloat16Result(const Tensor& outva
 
 std::pair<COMPARE_RESULT, std::string> CompareTwoTensors(const Tensor& outvalue, const Tensor& expected_tensor,
                                                          double per_sample_tolerance,
-                                                         double relative_per_sample_tolerance, bool post_processing) {
+                                                         double relative_per_sample_tolerance, bool post_processing, int32_t out_idx) {
   if (expected_tensor.Shape() != outvalue.Shape()) {
     std::ostringstream oss;
     oss << "shape mismatch, expect " << expected_tensor.Shape().ToString() << " got " << outvalue.Shape().ToString();
@@ -328,40 +396,40 @@ std::pair<COMPARE_RESULT, std::string> CompareTwoTensors(const Tensor& outvalue,
 
   if (outvalue.IsDataType<float>()) {
     return CompareFloatResult<float>(outvalue, expected_tensor, per_sample_tolerance, relative_per_sample_tolerance,
-                                     post_processing);
+                                     post_processing, out_idx);
   } else if (outvalue.IsDataType<double>()) {
     return CompareFloatResult<double>(outvalue, expected_tensor, per_sample_tolerance, relative_per_sample_tolerance,
-                                      post_processing);
+                                      post_processing, out_idx);
   } else if (outvalue.IsDataTypeString()) {
-    return IsResultExactlyMatch<std::string>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<std::string>(outvalue, expected_tensor, out_idx);
   } else if (outvalue.IsDataType<uint8_t>()) {
-    return IsResultExactlyMatch<uint8_t>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<uint8_t>(outvalue, expected_tensor, out_idx);
   } else if (outvalue.IsDataType<int8_t>()) {
-    return IsResultExactlyMatch<int8_t>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<int8_t>(outvalue, expected_tensor, out_idx);
   } else if (outvalue.IsDataType<uint16_t>()) {
-    return IsResultExactlyMatch<uint16_t>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<uint16_t>(outvalue, expected_tensor, out_idx);
   } else if (outvalue.IsDataType<int16_t>()) {
-    return IsResultExactlyMatch<int16_t>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<int16_t>(outvalue, expected_tensor, out_idx);
   } else if (outvalue.IsDataType<uint32_t>()) {
-    return IsResultExactlyMatch<uint32_t>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<uint32_t>(outvalue, expected_tensor, out_idx);
   } else if (outvalue.IsDataType<int32_t>()) {
-    return IsResultExactlyMatch<int32_t>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<int32_t>(outvalue, expected_tensor, out_idx);
   } else if (outvalue.IsDataType<uint64_t>()) {
-    return IsResultExactlyMatch<uint64_t>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<uint64_t>(outvalue, expected_tensor, out_idx);
   } else if (outvalue.IsDataType<int64_t>()) {
-    return IsResultExactlyMatch<int64_t>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<int64_t>(outvalue, expected_tensor, out_idx);
   } else if (outvalue.IsDataType<bool>()) {
-    return IsResultExactlyMatch<bool>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<bool>(outvalue, expected_tensor, out_idx);
   } else if (outvalue.IsDataType<Int4x2>()) {
-    return IsResultExactlyMatch<Int4x2>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<Int4x2>(outvalue, expected_tensor, 0);
   } else if (outvalue.IsDataType<UInt4x2>()) {
-    return IsResultExactlyMatch<UInt4x2>(outvalue, expected_tensor);
+    return IsResultExactlyMatch<UInt4x2>(outvalue, expected_tensor, 0);
   } else if (outvalue.IsDataType<MLFloat16>()) {
     return CompareFloat16Result(outvalue, expected_tensor, per_sample_tolerance, relative_per_sample_tolerance,
-                                post_processing);
+                                post_processing, out_idx);
   } else if (outvalue.IsDataType<BFloat16>()) {
     return CompareBFloat16Result(outvalue, expected_tensor, per_sample_tolerance, relative_per_sample_tolerance,
-                                 post_processing);
+                                 post_processing, out_idx);
   } else {
     return std::make_pair(COMPARE_RESULT::NOT_SUPPORT, "");
   }
@@ -423,7 +491,7 @@ std::pair<COMPARE_RESULT, std::string> CompareSparseTensors(const SparseTensor&
                      " actual: ", actual.Format());
 
   TEST_RETURN_IF_ERROR(CompareTwoTensors(actual.Values(), expected.Values(),
-                                         per_sample_tolerance, relative_per_sample_tolerance, post_processing),
+                                         per_sample_tolerance, relative_per_sample_tolerance, post_processing, 0),
                        "While comparing sparse values");
 
   if (actual.Format() == SparseFormat::kCoo) {
@@ -431,16 +499,16 @@ std::pair<COMPARE_RESULT, std::string> CompareSparseTensors(const SparseTensor&
     auto expected_view = expected.AsCoo();
 
     TEST_RETURN_IF_ERROR(CompareTwoTensors(actual_view.Indices(), expected_view.Indices(),
-                                           per_sample_tolerance, relative_per_sample_tolerance, post_processing),
+                                           per_sample_tolerance, relative_per_sample_tolerance, post_processing, 0),
                          "Comparing COO indices");
   } else if (actual.Format() == SparseFormat::kCsrc) {
     auto actual_view = actual.AsCsr();
     auto expected_view = expected.AsCsr();
     TEST_RETURN_IF_ERROR(CompareTwoTensors(actual_view.Inner(), expected_view.Inner(),
-                                           per_sample_tolerance, relative_per_sample_tolerance, post_processing),
+                                           per_sample_tolerance, relative_per_sample_tolerance, post_processing, 0),
                          "Comparing Csr(c) inner indices");
     TEST_RETURN_IF_ERROR(CompareTwoTensors(actual_view.Outer(), expected_view.Outer(),
-                                           per_sample_tolerance, relative_per_sample_tolerance, post_processing),
+                                           per_sample_tolerance, relative_per_sample_tolerance, post_processing, 0),
                          "Comparing Csr(c) outer indices");
   }
 
@@ -508,7 +576,83 @@ std::pair<COMPARE_RESULT, std::string> CompareOrtValue(const OrtValue& o, const
       return std::make_pair(COMPARE_RESULT::TYPE_MISMATCH, oss.str());
     }
     return CompareTwoTensors(outvalue, expected_tensor, per_sample_tolerance, relative_per_sample_tolerance,
-                             post_processing);
+                             post_processing, 0);
+  } else if (o.IsSparseTensor()) {
+#if !defined(DISABLE_SPARSE_TENSORS)
+    TEST_RETURN_IF_NOT(expected_mlvalue.IsSparseTensor(), COMPARE_RESULT::TYPE_MISMATCH,
+                       "SparseTensor is not expected as output");
+    TEST_RETURN_IF_ERROR(CompareSparseTensors(o.Get<SparseTensor>(), expected_mlvalue.Get<SparseTensor>(),
+                                              per_sample_tolerance, relative_per_sample_tolerance,
+                                              post_processing),
+                         "while comaring sparse tensors");
+#endif
+    return std::make_pair(COMPARE_RESULT::SUCCESS, "");
+  } else if (o.IsTensorSequence()) {
+    auto& expected_tensor_seq = expected_mlvalue.Get<TensorSeq>();
+    auto expected_tensor_count = expected_tensor_seq.Size();
+
+    auto& actual_tensor_seq = o.Get<TensorSeq>();
+    auto actual_tensor_count = actual_tensor_seq.Size();
+
+    if (expected_tensor_count != actual_tensor_count) {
+      std::ostringstream oss;
+      oss << "expected tensor count in the sequence: " << expected_tensor_count << " got "
+          << actual_tensor_count;
+      return std::make_pair(COMPARE_RESULT::RESULT_DIFFERS, oss.str());
+    }
+
+    if (!expected_tensor_seq.IsSameDataType(actual_tensor_seq)) {
+      std::ostringstream oss;
+      oss << "expected tensor type in the sequence: " << expected_tensor_seq.DataType() << " got "
+          << actual_tensor_seq.DataType();
+      return std::make_pair(COMPARE_RESULT::TYPE_MISMATCH, oss.str());
+    }
+
+    for (size_t i = 0; i < expected_tensor_count; ++i) {
+      auto res = CompareTwoTensors(actual_tensor_seq.Get(i), expected_tensor_seq.Get(i), per_sample_tolerance, relative_per_sample_tolerance,
+                                   post_processing,0);
+      if (res.first != COMPARE_RESULT::SUCCESS) {
+        return res;
+      }
+    }
+
+    return std::make_pair(COMPARE_RESULT::SUCCESS, "");
+
+  } else {
+    // Maps
+#if !defined(DISABLE_ML_OPS)
+    if (o.Type() == DataTypeImpl::GetType<VectorMapInt64ToFloat>()) {
+      return CompareSeqOfMapToFloat(o.Get<VectorMapInt64ToFloat>(), expected_mlvalue.Get<VectorMapInt64ToFloat>(),
+                                    per_sample_tolerance, relative_per_sample_tolerance, post_processing);
+    }
+    if (o.Type() == DataTypeImpl::GetType<VectorMapStringToFloat>()) {
+      return CompareSeqOfMapToFloat(o.Get<VectorMapStringToFloat>(), expected_mlvalue.Get<VectorMapStringToFloat>(),
+                                    per_sample_tolerance, relative_per_sample_tolerance, post_processing);
+    }
+    return std::make_pair(COMPARE_RESULT::NOT_SUPPORT, "");
+#else
+    return std::make_pair(COMPARE_RESULT::NOT_SUPPORT, "Map type is not supported in this build.");
+#endif
+  }
+}
+
+std::pair<COMPARE_RESULT, std::string> CompareOrtValue(const OrtValue& o, const OrtValue& expected_mlvalue,
+                                                       double per_sample_tolerance,
+                                                       double relative_per_sample_tolerance, bool post_processing, int32_t out_idx) {
+  if (o.Type() != expected_mlvalue.Type()) {
+    return std::make_pair(COMPARE_RESULT::TYPE_MISMATCH, "");
+  }
+  if (o.IsTensor()) {
+    const Tensor& outvalue = o.Get<Tensor>();
+    const Tensor& expected_tensor = expected_mlvalue.Get<Tensor>();
+    if (outvalue.DataType() != expected_tensor.DataType()) {
+      std::ostringstream oss;
+      oss << "expect " << ElementTypeToString(expected_tensor.DataType()) << " got "
+          << ElementTypeToString(outvalue.DataType());
+      return std::make_pair(COMPARE_RESULT::TYPE_MISMATCH, oss.str());
+    }
+    return CompareTwoTensors(outvalue, expected_tensor, per_sample_tolerance, relative_per_sample_tolerance,
+                             post_processing, out_idx);
   } else if (o.IsSparseTensor()) {
 #if !defined(DISABLE_SPARSE_TENSORS)
     TEST_RETURN_IF_NOT(expected_mlvalue.IsSparseTensor(), COMPARE_RESULT::TYPE_MISMATCH,
@@ -542,7 +686,7 @@ std::pair<COMPARE_RESULT, std::string> CompareOrtValue(const OrtValue& o, const
 
     for (size_t i = 0; i < expected_tensor_count; ++i) {
       auto res = CompareTwoTensors(actual_tensor_seq.Get(i), expected_tensor_seq.Get(i), per_sample_tolerance, relative_per_sample_tolerance,
-                                   post_processing);
+                                   post_processing, out_idx);
       if (res.first != COMPARE_RESULT::SUCCESS) {
         return res;
       }
diff --git a/onnxruntime/test/util/include/compare_ortvalue.h b/onnxruntime/test/util/include/compare_ortvalue.h
index 24b74b9002..8269346528 100644
--- a/onnxruntime/test/util/include/compare_ortvalue.h
+++ b/onnxruntime/test/util/include/compare_ortvalue.h
@@ -24,7 +24,9 @@ enum class COMPARE_RESULT { SUCCESS,
 std::pair<COMPARE_RESULT, std::string> CompareOrtValue(const OrtValue& real, const OrtValue& expected,
                                                        double per_sample_tolerance,
                                                        double relative_per_sample_tolerance, bool post_processing);
-
+std::pair<COMPARE_RESULT, std::string> CompareOrtValue(const OrtValue& real, const OrtValue& expected,
+                                                       double per_sample_tolerance,
+                                                       double relative_per_sample_tolerance, bool post_processing, int32_t out_idx);
 // verify if the 'value' matches the 'expected' ValueInfoProto. 'value' is a model output
 std::pair<COMPARE_RESULT, std::string> VerifyValueInfo(const ONNX_NAMESPACE::ValueInfoProto& expected,
                                                        const OrtValue* value);
diff --git a/onnxruntime/test/util/include/test/compare_ortvalue.h b/onnxruntime/test/util/include/test/compare_ortvalue.h
index 545df706c9..170eb9dc4c 100644
--- a/onnxruntime/test/util/include/test/compare_ortvalue.h
+++ b/onnxruntime/test/util/include/test/compare_ortvalue.h
@@ -28,7 +28,9 @@ enum class COMPARE_RESULT {
 std::pair<COMPARE_RESULT, std::string> CompareOrtValue(const OrtValue& real, const OrtValue& expected,
                                                        double per_sample_tolerance,
                                                        double relative_per_sample_tolerance, bool post_processing);
-
+std::pair<COMPARE_RESULT, std::string> CompareOrtValue(const OrtValue& real, const OrtValue& expected,
+                                                       double per_sample_tolerance,
+                                                       double relative_per_sample_tolerance, bool post_processing, int32_t out_idx);
 // Compare two OrtValue numerically equal or not. The difference with CompareOrtValue is that this function
 // will only check the numerical values of the OrtValue, and ignore the type, shape, etc.
 //
