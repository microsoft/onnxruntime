// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#include "gtest/gtest.h"

#include "test/providers/provider_test_utils.h"
#include "test/providers/run_options_config_keys.h"
#include "test/common/dnnl_op_test_utils.h"
#include "test/common/cuda_op_test_utils.h"
#include "test/common/tensor_op_test_utils.h"
#include "default_providers.h"

namespace onnxruntime {
namespace test {

namespace {

const onnxruntime::RunOptions run_options = []() {
  onnxruntime::RunOptions options{};
  ORT_THROW_IF_ERROR(options.config_options.AddConfigEntry(kOpTesterRunOptionsConfigTestTunableOp, "true"));
  return options;
}();

const constexpr auto run_with_tunable_op = &run_options;

}  // namespace

template <typename T>
struct MatMulTestData {
  std::string name;
  std::vector<int64_t> input0_dims;
  std::vector<int64_t> input1_dims;
  std::vector<int64_t> expected_dims;
  std::vector<T> expected_vals;
};

template <typename T>
std::vector<MatMulTestData<T>> GenerateTestCases() {
  std::vector<MatMulTestData<T>> test_cases;

  auto real_expected_vals = [](const std::vector<int32_t>& expected_vals) {
    if constexpr (std::is_same_v<T, int32_t>) {
      return expected_vals;
    } else if constexpr (std::is_same_v<T, MLFloat16>) {
      std::vector<MLFloat16> expected_vals_fp16(expected_vals.size());
      std::transform(expected_vals.begin(), expected_vals.end(), expected_vals_fp16.begin(),
                     [](int32_t num) { return MLFloat16(float(num)); });
      return expected_vals_fp16;
    } else {
      std::vector<T> real_expected_vals(expected_vals.size());
      std::transform(expected_vals.begin(), expected_vals.end(), real_expected_vals.begin(),
                     [](int32_t num) { return static_cast<T>(num); });
      return real_expected_vals;
    }
  };

  test_cases.push_back(
      {"test padding and broadcast A > B",
       {3, 1, 1, 2},
       {2, 2, 2},
       {3, 2, 1, 2},
       real_expected_vals({2, 3, 6, 7, 6, 11, 26, 31, 10, 19, 46, 55})});

  test_cases.push_back(
      {"test padding and broadcast B > A",
       {2, 3, 2},
       {3, 2, 2, 1},
       {3, 2, 3, 1},
       real_expected_vals({1, 3, 5, 33, 43, 53, 5, 23, 41, 85, 111, 137, 9, 43, 77, 137, 179, 221})});

  test_cases.push_back(
      {"test left 1D",
       {2},
       {3, 2, 1},
       {3, 1},
       real_expected_vals({1, 3, 5})});

  test_cases.push_back(
      {"test right 1D",
       {3, 1, 2},
       {2},
       {3, 1},
       real_expected_vals({1, 3, 5})});

  test_cases.push_back(
      {"test left 1D right 2D",
       {2},
       {2, 3},
       {3},
       real_expected_vals({3, 4, 5})});

  test_cases.push_back(
      {"test scalar output",
       {3},
       {3},
       {},
       real_expected_vals({5})});

  test_cases.push_back(
      {"test 2D",
       {3, 4},
       {4, 3},
       {3, 3},
       real_expected_vals({42, 48, 54, 114, 136, 158, 186, 224, 262})});

  test_cases.push_back(
      {"test 2D special",
       {2, 2, 3},
       {3, 4},
       {2, 2, 4},
       real_expected_vals({20, 23, 26, 29, 56, 68, 80, 92, 92, 113, 134, 155, 128, 158, 188, 218})});

  test_cases.push_back(
      {"test 2D special 2",
       {2, 2, 3},
       {1, 3, 4},
       {2, 2, 4},
       real_expected_vals({20, 23, 26, 29, 56, 68, 80, 92, 92, 113, 134, 155, 128, 158, 188, 218})});

  test_cases.push_back(
      {"test 2D special 3",
       {2, 6},
       {1, 1, 6, 1},
       {1, 1, 2, 1},
       real_expected_vals({55, 145})});

  test_cases.push_back(
      {"test 2D empty input",
       {3, 4},
       {4, 0},
       {3, 0},
       real_expected_vals({})});

  test_cases.push_back(
      {"test 3D batch",
       {3, 1, 3},
       {3, 3, 2},
       {3, 1, 2},
       real_expected_vals({
           // clang-format off
              10,  13,
             100, 112,
             298, 319,
           // clang-format on
       })});

  test_cases.push_back(
      {"test 4D batch",
       {2, 2, 1, 3},
       {2, 2, 3, 2},
       {2, 2, 1, 2},
       real_expected_vals({
           // clang-format off
              10,  13,
             100, 112,
             298, 319,
             604, 634,
           // clang-format on
       })});

#ifdef USE_WEBGPU
  test_cases.push_back(
      {"test 3D tensors with M = 1",
       {6, 1, 8},
       {1, 8, 3},
       {6, 1, 3},
       real_expected_vals({
           // clang-format off
              420, 448, 476,
              1092, 1184, 1276,
              1764, 1920, 2076,
              2436, 2656, 2876,
              3108, 3392, 3676,
              3780, 4128, 4476,
           // clang-format on
       })});

  test_cases.push_back(
      {"test 4D tensors with M = 1",
       {2, 3, 1, 8},
       {1, 1, 8, 3},
       {2, 3, 1, 3},
       real_expected_vals({420, 448, 476, 1092, 1184, 1276, 1764, 1920, 2076, 2436, 2656, 2876, 3108, 3392, 3676, 3780, 4128, 4476})});

  test_cases.push_back(
      {"test 4D tensors",
       {2, 3, 4, 3},
       {2, 3, 3, 5},
       {2, 3, 4, 5},
       real_expected_vals({
           // clang-format off
            25, 28, 31, 34, 37, 70, 82, 94, 106, 118, 115, 136, 157, 178, 199, 160, 190, 220,
            250, 280, 790, 829, 868, 907, 946, 970, 1018, 1066, 1114, 1162, 1150, 1207, 1264,
            1321, 1378, 1330, 1396, 1462, 1528, 1594, 2635, 2710, 2785, 2860, 2935, 2950, 3034,
            3118, 3202, 3286, 3265, 3358, 3451, 3544, 3637, 3580, 3682, 3784, 3886, 3988, 5560,
            5671, 5782, 5893, 6004, 6010, 6130, 6250, 6370, 6490, 6460, 6589, 6718, 6847, 6976,
            6910, 7048, 7186, 7324, 7462, 9565, 9712, 9859, 10006, 10153, 10150, 10306, 10462,
            10618, 10774, 10735, 10900, 11065, 11230, 11395, 11320, 11494, 11668, 11842, 12016,
            14650, 14833, 15016, 15199, 15382, 15370, 15562, 15754, 15946, 16138, 16090, 16291,
            16492, 16693, 16894, 16810, 17020, 17230, 17440, 17650
           // clang-format on
       })});

  // Test case: multiplies 2D broadcasted to 4D tensors
  test_cases.push_back(
      {"test 2D broadcasted to 4D tensors",
       {2, 4},
       {4, 3, 2, 4, 2},
       {4, 3, 2, 2, 2},
       real_expected_vals({
           // clang-format off
            28, 34, 76, 98, 76, 82, 252, 274, 124, 130, 428, 450, 172, 178, 604, 626,
            220, 226, 780, 802, 268, 274, 956, 978, 316, 322, 1132, 1154, 364, 370,
            1308, 1330, 412, 418, 1484, 1506, 460, 466, 1660, 1682, 508, 514, 1836,
            1858, 556, 562, 2012, 2034, 604, 610, 2188, 2210, 652, 658, 2364, 2386,
            700, 706, 2540, 2562, 748, 754, 2716, 2738, 796, 802, 2892, 2914, 844,
            850, 3068, 3090, 892, 898, 3244, 3266, 940, 946, 3420, 3442, 988, 994,
            3596, 3618, 1036, 1042, 3772, 3794, 1084, 1090, 3948, 3970, 1132, 1138,
            4124, 4146
           // clang-format on
       })});

  // Test case: multiplies 4D broadcasted to 5D tensors
  test_cases.push_back(
      {"test 4D broadcasted to 5D tensors",
       {3, 1, 2, 4},
       {4, 3, 2, 4, 2},
       {4, 3, 2, 2, 2},
       real_expected_vals({
           // clang-format off
              28, 34, 76, 98, 76, 82, 252, 274, 732, 770, 1036, 1090, 1036, 1074, 1468,
              1522, 2460, 2530, 3020, 3106, 3020, 3090, 3708, 3794, 316, 322, 1132,
              1154, 364, 370, 1308, 1330, 2556, 2594, 3628, 3682, 2860, 2898, 4060,
              4114, 5820, 5890, 7148, 7234, 6380, 6450, 7836, 7922, 604, 610, 2188,
              2210, 652, 658, 2364, 2386, 4380, 4418, 6220, 6274, 4684, 4722, 6652,
              6706, 9180, 9250, 11276, 11362, 9740, 9810, 11964, 12050, 892, 898, 3244,
              3266, 940, 946, 3420, 3442, 6204, 6242, 8812, 8866, 6508, 6546, 9244,
              9298, 12540, 12610, 15404, 15490, 13100, 13170, 16092, 16178

           // clang-format on
       })});

  // Test case: same ranks different broadcast small 1
  test_cases.push_back(
      {"test same ranks different broadcast small 1",
       {2, 1, 2, 2},
       {1, 2, 2, 1},
       {2, 2, 2, 1},
       real_expected_vals({1, 3, 3, 13, 5, 7, 23, 33})});

  // Test case: same ranks different broadcast larger 0
  test_cases.push_back(
      {"test same ranks different broadcast larger 0",
       {1, 2, 2, 8},
       {2, 1, 8, 1},
       {2, 2, 2, 1},
       real_expected_vals({140, 364, 588, 812, 364, 1100, 1836, 2572})});

  // Test case: same ranks different broadcast larger 1
  test_cases.push_back(
      {"test same ranks different broadcast larger 1",
       {2, 1, 2, 8},
       {1, 2, 8, 1},
       {2, 2, 2, 1},
       real_expected_vals({140, 364, 364, 1100, 588, 812, 1836, 2572})});

  // Test case: 33 * 33 matrix for vec1
  test_cases.push_back(
      {"test one batch 33 * 33 matrix",
       {2, 1, 9, 33},
       {1, 2, 33, 10},
       {2, 2, 9, 10},
       real_expected_vals({114400, 114928, 115456, 115984, 116512, 117040, 117568, 118096, 118624, 119152, 288640, 290257, 291874, 293491, 295108, 296725, 298342, 299959, 301576, 303193, 462880, 465586, 468292, 470998, 473704, 476410, 479116, 481822, 484528, 487234, 637120, 640915, 644710, 648505, 652300, 656095, 659890, 663685, 667480, 671275, 811360, 816244, 821128, 826012, 830896, 835780, 840664, 845548, 850432, 855316, 985600, 991573, 997546, 1003519, 1009492, 1015465, 1021438, 1027411, 1033384, 1039357, 1159840, 1166902, 1173964, 1181026, 1188088, 1195150, 1202212, 1209274, 1216336, 1223398, 1334080, 1342231, 1350382, 1358533, 1366684, 1374835, 1382986, 1391137, 1399288, 1407439, 1508320, 1517560, 1526800, 1536040, 1545280, 1554520, 1563760, 1573000, 1582240, 1591480, 288640, 289168, 289696, 290224, 290752, 291280, 291808, 292336, 292864, 293392, 822250, 823867, 825484, 827101, 828718, 830335, 831952, 833569, 835186, 836803, 1355860, 1358566, 1361272, 1363978, 1366684, 1369390, 1372096, 1374802, 1377508, 1380214, 1889470, 1893265, 1897060, 1900855, 1904650, 1908445, 1912240, 1916035, 1919830, 1923625, 2423080, 2427964, 2432848, 2437732, 2442616, 2447500, 2452384, 2457268, 2462152, 2467036, 2956690, 2962663, 2968636, 2974609, 2980582, 2986555, 2992528, 2998501, 3004474, 3010447, 3490300, 3497362, 3504424, 3511486, 3518548, 3525610, 3532672, 3539734, 3546796, 3553858, 4023910, 4032061, 4040212, 4048363, 4056514, 4064665, 4072816, 4080967, 4089118, 4097269, 4557520, 4566760, 4576000, 4585240, 4594480, 4603720, 4612960, 4622200, 4631440, 4640680, 1682560, 1692889, 1703218, 1713547, 1723876, 1734205, 1744534, 1754863, 1765192, 1775521, 1856800, 1868218, 1879636, 1891054, 1902472, 1913890, 1925308, 1936726, 1948144, 1959562, 2031040, 2043547, 2056054, 2068561, 2081068, 2093575, 2106082, 2118589, 2131096, 2143603, 2205280, 2218876, 2232472, 2246068, 2259664, 2273260, 2286856, 2300452, 2314048, 2327644, 2379520, 2394205, 2408890, 2423575, 2438260, 2452945, 2467630, 2482315, 2497000, 2511685, 2553760, 2569534, 2585308, 2601082, 2616856, 2632630, 2648404, 2664178, 2679952, 2695726, 2728000, 2744863, 2761726, 2778589, 2795452, 2812315, 2829178, 2846041, 2862904, 2879767, 2902240, 2920192, 2938144, 2956096, 2974048, 2992000, 3009952, 3027904, 3045856, 3063808, 3076480, 3095521, 3114562, 3133603, 3152644, 3171685, 3190726, 3209767, 3228808, 3247849, 5091130, 5101459, 5111788, 5122117, 5132446, 5142775, 5153104, 5163433, 5173762, 5184091, 5624740, 5636158, 5647576, 5658994, 5670412, 5681830, 5693248, 5704666, 5716084, 5727502, 6158350, 6170857, 6183364, 6195871, 6208378, 6220885, 6233392, 6245899, 6258406, 6270913, 6691960, 6705556, 6719152, 6732748, 6746344, 6759940, 6773536, 6787132, 6800728, 6814324, 7225570, 7240255, 7254940, 7269625, 7284310, 7298995, 7313680, 7328365, 7343050, 7357735, 7759180, 7774954, 7790728, 7806502, 7822276, 7838050, 7853824, 7869598, 7885372, 7901146, 8292790, 8309653, 8326516, 8343379, 8360242, 8377105, 8393968, 8410831, 8427694, 8444557, 8826400, 8844352, 8862304, 8880256, 8898208, 8916160, 8934112, 8952064, 8970016, 8987968, 9360010, 9379051, 9398092, 9417133, 9436174, 9455215, 9474256, 9493297, 9512338, 9531379})});

  // Test case: 17* 32, 32 * 67 matrix for vec1
  test_cases.push_back(
      {"test one batch 5 * 32, 32 * 67 matrix",
       {1, 5, 32},
       {1, 32, 67},
       {1, 5, 67},
       real_expected_vals({697872, 698368, 698864, 699360, 699856, 700352, 700848, 701344, 701840, 702336, 702832, 703328, 703824, 704320, 704816, 705312, 705808, 706304, 706800, 707296, 707792, 708288, 708784, 709280, 709776, 710272, 710768, 711264, 711760, 712256, 712752, 713248, 713744, 714240, 714736, 715232, 715728, 716224, 716720, 717216, 717712, 718208, 718704, 719200, 719696, 720192, 720688, 721184, 721680, 722176, 722672, 723168, 723664, 724160, 724656, 725152, 725648, 726144, 726640, 727136, 727632, 728128, 728624, 729120, 729616, 730112, 730608, 1761296, 1762816, 1764336, 1765856, 1767376, 1768896, 1770416, 1771936, 1773456, 1774976, 1776496, 1778016, 1779536, 1781056, 1782576, 1784096, 1785616, 1787136, 1788656, 1790176, 1791696, 1793216, 1794736, 1796256, 1797776, 1799296, 1800816, 1802336, 1803856, 1805376, 1806896, 1808416, 1809936, 1811456, 1812976, 1814496, 1816016, 1817536, 1819056, 1820576, 1822096, 1823616, 1825136, 1826656, 1828176, 1829696, 1831216, 1832736, 1834256, 1835776, 1837296, 1838816, 1840336, 1841856, 1843376, 1844896, 1846416, 1847936, 1849456, 1850976, 1852496, 1854016, 1855536, 1857056, 1858576, 1860096, 1861616, 2824720, 2827264, 2829808, 2832352, 2834896, 2837440, 2839984, 2842528, 2845072, 2847616, 2850160, 2852704, 2855248, 2857792, 2860336, 2862880, 2865424, 2867968, 2870512, 2873056, 2875600, 2878144, 2880688, 2883232, 2885776, 2888320, 2890864, 2893408, 2895952, 2898496, 2901040, 2903584, 2906128, 2908672, 2911216, 2913760, 2916304, 2918848, 2921392, 2923936, 2926480, 2929024, 2931568, 2934112, 2936656, 2939200, 2941744, 2944288, 2946832, 2949376, 2951920, 2954464, 2957008, 2959552, 2962096, 2964640, 2967184, 2969728, 2972272, 2974816, 2977360, 2979904, 2982448, 2984992, 2987536, 2990080, 2992624, 3888144, 3891712, 3895280, 3898848, 3902416, 3905984, 3909552, 3913120, 3916688, 3920256, 3923824, 3927392, 3930960, 3934528, 3938096, 3941664, 3945232, 3948800, 3952368, 3955936, 3959504, 3963072, 3966640, 3970208, 3973776, 3977344, 3980912, 3984480, 3988048, 3991616, 3995184, 3998752, 4002320, 4005888, 4009456, 4013024, 4016592, 4020160, 4023728, 4027296, 4030864, 4034432, 4038000, 4041568, 4045136, 4048704, 4052272, 4055840, 4059408, 4062976, 4066544, 4070112, 4073680, 4077248, 4080816, 4084384, 4087952, 4091520, 4095088, 4098656, 4102224, 4105792, 4109360, 4112928, 4116496, 4120064, 4123632, 4951568, 4956160, 4960752, 4965344, 4969936, 4974528, 4979120, 4983712, 4988304, 4992896, 4997488, 5002080, 5006672, 5011264, 5015856, 5020448, 5025040, 5029632, 5034224, 5038816, 5043408, 5048000, 5052592, 5057184, 5061776, 5066368, 5070960, 5075552, 5080144, 5084736, 5089328, 5093920, 5098512, 5103104, 5107696, 5112288, 5116880, 5121472, 5126064, 5130656, 5135248, 5139840, 5144432, 5149024, 5153616, 5158208, 5162800, 5167392, 5171984, 5176576, 5181168, 5185760, 5190352, 5194944, 5199536, 5204128, 5208720, 5213312, 5217904, 5222496, 5227088, 5231680, 5236272, 5240864, 5245456, 5250048, 5254640})});

  // Test case: 32 * 32 matrix for vec4
  test_cases.push_back(
      {"test one batch 32 * 32 matrix",
       {1, 1, 32, 32},
       {1, 1, 32, 32},
       {1, 1, 32, 32},
       real_expected_vals({333312, 333808, 334304, 334800, 335296, 335792, 336288, 336784, 337280, 337776, 338272, 338768, 339264, 339760, 340256, 340752, 341248, 341744, 342240, 342736, 343232, 343728, 344224, 344720, 345216, 345712, 346208, 346704, 347200, 347696, 348192, 348688, 841216, 842736, 844256, 845776, 847296, 848816, 850336, 851856, 853376, 854896, 856416, 857936, 859456, 860976, 862496, 864016, 865536, 867056, 868576, 870096, 871616, 873136, 874656, 876176, 877696, 879216, 880736, 882256, 883776, 885296, 886816, 888336, 1349120, 1351664, 1354208, 1356752, 1359296, 1361840, 1364384, 1366928, 1369472, 1372016, 1374560, 1377104, 1379648, 1382192, 1384736, 1387280, 1389824, 1392368, 1394912, 1397456, 1400000, 1402544, 1405088, 1407632, 1410176, 1412720, 1415264, 1417808, 1420352, 1422896, 1425440, 1427984, 1857024, 1860592, 1864160, 1867728, 1871296, 1874864, 1878432, 1882000, 1885568, 1889136, 1892704, 1896272, 1899840, 1903408, 1906976, 1910544, 1914112, 1917680, 1921248, 1924816, 1928384, 1931952, 1935520, 1939088, 1942656, 1946224, 1949792, 1953360, 1956928, 1960496, 1964064, 1967632, 2364928, 2369520, 2374112, 2378704, 2383296, 2387888, 2392480, 2397072, 2401664, 2406256, 2410848, 2415440, 2420032, 2424624, 2429216, 2433808, 2438400, 2442992, 2447584, 2452176, 2456768, 2461360, 2465952, 2470544, 2475136, 2479728, 2484320, 2488912, 2493504, 2498096, 2502688, 2507280, 2872832, 2878448, 2884064, 2889680, 2895296, 2900912, 2906528, 2912144, 2917760, 2923376, 2928992, 2934608, 2940224, 2945840, 2951456, 2957072, 2962688, 2968304, 2973920, 2979536, 2985152, 2990768, 2996384, 3002000, 3007616, 3013232, 3018848, 3024464, 3030080, 3035696, 3041312, 3046928, 3380736, 3387376, 3394016, 3400656, 3407296, 3413936, 3420576, 3427216, 3433856, 3440496, 3447136, 3453776, 3460416, 3467056, 3473696, 3480336, 3486976, 3493616, 3500256, 3506896, 3513536, 3520176, 3526816, 3533456, 3540096, 3546736, 3553376, 3560016, 3566656, 3573296, 3579936, 3586576, 3888640, 3896304, 3903968, 3911632, 3919296, 3926960, 3934624, 3942288, 3949952, 3957616, 3965280, 3972944, 3980608, 3988272, 3995936, 4003600, 4011264, 4018928, 4026592, 4034256, 4041920, 4049584, 4057248, 4064912, 4072576, 4080240, 4087904, 4095568, 4103232, 4110896, 4118560, 4126224, 4396544, 4405232, 4413920, 4422608, 4431296, 4439984, 4448672, 4457360, 4466048, 4474736, 4483424, 4492112, 4500800, 4509488, 4518176, 4526864, 4535552, 4544240, 4552928, 4561616, 4570304, 4578992, 4587680, 4596368, 4605056, 4613744, 4622432, 4631120, 4639808, 4648496, 4657184, 4665872, 4904448, 4914160, 4923872, 4933584, 4943296, 4953008, 4962720, 4972432, 4982144, 4991856, 5001568, 5011280, 5020992, 5030704, 5040416, 5050128, 5059840, 5069552, 5079264, 5088976, 5098688, 5108400, 5118112, 5127824, 5137536, 5147248, 5156960, 5166672, 5176384, 5186096, 5195808, 5205520, 5412352, 5423088, 5433824, 5444560, 5455296, 5466032, 5476768, 5487504, 5498240, 5508976, 5519712, 5530448, 5541184, 5551920, 5562656, 5573392, 5584128, 5594864, 5605600, 5616336, 5627072, 5637808, 5648544, 5659280, 5670016, 5680752, 5691488, 5702224, 5712960, 5723696, 5734432, 5745168, 5920256, 5932016, 5943776, 5955536, 5967296, 5979056, 5990816, 6002576, 6014336, 6026096, 6037856, 6049616, 6061376, 6073136, 6084896, 6096656, 6108416, 6120176, 6131936, 6143696, 6155456, 6167216, 6178976, 6190736, 6202496, 6214256, 6226016, 6237776, 6249536, 6261296, 6273056, 6284816, 6428160, 6440944, 6453728, 6466512, 6479296, 6492080, 6504864, 6517648, 6530432, 6543216, 6556000, 6568784, 6581568, 6594352, 6607136, 6619920, 6632704, 6645488, 6658272, 6671056, 6683840, 6696624, 6709408, 6722192, 6734976, 6747760, 6760544, 6773328, 6786112, 6798896, 6811680, 6824464, 6936064, 6949872, 6963680, 6977488, 6991296, 7005104, 7018912, 7032720, 7046528, 7060336, 7074144, 7087952, 7101760, 7115568, 7129376, 7143184, 7156992, 7170800, 7184608, 7198416, 7212224, 7226032, 7239840, 7253648, 7267456, 7281264, 7295072, 7308880, 7322688, 7336496, 7350304, 7364112, 7443968, 7458800, 7473632, 7488464, 7503296, 7518128, 7532960, 7547792, 7562624, 7577456, 7592288, 7607120, 7621952, 7636784, 7651616, 7666448, 7681280, 7696112, 7710944, 7725776, 7740608, 7755440, 7770272, 7785104, 7799936, 7814768, 7829600, 7844432, 7859264, 7874096, 7888928, 7903760, 7951872, 7967728, 7983584, 7999440, 8015296, 8031152, 8047008, 8062864, 8078720, 8094576, 8110432, 8126288, 8142144, 8158000, 8173856, 8189712, 8205568, 8221424, 8237280, 8253136, 8268992, 8284848, 8300704, 8316560, 8332416, 8348272, 8364128, 8379984, 8395840, 8411696, 8427552, 8443408, 8459776, 8476656, 8493536, 8510416, 8527296, 8544176, 8561056, 8577936, 8594816, 8611696, 8628576, 8645456, 8662336, 8679216, 8696096, 8712976, 8729856, 8746736, 8763616, 8780496, 8797376, 8814256, 8831136, 8848016, 8864896, 8881776, 8898656, 8915536, 8932416, 8949296, 8966176, 8983056, 8967680, 8985584, 9003488, 9021392, 9039296, 9057200, 9075104, 9093008, 9110912, 9128816, 9146720, 9164624, 9182528, 9200432, 9218336, 9236240, 9254144, 9272048, 9289952, 9307856, 9325760, 9343664, 9361568, 9379472, 9397376, 9415280, 9433184, 9451088, 9468992, 9486896, 9504800, 9522704, 9475584, 9494512, 9513440, 9532368, 9551296, 9570224, 9589152, 9608080, 9627008, 9645936, 9664864, 9683792, 9702720, 9721648, 9740576, 9759504, 9778432, 9797360, 9816288, 9835216, 9854144, 9873072, 9892000, 9910928, 9929856, 9948784, 9967712, 9986640, 10005568, 10024496, 10043424, 10062352, 9983488, 10003440, 10023392, 10043344, 10063296, 10083248, 10103200, 10123152, 10143104, 10163056, 10183008, 10202960, 10222912, 10242864, 10262816, 10282768, 10302720, 10322672, 10342624, 10362576, 10382528, 10402480, 10422432, 10442384, 10462336, 10482288, 10502240, 10522192, 10542144, 10562096, 10582048, 10602000, 10491392, 10512368, 10533344, 10554320, 10575296, 10596272, 10617248, 10638224, 10659200, 10680176, 10701152, 10722128, 10743104, 10764080, 10785056, 10806032, 10827008, 10847984, 10868960, 10889936, 10910912, 10931888, 10952864, 10973840, 10994816, 11015792, 11036768, 11057744, 11078720, 11099696, 11120672, 11141648, 10999296, 11021296, 11043296, 11065296, 11087296, 11109296, 11131296, 11153296, 11175296, 11197296, 11219296, 11241296, 11263296, 11285296, 11307296, 11329296, 11351296, 11373296, 11395296, 11417296, 11439296, 11461296, 11483296, 11505296, 11527296, 11549296, 11571296, 11593296, 11615296, 11637296, 11659296, 11681296, 11507200, 11530224, 11553248, 11576272, 11599296, 11622320, 11645344, 11668368, 11691392, 11714416, 11737440, 11760464, 11783488, 11806512, 11829536, 11852560, 11875584, 11898608, 11921632, 11944656, 11967680, 11990704, 12013728, 12036752, 12059776, 12082800, 12105824, 12128848, 12151872, 12174896, 12197920, 12220944, 12015104, 12039152, 12063200, 12087248, 12111296, 12135344, 12159392, 12183440, 12207488, 12231536, 12255584, 12279632, 12303680, 12327728, 12351776, 12375824, 12399872, 12423920, 12447968, 12472016, 12496064, 12520112, 12544160, 12568208, 12592256, 12616304, 12640352, 12664400, 12688448, 12712496, 12736544, 12760592, 12523008, 12548080, 12573152, 12598224, 12623296, 12648368, 12673440, 12698512, 12723584, 12748656, 12773728, 12798800, 12823872, 12848944, 12874016, 12899088, 12924160, 12949232, 12974304, 12999376, 13024448, 13049520, 13074592, 13099664, 13124736, 13149808, 13174880, 13199952, 13225024, 13250096, 13275168, 13300240, 13030912, 13057008, 13083104, 13109200, 13135296, 13161392, 13187488, 13213584, 13239680, 13265776, 13291872, 13317968, 13344064, 13370160, 13396256, 13422352, 13448448, 13474544, 13500640, 13526736, 13552832, 13578928, 13605024, 13631120, 13657216, 13683312, 13709408, 13735504, 13761600, 13787696, 13813792, 13839888, 13538816, 13565936, 13593056, 13620176, 13647296, 13674416, 13701536, 13728656, 13755776, 13782896, 13810016, 13837136, 13864256, 13891376, 13918496, 13945616, 13972736, 13999856, 14026976, 14054096, 14081216, 14108336, 14135456, 14162576, 14189696, 14216816, 14243936, 14271056, 14298176, 14325296, 14352416, 14379536, 14046720, 14074864, 14103008, 14131152, 14159296, 14187440, 14215584, 14243728, 14271872, 14300016, 14328160, 14356304, 14384448, 14412592, 14440736, 14468880, 14497024, 14525168, 14553312, 14581456, 14609600, 14637744, 14665888, 14694032, 14722176, 14750320, 14778464, 14806608, 14834752, 14862896, 14891040, 14919184, 14554624, 14583792, 14612960, 14642128, 14671296, 14700464, 14729632, 14758800, 14787968, 14817136, 14846304, 14875472, 14904640, 14933808, 14962976, 14992144, 15021312, 15050480, 15079648, 15108816, 15137984, 15167152, 15196320, 15225488, 15254656, 15283824, 15312992, 15342160, 15371328, 15400496, 15429664, 15458832, 15062528, 15092720, 15122912, 15153104, 15183296, 15213488, 15243680, 15273872, 15304064, 15334256, 15364448, 15394640, 15424832, 15455024, 15485216, 15515408, 15545600, 15575792, 15605984, 15636176, 15666368, 15696560, 15726752, 15756944, 15787136, 15817328, 15847520, 15877712, 15907904, 15938096, 15968288, 15998480, 15570432, 15601648, 15632864, 15664080, 15695296, 15726512, 15757728, 15788944, 15820160, 15851376, 15882592, 15913808, 15945024, 15976240, 16007456, 16038672, 16069888, 16101104, 16132320, 16163536, 16194752, 16225968, 16257184, 16288400, 16319616, 16350832, 16382048, 16413264, 16444480, 16475696, 16506912, 16538128, 16078336, 16110576, 16142816, 16175056, 16207296, 16239536, 16271776, 16304016, 16336256, 16368496, 16400736, 16432976, 16465216, 16497456, 16529696, 16561936, 16594176, 16626416, 16658656, 16690896, 16723136, 16755376, 16787616, 16819856, 16852096, 16884336, 16916576, 16948816, 16981056, 17013296, 17045536, 17077776})});

  // Test case: 34 * 68, 68 * 72 for vec4 and multiple workgroups
  test_cases.push_back(
      {"test 34 * 68, 68 * 72",
       {34, 68},
       {68, 72},
       {34, 72},
       real_expected_vals({7380720, 7382998, 7385276, 7387554, 7389832, 7392110, 7394388, 7396666, 7398944, 7401222, 7403500, 7405778, 7408056, 7410334, 7412612, 7414890, 7417168, 7419446, 7421724, 7424002, 7426280, 7428558, 7430836, 7433114, 7435392, 7437670, 7439948, 7442226, 7444504, 7446782, 7449060, 7451338, 7453616, 7455894, 7458172, 7460450, 7462728, 7465006, 7467284, 7469562, 7471840, 7474118, 7476396, 7478674, 7480952, 7483230, 7485508, 7487786, 7490064, 7492342, 7494620, 7496898, 7499176, 7501454, 7503732, 7506010, 7508288, 7510566, 7512844, 7515122, 7517400, 7519678, 7521956, 7524234, 7526512, 7528790, 7531068, 7533346, 7535624, 7537902, 7540180, 7542458, 18533808, 18540708, 18547612, 18554516, 18561416, 18568316, 18575220, 18582124, 18589024, 18595924, 18602828, 18609732, 18616632, 18623532, 18630436, 18637340, 18644240, 18651140, 18658044, 18664948, 18671848, 18678748, 18685652, 18692556, 18699456, 18706356, 18713260, 18720164, 18727064, 18733964, 18740868, 18747772, 18754672, 18761572, 18768476, 18775380, 18782280, 18789180, 18796084, 18802988, 18809888, 18816788, 18823692, 18830596, 18837496, 18844396, 18851300, 18858204, 18865104, 18872004, 18878908, 18885812, 18892712, 18899612, 18906516, 18913420, 18920320, 18927220, 18934124, 18941028, 18947928, 18954828, 18961732, 18968636, 18975536, 18982436, 18989340, 18996244, 19003144, 19010044, 19016948, 19023852, 29686896, 29698416, 29709948, 29721480, 29733000, 29744520, 29756052, 29767584, 29779104, 29790624, 29802156, 29813688, 29825208, 29836728, 29848260, 29859792, 29871312, 29882832, 29894364, 29905896, 29917416, 29928936, 29940468, 29952000, 29963520, 29975040, 29986572, 29998104, 30009624, 30021144, 30032676, 30044208, 30055728, 30067248, 30078780, 30090312, 30101832, 30113352, 30124884, 30136416, 30147936, 30159456, 30170988, 30182520, 30194040, 30205560, 30217092, 30228624, 30240144, 30251664, 30263196, 30274728, 30286248, 30297768, 30309300, 30320832, 30332352, 30343872, 30355404, 30366936, 30378456, 30389976, 30401508, 30413040, 30424560, 30436080, 30447612, 30459144, 30470664, 30482184, 30493716, 30505248, 40839984, 40856130, 40872280, 40888444, 40904584, 40920724, 40936890, 40953040, 40969184, 40985330, 41001480, 41017644, 41033784, 41049924, 41066090, 41082240, 41098384, 41114530, 41130680, 41146844, 41162984, 41179124, 41195290, 41211440, 41227584, 41243730, 41259880, 41276044, 41292184, 41308324, 41324490, 41340640, 41356784, 41372930, 41389080, 41405244, 41421384, 41437524, 41453690, 41469840, 41485984, 41502130, 41518280, 41534444, 41550584, 41566724, 41582890, 41599040, 41615184, 41631330, 41647480, 41663644, 41679784, 41695924, 41712090, 41728240, 41744384, 41760530, 41776680, 41792844, 41808984, 41825124, 41841290, 41857440, 41873584, 41889730, 41905880, 41922044, 41938184, 41954324, 41970490, 41986640, 51993070, 52013836, 52034610, 52055410, 52076170, 52096930, 52117730, 52138500, 52159264, 52180028, 52200800, 52221600, 52242360, 52263120, 52283920, 52304692, 52325456, 52346220, 52366990, 52387790, 52408550, 52429310, 52450110, 52470884, 52491650, 52512412, 52533184, 52553984, 52574744, 52595504, 52616304, 52637076, 52657840, 52678604, 52699376, 52720176, 52740936, 52761696, 52782496, 52803268, 52824030, 52844796, 52865570, 52886370, 52907130, 52927890, 52948690, 52969460, 52990224, 53010988, 53031760, 53052560, 53073320, 53094080, 53114880, 53135652, 53156416, 53177180, 53197950, 53218750, 53239510, 53260270, 53281070, 53301844, 53322610, 53343372, 53364144, 53384944, 53405704, 53426464, 53447264, 53468036, 63146160, 63171544, 63196944, 63222364, 63247750, 63273140, 63298560, 63323960, 63349344, 63374730, 63400130, 63425548, 63450936, 63476324, 63501744, 63527144, 63552530, 63577910, 63603310, 63628732, 63654120, 63679508, 63704930, 63730330, 63755710, 63781096, 63806496, 63831916, 63857304, 63882692, 63908110, 63933510, 63958896, 63984280, 64009680, 64035100, 64060490, 64085876, 64111304, 64136696, 64162080, 64187464, 64212856, 64238284, 64263670, 64289060, 64314490, 64339880, 64365264, 64390650, 64416040, 64441468, 64466856, 64492244, 64517670, 64543064, 64568450, 64593830, 64619224, 64644652, 64670040, 64695428, 64720856, 64746250, 64771630, 64797016, 64822410, 64847836, 64873224, 64898612, 64924040, 64949430, 74299250, 74329250, 74359280, 74389320, 74419340, 74449350, 74479400, 74509420, 74539420, 74569420, 74599450, 74629496, 74659500, 74689530, 74719570, 74749600, 74779600, 74809600, 74839630, 74869670, 74899700, 74929704, 74959750, 74989780, 75019780, 75049780, 75079800, 75109850, 75139860, 75169880, 75199920, 75229950, 75259950, 75289950, 75319980, 75350024, 75380050, 75410056, 75440104, 75470130, 75500130, 75530130, 75560150, 75590200, 75620210, 75650230, 75680270, 75710300, 75740300, 75770300, 75800340, 75830376, 75860400, 75890410, 75920456, 75950480, 75980480, 76010480, 76040504, 76070550, 76100560, 76130584, 76160620, 76190660, 76220660, 76250660, 76280690, 76310740, 76340750, 76370750, 76400810, 76430830, 85452340, 85486980, 85521610, 85556290, 85590930, 85625550, 85660220, 85694860, 85729500, 85764140, 85798780, 85833460, 85868080, 85902720, 85937400, 85972030, 86006670, 86041310, 86075944, 86110620, 86145260, 86179890, 86214560, 86249200, 86283840, 86318480, 86353120, 86387790, 86422420, 86457060, 86491736, 86526370, 86561010, 86595650, 86630280, 86664960, 86699600, 86734220, 86768900, 86803540, 86838180, 86872820, 86907460, 86942130, 86976750, 87011390, 87046070, 87080700, 87115340, 87149980, 87184616, 87219300, 87253940, 87288560, 87323230, 87357870, 87392510, 87427150, 87461790, 87496460, 87531090, 87565730, 87600410, 87635040, 87669680, 87704320, 87738950, 87773630, 87808270, 87842900, 87877570, 87912210, 96605420, 96644670, 96683940, 96723250, 96762530, 96801760, 96841064, 96880340, 96919580, 96958830, 96998104, 97037410, 97076640, 97115920, 97155230, 97194500, 97233740, 97272990, 97312260, 97351570, 97390850, 97430080, 97469384, 97508660, 97547900, 97587150, 97626424, 97665730, 97704960, 97744240, 97783550, 97822820, 97862060, 97901310, 97940580, 97979890, 98019170, 98058400, 98097704, 98136980, 98176220, 98215470, 98254744, 98294050, 98333280, 98372560, 98411870, 98451140, 98490380, 98529630, 98568900, 98608210, 98647490, 98686720, 98726024, 98765300, 98804540, 98843790, 98883064, 98922370, 98961600, 99000880, 99040190, 99079460, 99118700, 99157950, 99197220, 99236530, 99275810, 99315040, 99354344, 99393620, 107758510, 107802390, 107846280, 107890216, 107934110, 107977960, 108021900, 108065784, 108109660, 108153544, 108197420, 108241370, 108285220, 108329110, 108373050, 108416936, 108460820, 108504696, 108548584, 108592520, 108636420, 108680264, 108724210, 108768090, 108811970, 108855850, 108899730, 108943670, 108987520, 109031416, 109075350, 109119240, 109163120, 109207000, 109250890, 109294824, 109338720, 109382570, 109426510, 109470390, 109514270, 109558150, 109602030, 109645976, 109689820, 109733720, 109777656, 109821544, 109865420, 109909304, 109953190, 109997130, 110041020, 110084870, 110128820, 110172696, 110216580, 110260456, 110304340, 110348280, 110392130, 110436024, 110479960, 110523850, 110567730, 110611610, 110655496, 110699430, 110743330, 110787176, 110831120, 110875000, 118911600, 118960104, 119008610, 119057160, 119105700, 119154184, 119202730, 119251240, 119299740, 119348250, 119396760, 119445304, 119493790, 119542330, 119590880, 119639384, 119687890, 119736390, 119784900, 119833450, 119881980, 119930470, 119979016, 120027530, 120076030, 120124536, 120173050, 120221610, 120270080, 120318600, 120367170, 120415670, 120464180, 120512680, 120561180, 120609750, 120658270, 120706744, 120755304, 120803816, 120852320, 120900824, 120949336, 120997896, 121046370, 121094890, 121143460, 121191960, 121240460, 121288970, 121337470, 121386040, 121434560, 121483030, 121531590, 121580104, 121628610, 121677110, 121725624, 121774184, 121822660, 121871176, 121919740, 121968250, 122016750, 122065256, 122113760, 122162330, 122210850, 122259320, 122307880, 122356390, 130064690, 130117820, 130170950, 130224130, 130277300, 130330380, 130383570, 130436690, 130489820, 130542960, 130596080, 130649260, 130702350, 130755520, 130808696, 130861820, 130914960, 130968100, 131021224, 131074400, 131127570, 131180660, 131233840, 131286960, 131340100, 131393230, 131446350, 131499540, 131552620, 131605790, 131658970, 131712100, 131765230, 131818370, 131871496, 131924670, 131977840, 132030930, 132084110, 132137230, 132190370, 132243500, 132296620, 132349810, 132402900, 132456060, 132509240, 132562370, 132615500, 132668640, 132721770, 132774940, 132828110, 132881200, 132934380, 132987500, 133040640, 133093780, 133146900, 133200080, 133253170, 133306340, 133359510, 133412640, 133465780, 133518910, 133572040, 133625220, 133678380, 133731470, 133784660, 133837780, 141217760, 141275540, 141333280, 141391090, 141448880, 141506600, 141564420, 141622160, 141679900, 141737650, 141795400, 141853220, 141910930, 141968720, 142026530, 142084270, 142142050, 142199790, 142257540, 142315340, 142373120, 142430850, 142488670, 142546420, 142604160, 142661900, 142719650, 142777470, 142835200, 142892980, 142950780, 143008530, 143066270, 143124050, 143181800, 143239600, 143297390, 143355100, 143412930, 143470670, 143528420, 143586160, 143643900, 143701730, 143759440, 143817230, 143875040, 143932780, 143990560, 144048300, 144106050, 144163860, 144221630, 144279360, 144337180, 144394930, 144452670, 144510420, 144568160, 144625980, 144683710, 144741490, 144799300, 144857040, 144914780, 144972560, 145030300, 145088110, 145145900, 145203620, 145261440, 145319180, 152370850, 152433230, 152495600, 152558050, 152620450, 152682800, 152745230, 152807630, 152869980, 152932340, 152994740, 153057170, 153119520, 153181920, 153244370, 153306740, 153369120, 153431470, 153493840, 153556290, 153618700, 153681040, 153743470, 153805870, 153868220, 153930580, 153992980, 154055410, 154117740, 154180160, 154242610, 154304980, 154367330, 154429710, 154492080, 154554530, 154616930, 154679280, 154741710, 154804110, 154866460, 154928820, 154991220, 155053650, 155116000, 155178400, 155240850, 155303220, 155365600, 155427950, 155490320, 155552770, 155615180, 155677520, 155739950, 155802350, 155864700, 155927060, 155989460, 156051890, 156114220, 156176640, 156239090, 156301460, 156363800, 156426190, 156488560, 156551000, 156613400, 156675760, 156738190, 156800590, 163523940, 163590940, 163657970, 163725020, 163792050, 163858990, 163926060, 163993060, 164060060, 164127070, 164194060, 164261140, 164328080, 164395100, 164462160, 164529180, 164596200, 164663170, 164730190, 164797250, 164864260, 164931220, 164998290, 165065280, 165132290, 165199300, 165266290, 165333360, 165400320, 165467330, 165534380, 165601400, 165668380, 165735400, 165802420, 165869470, 165936500, 166003440, 166070510, 166137500, 166204510, 166271520, 166338510, 166405580, 166472530, 166539550, 166606610, 166673630, 166740640, 166807620, 166874640, 166941700, 167008700, 167075660, 167142740, 167209730, 167276740, 167343740, 167410740, 167477810, 167544770, 167611780, 167678830, 167745860, 167812830, 167879840, 167946860, 168013920, 168080940, 168147890, 168214960, 168281950, 174677020, 174748640, 174820290, 174891950, 174963620, 175035220, 175106880, 175178500, 175250140, 175321800, 175393400, 175465070, 175536670, 175608340, 175680000, 175751650, 175823260, 175894850, 175966500, 176038160, 176109840, 176181420, 176253090, 176324700, 176396350, 176468000, 176539620, 176611280, 176682860, 176754540, 176826200, 176897860, 176969440, 177041060, 177112700, 177184370, 177256030, 177327630, 177399300, 177470910, 177542560, 177614200, 177685820, 177757490, 177829090, 177900750, 177972420, 178044060, 178115680, 178187260, 178258910, 178330580, 178402260, 178473840, 178545500, 178617120, 178688770, 178760420, 178832030, 178903700, 178975280, 179046930, 179118620, 179190240, 179261820, 179333500, 179405120, 179476820, 179548480, 179620050, 179691710, 179763330, 185830080, 185906380, 185982620, 186058930, 186135220, 186211420, 186287740, 186363950, 186440220, 186516500, 186592700, 186669020, 186745230, 186821520, 186897820, 186974060, 187050370, 187126580, 187202820, 187279120, 187355420, 187431620, 187507940, 187584140, 187660420, 187736690, 187812900, 187889220, 187965400, 188041710, 188118020, 188194260, 188270460, 188346770, 188423000, 188499310, 188575600, 188651800, 188728130, 188804340, 188880600, 188956880, 189033090, 189109400, 189185620, 189261900, 189338200, 189414450, 189490750, 189566960, 189643200, 189719500, 189795800, 189872000, 189948320, 190024530, 190100800, 190177070, 190253280, 190329600, 190405800, 190482100, 190558400, 190634640, 190710850, 190787150, 190863400, 190939700, 191015980, 191092200, 191168510, 191244720, 196983170, 197064080, 197144940, 197225890, 197306820, 197387630, 197468530, 197549460, 197630300, 197711150, 197792080, 197872980, 197953800, 198034720, 198115660, 198196530, 198277440, 198358260, 198439120, 198520060, 198600980, 198681810, 198762700, 198843630, 198924480, 199005330, 199086260, 199167150, 199247980, 199328900, 199409840, 199490690, 199571520, 199652450, 199733300, 199814240, 199895170, 199975980, 200056910, 200137800, 200218660, 200299520, 200380400, 200461330, 200542140, 200623070, 200704020, 200784860, 200865800, 200946620, 201027470, 201108420, 201189330, 201270160, 201351090, 201431970, 201512830, 201593700, 201674580, 201755500, 201836340, 201917250, 201998190, 202079040, 202159870, 202240800, 202321650, 202402600, 202483520, 202564340, 202645260, 202726140, 208136260, 208221810, 208307310, 208392850, 208478380, 208563840, 208649390, 208734900, 208820380, 208905870, 208991380, 209076930, 209162380, 209247920, 209333460, 209418960, 209504510, 209589970, 209675470, 209761010, 209846560, 209932000, 210017550, 210103060, 210188540, 210274030, 210359540, 210445090, 210530530, 210616080, 210701620, 210787120, 210872580, 210958130, 211043630, 211129170, 211214700, 211300160, 211385710, 211471220, 211556700, 211642190, 211727700, 211813250, 211898700, 211984240, 212069780, 212155280, 212240830, 212326290, 212411790, 212497330, 212582880, 212668320, 212753870, 212839380, 212924860, 213010350, 213095860, 213181400, 213266850, 213352400, 213437940, 213523440, 213608900, 213694450, 213779950, 213865490, 213951020, 214036480, 214122030, 214207540, 219289340, 219379500, 219469630, 219559800, 219649980, 219740060, 219830200, 219920340, 220010460, 220100590, 220190720, 220280860, 220370940, 220461120, 220551300, 220641420, 220731580, 220821650, 220911780, 221001950, 221092110, 221182200, 221272350, 221362480, 221452600, 221542740, 221632860, 221723000, 221813100, 221903260, 221993440, 222083570, 222173630, 222263790, 222353920, 222444100, 222534270, 222624350, 222714500, 222804620, 222894750, 222984880, 223075000, 223165150, 223255230, 223345400, 223435580, 223525710, 223615870, 223705940, 223796060, 223886240, 223976400, 224066500, 224156640, 224246770, 224336900, 224427020, 224517150, 224607300, 224697390, 224787550, 224877730, 224967860, 225057920, 225148080, 225238200, 225328380, 225418560, 225508640, 225598780, 225688910, 230442430, 230537230, 230631970, 230726750, 230821550, 230916270, 231011040, 231105780, 231200540, 231295310, 231390050, 231484820, 231579540, 231674340, 231769120, 231863860, 231958660, 232053360, 232148100, 232242880, 232337700, 232432400, 232527200, 232621900, 232716670, 232811440, 232906140, 233000940, 233095650, 233190460, 233285250, 233379980, 233474690, 233569490, 233664220, 233759000, 233853810, 233948530, 234043330, 234138030, 234232800, 234327570, 234422270, 234517070, 234611790, 234706600, 234801380, 234896110, 234990910, 235085620, 235180350, 235275140, 235369950, 235464660, 235559460, 235654160, 235748930, 235843700, 235938400, 236033200, 236127900, 236222720, 236317500, 236412240, 236506940, 236601740, 236696480, 236791260, 236886060, 236980780, 237075580, 237170320, 241595520, 241694930, 241794290, 241893740, 241993150, 242092460, 242191890, 242291250, 242390620, 242490000, 242589360, 242688780, 242788100, 242887500, 242986960, 243086320, 243185760, 243285040, 243384400, 243483860, 243583250, 243682580, 243782000, 243881360, 243980740, 244080110, 244179470, 244278900, 244378220, 244477620, 244577070, 244676430, 244775710, 244875150, 244974510, 245073970, 245173380, 245272690, 245372110, 245471470, 245570850, 245670220, 245769580, 245869010, 245968320, 246067730, 246167180, 246266540, 246365980, 246465260, 246564620, 246664080, 246763470, 246862800, 246962220, 247061580, 247160960, 247260340, 247359700, 247459120, 247558450, 247657840, 247757300, 247856660, 247955940, 248055380, 248154740, 248254190, 248353600, 248452910, 248552340, 248651700, 252748580, 252852670, 252956620, 253060700, 253164720, 253268660, 253372720, 253476700, 253580700, 253684700, 253788690, 253892750, 253996690, 254100700, 254204780, 254308770, 254412830, 254516740, 254620720, 254724800, 254828830, 254932750, 255036820, 255140800, 255244800, 255348800, 255452780, 255556850, 255660770, 255764800, 255868880, 255972860, 256076770, 256180830, 256284820, 256388900, 256492910, 256596850, 256700910, 256804900, 256908900, 257012900, 257116880, 257220940, 257324880, 257428900, 257532980, 257636960, 257741020, 257844930, 257948910, 258053000, 258157020, 258260940, 258365010, 258469000, 258573000, 258677000, 258780980, 258885040, 258988960, 259093000, 259197070, 259301060, 259404960, 259509020, 259613010, 259717090, 259821100, 259925040, 260029100, 260133090, 263901660, 264010340, 264118980, 264227660, 264336320, 264444880, 264553540, 264662180, 264770780, 264879400, 264988030, 265096690, 265205250, 265313900, 265422600, 265531230, 265639900, 265748420, 265857060, 265965740, 266074380, 266182960, 266291620, 266400260, 266508860, 266617470, 266726110, 266834770, 266943340, 267051980, 267160670, 267269310, 267377820, 267486500, 267595140, 267703820, 267812480, 267921040, 268029700, 268138340, 268246940, 268355550, 268464200, 268572830, 268681400, 268790050, 268898750, 269007400, 269116060, 269224580, 269333220, 269441920, 269550560, 269659140, 269767780, 269876400, 269985020, 270093660, 270202270, 270310900, 270419460, 270528160, 270636830, 270745440, 270853980, 270962700, 271071300, 271179970, 271288640, 271397220, 271505900, 271614460, 275054750, 275168100, 275281300, 275394620, 275507900, 275621100, 275734400, 275847600, 275960860, 276074100, 276187330, 276300640, 276413800, 276527100, 276640420, 276753630, 276866980, 276980160, 277093380, 277206700, 277319970, 277433150, 277546430, 277659650, 277772930, 277886200, 277999420, 278112700, 278225900, 278339170, 278452480, 278565700, 278678880, 278792220, 278905440, 279018750, 279132060, 279245220, 279358530, 279471740, 279585000, 279698240, 279811460, 279924770, 280037920, 280151230, 280264540, 280377760, 280491100, 280604300, 280717500, 280830820, 280944100, 281057280, 281170560, 281283780, 281397060, 281510340, 281623550, 281736830, 281850020, 281963300, 282076600, 282189860, 282303000, 282416320, 282529570, 282642880, 282756200, 282869340, 282982660, 283095870, 286207840, 286325760, 286443650, 286561600, 286679500, 286797300, 286915230, 287033060, 287150940, 287268830, 287386660, 287504580, 287622400, 287740300, 287858240, 287976130, 288094050, 288211840, 288329660, 288447600, 288565570, 288683360, 288801280, 288919100, 289037000, 289154880, 289272700, 289390620, 289508400, 289626370, 289744320, 289862140, 289979940, 290097860, 290215740, 290333700, 290451600, 290569400, 290687330, 290805150, 290923000, 291040930, 291158750, 291276670, 291394500, 291512400, 291630340, 291748220, 291866140, 291983940, 292101760, 292219700, 292337660, 292455460, 292573380, 292691200, 292809100, 292926980, 293044800, 293162720, 293280500, 293398460, 293516400, 293634240, 293752030, 293869950, 293987840, 294105800, 294223680, 294341500, 294459420, 294577250, 297360930, 297483500, 297605980, 297728500, 297851070, 297973540, 298096030, 298218560, 298341020, 298463500, 298586020, 298708500, 298830980, 298953540, 299076030, 299198560, 299321120, 299443500, 299566000, 299688580, 299811070, 299933540, 300056060, 300178600, 300301060, 300423520, 300546050, 300668580, 300791040, 300913540, 301036100, 301158620, 301281000, 301403550, 301526080, 301648580, 301771140, 301893600, 302016100, 302138620, 302261120, 302383550, 302506080, 302628580, 302751040, 302873600, 302996100, 303118620, 303241180, 303363550, 303486080, 303608640, 303731170, 303853600, 303976130, 304098660, 304221120, 304343580, 304466100, 304588640, 304711070, 304833600, 304956160, 305078700, 305201060, 305323620, 305446140, 305568640, 305691200, 305813660, 305936160, 306058700, 308514020, 308641250, 308768320, 308895460, 309022700, 309149700, 309276900, 309404000, 309531100, 309658200, 309785300, 309912500, 310039520, 310166750, 310293900, 310421000, 310548200, 310675200, 310802370, 310929470, 311056700, 311183700, 311310900, 311438000, 311565120, 311692220, 311819330, 311946530, 312073540, 312200770, 312327870, 312455040, 312582050, 312709250, 312836350, 312963500, 313090720, 313217730, 313344930, 313472030, 313599100, 313726240, 313853340, 313980540, 314107550, 314234780, 314361900, 314489020, 314616220, 314743200, 314870400, 314997500, 315124740, 315251740, 315378940, 315506050, 315633150, 315760260, 315887360, 316014560, 316141570, 316268800, 316395900, 316523100, 316650080, 316777280, 316904420, 317031520, 317158750, 317285760, 317412960, 317540060, 319667100, 319798940, 319930620, 320062460, 320194240, 320325980, 320457660, 320589440, 320721180, 320852930, 320984700, 321116380, 321248130, 321379900, 321511740, 321643420, 321775260, 321906900, 322038660, 322170460, 322302240, 322433920, 322565700, 322697440, 322829200, 322960930, 323092670, 323224450, 323356130, 323487900, 323619700, 323751460, 323883100, 324014940, 324146620, 324278460, 324410240, 324541920, 324673730, 324805440, 324937150, 325068930, 325200640, 325332450, 325464130, 325595900, 325727740, 325859420, 325991260, 326122900, 326254700, 326386400, 326518240, 326649920, 326781730, 326913440, 327045200, 327176930, 327308640, 327440450, 327572130, 327703970, 327835680, 327967460, 328099100, 328230940, 328362620, 328494460, 328626240, 328757920, 328889730, 329021440, 330820200, 330956700, 331092960, 331229380, 331365820, 331502100, 331638530, 331774880, 331911260, 332047650, 332184000, 332320420, 332456700, 332593150, 332729570, 332865820, 333002340, 333138620, 333274940, 333411420, 333547800, 333684100, 333820500, 333956860, 334093250, 334229630, 334365980, 334502430, 334638700, 334775100, 334911550, 335047870, 335184160, 335320670, 335456930, 335593380, 335729800, 335866100, 336002500, 336138850, 336275260, 336411620, 336547970, 336684350, 336820670, 336957100, 337093540, 337229800, 337366300, 337502560, 337638900, 337775360, 337911780, 338048030, 338184480, 338320830, 338457200, 338593600, 338729950, 338866400, 339002660, 339139070, 339275520, 339411870, 339548100, 339684600, 339820900, 339957340, 340093760, 340230080, 340366460, 340502820, 341973250, 342114370, 342255330, 342396350, 342537400, 342678340, 342819400, 342960400, 343101340, 343242300, 343383300, 343524350, 343665280, 343806340, 343947360, 344088320, 344229440, 344370340, 344511260, 344652320, 344793340, 344934300, 345075360, 345216350, 345357300, 345498270, 345639260, 345780320, 345921280, 346062300, 346203360, 346344300, 346485200, 346626300, 346767260, 346908300, 347049340, 347190270, 347331330, 347472300, 347613250, 347754270, 347895230, 348036260, 348177200, 348318300, 348459300, 348600220, 348741380, 348882300, 349023200, 349164220, 349305280, 349446270, 349587300, 349728220, 349869250, 350010270, 350151200, 350292220, 350433200, 350574270, 350715300, 350856200, 350997120, 351138270, 351279200, 351420200, 351561280, 351702240, 351843260, 351984200, 353126340, 353272030, 353417730, 353563330, 353708960, 353854530, 354000260, 354145820, 354291420, 354437020, 354582600, 354728320, 354873900, 355019520, 355165120, 355310820, 355456500, 355602050, 355747650, 355893250, 356038980, 356184500, 356330180, 356475800, 356621380, 356766940, 356912580, 357058240, 357203780, 357349500, 357495100, 357640700, 357786240, 357931970, 358077630, 358223230, 358368860, 358514430, 358660100, 358805760, 358951360, 359096900, 359242560, 359388220, 359533800, 359679420, 359825020, 359970700, 360116400, 360261950, 360407550, 360553180, 360698880, 360844400, 360990080, 361135700, 361281280, 361426850, 361572480, 361718140, 361863680, 362009380, 362155000, 362300600, 362446140, 362591870, 362737540, 362883140, 363028770, 363174340, 363320000, 363465660, 364279420, 364429760, 364580000, 364730300, 364880600, 365030720, 365181020, 365331230, 365481500, 365631780, 365781980, 365932300, 366082400, 366232700, 366383000, 366533250, 366683600, 366833760, 366983970, 367134200, 367284500, 367434700, 367584960, 367735200, 367885440, 368035680, 368185920, 368336200, 368486370, 368636670, 368786900, 368937120, 369087300, 369237630, 369387870, 369538180, 369688480, 369838600, 369988900, 370139140, 370289400, 370439600, 370589860, 370740160, 370890340, 371040580, 371190880, 371341120, 371491460, 371641660, 371791840, 371942080, 372092320, 372242560, 372392830, 372543070, 372693300, 372843550, 372993800, 373144060, 373294300, 373444540, 373594780, 373744960, 373895170, 374045500, 374195740, 374346050, 374496300, 374646460, 374796770, 374947000, 375432500, 375587420, 375742300, 375897250, 376052160, 376206980, 376361900, 376516700, 376671580, 376826460, 376981280, 377136200, 377291000, 377445920, 377600860, 377755740, 377910660, 378065440, 378220260, 378375170, 378530080, 378684930, 378839800, 378994620, 379149500, 379304400, 379459200, 379614080, 379768930, 379923840, 380078750, 380233570, 380388350, 380543260, 380698140, 380853100, 381008000, 381162800, 381317730, 381472540, 381627400, 381782300, 381937120, 382092030, 382246850, 382401760, 382556700, 382711580, 382866500, 383021280, 383176100, 383331000, 383485920, 383640770, 383795650, 383950460, 384105340, 384260220, 384415040, 384569920, 384724770, 384879680, 385034600, 385189400, 385344200, 385499100, 385653980, 385808960, 385963840, 386118660, 386273570, 386428380})});
#endif
  return test_cases;
}

template <typename T>
void RunMatMulTest(int32_t opset_version, bool is_a_constant, bool is_b_constant) {
  for (auto t : GenerateTestCases<T>()) {
    SCOPED_TRACE("test case: " + t.name);

    OpTester test("MatMul", opset_version);

    int64_t size0 = TensorShape::FromExistingBuffer(t.input0_dims).SizeHelper(0, t.input0_dims.size());
    std::vector<T> input0_vals = ValueRange<T>(size0);
    test.AddInput<T>("A", t.input0_dims, input0_vals, is_a_constant);

    int64_t size1 = TensorShape::FromExistingBuffer(t.input1_dims).SizeHelper(0, t.input1_dims.size());
    std::vector<T> input1_vals = ValueRange<T>(size1);
    test.AddInput<T>("B", t.input1_dims, input1_vals, is_b_constant);

    test.AddOutput<T>("Y", t.expected_dims, t.expected_vals);

    // OpenVINO EP: Disabled temporarily matmul broadcasting not fully supported
    // Disable TensorRT because of unsupported data type
    // QNN EP: Crash during graph execution for QNN's CPU backend on QNN SDK 2.22. Not a problem for QNN's HTP backend.
    std::unordered_set<std::string> excluded_providers{kTensorrtExecutionProvider,
                                                       kOpenVINOExecutionProvider,
                                                       kQnnExecutionProvider};
    if (t.name == "test 2D empty input") {
      // NNAPI: currently fails for the "test 2D empty input" case
      excluded_providers.insert(kNnapiExecutionProvider);
    }

    // TODO:: Change MatMulNaive Shader to support these test cases webgpu
    std::unordered_set<std::string> webgpu_excluded_test_cases{
        "test left 1D",
        "test right 1D",
        "test 2D empty input"};

    // if test in webgpu_excluded_test_cases, add webgpu to excluded_providers
    if (webgpu_excluded_test_cases.find(t.name) != webgpu_excluded_test_cases.end()) {
      excluded_providers.insert(kWebGpuExecutionProvider);
    }

    test.ConfigExcludeEps(excluded_providers)
        .Config(run_with_tunable_op)
        .RunWithConfig();
  }
}

template <typename T>
void RunMatMulTest(int32_t opset_version) {
  RunMatMulTest<T>(opset_version, false, false);
}

TEST(MathOpTest, MatMulFloatType) {
  // TODO: Unskip when fixed #41968513
  if (DefaultDmlExecutionProvider().get() != nullptr) {
    GTEST_SKIP() << "Skipping because of the following error: Assertion failed: m_bufferTensorDesc.TotalTensorSizeInBytes >= ComputeByteSizeFromDimensions(nonBroadcastDimensions, dataType)";
  }
  RunMatMulTest<float>(7, false, false);
  // Note. Xnnpack only supports matmul when Matrix B is constant
  RunMatMulTest<float>(7, false, true);
}

#if defined(USE_CUDA) || defined(USE_ROCM) || defined(USE_COREML) || defined(USE_XNNPACK)
TEST(MathOpTest, MatMulFloat16) {
#ifdef USE_CUDA
  int min_cuda_architecture = 530;
  if (!HasCudaEnvironment(min_cuda_architecture)) {
    LOGS_DEFAULT(WARNING) << "Hardware NOT support FP16";
    return;
  }
#endif
  // TODO: Unskip when fixed #41968513
  if (DefaultDmlExecutionProvider().get() != nullptr) {
    GTEST_SKIP() << "Skipping because of the following error: Assertion failed: m_bufferTensorDesc.TotalTensorSizeInBytes >= ComputeByteSizeFromDimensions(nonBroadcastDimensions, dataType)";
  }
  RunMatMulTest<MLFloat16>(14, false, false);
  // Note. Xnnpack only supports matmul when Matrix B is constant
  RunMatMulTest<MLFloat16>(14, false, true);
}
#endif

TEST(MathOpTest, MatMulDoubleType) {
  RunMatMulTest<double>(7);
}

TEST(MathOpTest, MatMulInt32Type) {
  // Webgpu does not support int32 matmul
  if (DefaultWebGpuExecutionProvider().get() != nullptr) {
    GTEST_SKIP() << "Skipping because of the following error: Webgpu does not support int32 matmul";
  }
  RunMatMulTest<int32_t>(9);
}

TEST(MathOpTest, MatMulUint32Type) {
  // Webgpu does not support uint32 matmul
  if (DefaultWebGpuExecutionProvider().get() != nullptr) {
    GTEST_SKIP() << "Skipping because of the following error: Webgpu does not support uint32 matmul";
  }
  RunMatMulTest<uint32_t>(9);
}

TEST(MathOpTest, MatMulInt64Type) {
  RunMatMulTest<int64_t>(9);
}

TEST(MathOpTest, MatMulUint64Type) {
  RunMatMulTest<uint64_t>(9);
}

template <typename T>
void RunMatMulZeroKTest() {
  // test with empty inputs and zero filled output
  constexpr const std::array<T, 0> empty_input{};
  const std::vector<T> expected_output(4 * 4, T{});
  OpTester test("MatMul", 13);

  test.AddInput<T>("A", {4, 0}, empty_input);
  test.AddInput<T>("B", {0, 4}, empty_input);
  test.AddOutput<T>("Y", {4, 4}, expected_output);

  // No special case is implemented.
  test.ConfigExcludeEps({kCoreMLExecutionProvider, kNnapiExecutionProvider,
                         kDmlExecutionProvider, kDnnlExecutionProvider, kQnnExecutionProvider,
                         kOpenVINOExecutionProvider, kWebGpuExecutionProvider})
      .Config(run_with_tunable_op)
      .RunWithConfig();
}

TEST(MathOpTest, MatMulZeroKFloatType) {
  if (DefaultWebGpuExecutionProvider().get() != nullptr) {
    GTEST_SKIP() << "Skipping because of the following error: Webgpu does not support zero-sized tensor";
  }
  RunMatMulZeroKTest<float>();
}

TEST(MathOpTest, MatMulZeroKInt32Type) {
  if (DefaultWebGpuExecutionProvider().get() != nullptr) {
    GTEST_SKIP() << "Skipping because of the following error: Webgpu does not support zero-sized tensor";
  }
  RunMatMulZeroKTest<int32_t>();
}

#if defined(USE_CUDA) || defined(USE_ROCM) || defined(USE_COREML) || defined(USE_XNNPACK)
TEST(MathOpTest, MatMul_Float16) {
#ifdef USE_CUDA
  int min_cuda_architecture = 530;
  if (!HasCudaEnvironment(min_cuda_architecture)) {
    LOGS_DEFAULT(WARNING) << "Hardware NOT support FP16";
    return;
  }
#endif
  std::vector<float> A{1.0f, 2.0f, 3.0f, 4.0f,
                       -1.0f, -2.0f, -3.0f, -4.0f};
  std::vector<float> B(12, 1.0f);
  std::vector<float> Y{10.0f, 10.0f, 10.0f,
                       -10.0f, -10.0f, -10.0f};

  std::vector<MLFloat16> f_A(8);
  std::vector<MLFloat16> f_B(12);
  std::vector<MLFloat16> f_Y(6);
  ConvertFloatToMLFloat16(A.data(), f_A.data(), 8);
  ConvertFloatToMLFloat16(B.data(), f_B.data(), 12);
  ConvertFloatToMLFloat16(Y.data(), f_Y.data(), 6);

  auto run_test = [&](bool B_is_constant) {
    // it needs Matrix B as constant to test XNNPack
    OpTester test("MatMul", 14);
    test.AddInput<MLFloat16>("A", {2, 4}, f_A);
    test.AddInput<MLFloat16>("B", {4, 3}, f_B, B_is_constant);
    test.AddOutput<MLFloat16>("Y", {2, 3}, f_Y);
    test.ConfigExcludeEps({kTensorrtExecutionProvider})  // TensorRT: fp16 is not supported
        .Config(run_with_tunable_op)
        .RunWithConfig();
  };
  run_test(true);
  run_test(false);
}
#endif

#if defined(USE_CUDA) || defined(USE_ROCM) || defined(USE_DNNL)
TEST(MathOpTest, MatMul_bfloat16) {
#ifdef USE_CUDA
  int min_cuda_architecture = 530;
  if (!HasCudaEnvironment(min_cuda_architecture)) {
    LOGS_DEFAULT(WARNING) << "Hardware NOT support BFP16";
    return;
  }
#endif
#ifdef USE_DNNL
  if (!DnnlHasBF16Support()) {
    LOGS_DEFAULT(WARNING) << "Hardware does NOT support BF16";
    return;
  }
#endif
  OpTester test("MatMul", 14);

  test.AddInput<BFloat16>("A", {2, 4}, MakeBFloat16({1.0f, 2.0f, 3.0f, 4.0f, -1.0f, -2.0f, -3.0f, -4.0f}));
  test.AddInput<BFloat16>("B", {4, 3}, MakeBFloat16({1.f, 1.f, 1.f, 1.f, 1.f, 1.f, 1.f, 1.f, 1.f, 1.f, 1.f, 1.f}));
  test.AddOutput<BFloat16>("Y", {2, 3}, MakeBFloat16({10.0f, 10.0f, 10.0f, -10.0f, -10.0f, -10.0f}));
  std::vector<std::unique_ptr<IExecutionProvider>> execution_providers;
  test.Config(run_with_tunable_op);
#ifdef USE_CUDA
  execution_providers.emplace_back(DefaultCudaExecutionProvider());
#elif USE_ROCM
  execution_providers.emplace_back(DefaultRocmExecutionProvider(/*test_tunable_op=*/true));
  test.ConfigEps(std::move(execution_providers))
      .RunWithConfig();

  execution_providers.clear();
  execution_providers.emplace_back(DefaultRocmExecutionProvider(/*test_tunable_op=*/false));
#elif USE_DNNL
  execution_providers.emplace_back(DefaultDnnlExecutionProvider());
#endif
  test.ConfigEps(std::move(execution_providers))
      .RunWithConfig();
}
#endif

#ifndef ENABLE_TRAINING
// Prepacking is disabled in full training build so no need to test the feature in a training build.
TEST(MathOpTest, MatMulSharedPrepackedWeights) {
  OpTester test("MatMul");

  std::vector<float> b_init_values(12, 1.0f);
  test.AddInput<float>("A", {2, 4},
                       {1.0f, 2.0f, 3.0f, 4.0f,
                        -1.0f, -2.0f, -3.0f, -4.0f});
  // B is to be an initializer for triggering pre-packing
  test.AddInput<float>("B", {4, 3}, b_init_values, true);

  test.AddOutput<float>("Y", {2, 3},
                        {10.0f, 10.0f, 10.0f,
                         -10.0f, -10.0f, -10.0f});

  OrtValue b;
  Tensor::InitOrtValue(DataTypeImpl::GetType<float>(), TensorShape({4, 3}),
                       b_init_values.data(), OrtMemoryInfo(CPU, OrtAllocatorType::OrtDeviceAllocator), b);

  SessionOptions so;
  // Set up B as a shared initializer to be shared between sessions
  ASSERT_EQ(so.AddInitializer("B", &b), Status::OK());

  // We want all sessions running using this OpTester to be able to share pre-packed weights if applicable
  test.EnableSharingOfPrePackedWeightsAcrossSessions();

  // Pre-packing is limited just to the CPU EP for now and we will only test the CPU EP
  // and we want to ensure that it is available in this build
  auto cpu_ep = []() -> std::vector<std::unique_ptr<IExecutionProvider>> {
    std::vector<std::unique_ptr<IExecutionProvider>> execution_providers;
    execution_providers.push_back(DefaultCpuExecutionProvider());
    return execution_providers;
  };

  size_t number_of_pre_packed_weights_counter_session_1 = 0;
  size_t number_of_shared_pre_packed_weights_counter = 0;

  // Session 1
  {
    test.Config(so)
        .Config(run_with_tunable_op)
        .ConfigEps(cpu_ep())
        .RunWithConfig(&number_of_pre_packed_weights_counter_session_1, &number_of_shared_pre_packed_weights_counter);
    // Assert that no pre-packed weights have been shared thus far
    ASSERT_EQ(number_of_shared_pre_packed_weights_counter, static_cast<size_t>(0));
  }

  auto number_of_elements_in_shared_prepacked_buffers_container =
      test.GetNumPrePackedWeightsShared();
  // Assert that the number of elements in the shared container
  // is the same as the number of weights that have been pre-packed
  ASSERT_EQ(number_of_pre_packed_weights_counter_session_1, number_of_elements_in_shared_prepacked_buffers_container);

  // On some platforms/architectures MLAS may choose to not do any pre-packing and the number of elements
  // that have been pre-packed will be zero in which case we do not continue with the testing
  // of "sharing" of pre-packed weights as there are no pre-packed weights to be shared at all.
  if (number_of_pre_packed_weights_counter_session_1 == 0)
    return;

  // Session 2
  {
    size_t number_of_pre_packed_weights_counter_session_2 = 0;
    test.Config(so)
        .Config(run_with_tunable_op)
        .ConfigEps(cpu_ep())
        .RunWithConfig(&number_of_pre_packed_weights_counter_session_2, &number_of_shared_pre_packed_weights_counter);

    // Assert that the same number of weights were pre-packed in both sessions
    ASSERT_EQ(number_of_pre_packed_weights_counter_session_1, number_of_pre_packed_weights_counter_session_2);

    // Assert that the number of pre-packed weights that were shared equals
    // the number of pre-packed weights in the second session
    ASSERT_EQ(number_of_pre_packed_weights_counter_session_2,
              static_cast<size_t>(number_of_shared_pre_packed_weights_counter));
  }
}

#endif

}  // namespace test
}  // namespace onnxruntime
