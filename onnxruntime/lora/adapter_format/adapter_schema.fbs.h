// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ADAPTERSCHEMA_ONNXRUNTIME_ADAPTERS_H_
#define FLATBUFFERS_GENERATED_ADAPTERSCHEMA_ONNXRUNTIME_ADAPTERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
                  FLATBUFFERS_VERSION_MINOR == 5 &&
                  FLATBUFFERS_VERSION_REVISION == 26,
              "Non-compatible flatbuffers version included");

namespace onnxruntime {
namespace adapters {

struct Parameter;
struct ParameterBuilder;

struct Adapter;
struct AdapterBuilder;

enum class TensorDataType : int32_t {
  UNDEFINED = 0,
  FLOAT = 1,
  UINT8 = 2,
  INT8 = 3,
  UINT16 = 4,
  INT16 = 5,
  INT32 = 6,
  INT64 = 7,
  STRING = 8,
  BOOL = 9,
  FLOAT16 = 10,
  DOUBLE = 11,
  UINT32 = 12,
  UINT64 = 13,
  COMPLEX64 = 14,
  COMPLEX128 = 15,
  BFLOAT16 = 16,
  FLOAT8E4M3FN = 17,
  FLOAT8E4M3FNUZ = 18,
  FLOAT8E5M2 = 19,
  FLOAT8E5M2FNUZ = 20,
  MIN = UNDEFINED,
  MAX = FLOAT8E5M2FNUZ
};

inline const TensorDataType (&EnumValuesTensorDataType())[21] {
  static const TensorDataType values[] = {
      TensorDataType::UNDEFINED,
      TensorDataType::FLOAT,
      TensorDataType::UINT8,
      TensorDataType::INT8,
      TensorDataType::UINT16,
      TensorDataType::INT16,
      TensorDataType::INT32,
      TensorDataType::INT64,
      TensorDataType::STRING,
      TensorDataType::BOOL,
      TensorDataType::FLOAT16,
      TensorDataType::DOUBLE,
      TensorDataType::UINT32,
      TensorDataType::UINT64,
      TensorDataType::COMPLEX64,
      TensorDataType::COMPLEX128,
      TensorDataType::BFLOAT16,
      TensorDataType::FLOAT8E4M3FN,
      TensorDataType::FLOAT8E4M3FNUZ,
      TensorDataType::FLOAT8E5M2,
      TensorDataType::FLOAT8E5M2FNUZ};
  return values;
}

inline const char* const* EnumNamesTensorDataType() {
  static const char* const names[22] = {
      "UNDEFINED",
      "FLOAT",
      "UINT8",
      "INT8",
      "UINT16",
      "INT16",
      "INT32",
      "INT64",
      "STRING",
      "BOOL",
      "FLOAT16",
      "DOUBLE",
      "UINT32",
      "UINT64",
      "COMPLEX64",
      "COMPLEX128",
      "BFLOAT16",
      "FLOAT8E4M3FN",
      "FLOAT8E4M3FNUZ",
      "FLOAT8E5M2",
      "FLOAT8E5M2FNUZ",
      nullptr};
  return names;
}

inline const char* EnumNameTensorDataType(TensorDataType e) {
  if (::flatbuffers::IsOutRange(e, TensorDataType::UNDEFINED, TensorDataType::FLOAT8E5M2FNUZ)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTensorDataType()[index];
}

struct Parameter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ParameterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DIMS = 6,
    VT_DATA_TYPE = 8,
    VT_RAW_DATA = 10
  };
  const ::flatbuffers::String* name() const {
    return GetPointer<const ::flatbuffers::String*>(VT_NAME);
  }
  const ::flatbuffers::Vector<int64_t>* dims() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t>*>(VT_DIMS);
  }
  onnxruntime::adapters::TensorDataType data_type() const {
    return static_cast<onnxruntime::adapters::TensorDataType>(GetField<int32_t>(VT_DATA_TYPE, 0));
  }
  const ::flatbuffers::Vector<uint8_t>* raw_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t>*>(VT_RAW_DATA);
  }
  bool Verify(::flatbuffers::Verifier& verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DIMS) &&
           verifier.VerifyVector(dims()) &&
           VerifyField<int32_t>(verifier, VT_DATA_TYPE, 4) &&
           VerifyOffset(verifier, VT_RAW_DATA) &&
           verifier.VerifyVector(raw_data()) &&
           verifier.EndTable();
  }
};

struct ParameterBuilder {
  typedef Parameter Table;
  ::flatbuffers::FlatBufferBuilder& fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Parameter::VT_NAME, name);
  }
  void add_dims(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> dims) {
    fbb_.AddOffset(Parameter::VT_DIMS, dims);
  }
  void add_data_type(onnxruntime::adapters::TensorDataType data_type) {
    fbb_.AddElement<int32_t>(Parameter::VT_DATA_TYPE, static_cast<int32_t>(data_type), 0);
  }
  void add_raw_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> raw_data) {
    fbb_.AddOffset(Parameter::VT_RAW_DATA, raw_data);
  }
  explicit ParameterBuilder(::flatbuffers::FlatBufferBuilder& _fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Parameter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Parameter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Parameter> CreateParameter(
    ::flatbuffers::FlatBufferBuilder& _fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> dims = 0,
    onnxruntime::adapters::TensorDataType data_type = onnxruntime::adapters::TensorDataType::UNDEFINED,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> raw_data = 0) {
  ParameterBuilder builder_(_fbb);
  builder_.add_raw_data(raw_data);
  builder_.add_data_type(data_type);
  builder_.add_dims(dims);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Parameter> CreateParameterDirect(
    ::flatbuffers::FlatBufferBuilder& _fbb,
    const char* name = nullptr,
    const std::vector<int64_t>* dims = nullptr,
    onnxruntime::adapters::TensorDataType data_type = onnxruntime::adapters::TensorDataType::UNDEFINED,
    const std::vector<uint8_t>* raw_data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto dims__ = dims ? _fbb.CreateVector<int64_t>(*dims) : 0;
  if (raw_data) {
    _fbb.ForceVectorAlignment(raw_data->size(), sizeof(uint8_t), 8);
  }
  auto raw_data__ = raw_data ? _fbb.CreateVector<uint8_t>(*raw_data) : 0;
  return onnxruntime::adapters::CreateParameter(
      _fbb,
      name__,
      dims__,
      data_type,
      raw_data__);
}

struct Adapter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AdapterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FORMAT_VERSION = 4,
    VT_ADAPTER_VERSION = 6,
    VT_MODEL_VERSION = 8,
    VT_PARAMETERS = 10
  };
  int32_t format_version() const {
    return GetField<int32_t>(VT_FORMAT_VERSION, 0);
  }
  int32_t adapter_version() const {
    return GetField<int32_t>(VT_ADAPTER_VERSION, 0);
  }
  int32_t model_version() const {
    return GetField<int32_t>(VT_MODEL_VERSION, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<onnxruntime::adapters::Parameter>>* parameters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<onnxruntime::adapters::Parameter>>*>(VT_PARAMETERS);
  }
  bool Verify(::flatbuffers::Verifier& verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_FORMAT_VERSION, 4) &&
           VerifyField<int32_t>(verifier, VT_ADAPTER_VERSION, 4) &&
           VerifyField<int32_t>(verifier, VT_MODEL_VERSION, 4) &&
           VerifyOffset(verifier, VT_PARAMETERS) &&
           verifier.VerifyVector(parameters()) &&
           verifier.VerifyVectorOfTables(parameters()) &&
           verifier.EndTable();
  }
};

struct AdapterBuilder {
  typedef Adapter Table;
  ::flatbuffers::FlatBufferBuilder& fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_format_version(int32_t format_version) {
    fbb_.AddElement<int32_t>(Adapter::VT_FORMAT_VERSION, format_version, 0);
  }
  void add_adapter_version(int32_t adapter_version) {
    fbb_.AddElement<int32_t>(Adapter::VT_ADAPTER_VERSION, adapter_version, 0);
  }
  void add_model_version(int32_t model_version) {
    fbb_.AddElement<int32_t>(Adapter::VT_MODEL_VERSION, model_version, 0);
  }
  void add_parameters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<onnxruntime::adapters::Parameter>>> parameters) {
    fbb_.AddOffset(Adapter::VT_PARAMETERS, parameters);
  }
  explicit AdapterBuilder(::flatbuffers::FlatBufferBuilder& _fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Adapter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Adapter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Adapter> CreateAdapter(
    ::flatbuffers::FlatBufferBuilder& _fbb,
    int32_t format_version = 0,
    int32_t adapter_version = 0,
    int32_t model_version = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<onnxruntime::adapters::Parameter>>> parameters = 0) {
  AdapterBuilder builder_(_fbb);
  builder_.add_parameters(parameters);
  builder_.add_model_version(model_version);
  builder_.add_adapter_version(adapter_version);
  builder_.add_format_version(format_version);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Adapter> CreateAdapterDirect(
    ::flatbuffers::FlatBufferBuilder& _fbb,
    int32_t format_version = 0,
    int32_t adapter_version = 0,
    int32_t model_version = 0,
    const std::vector<::flatbuffers::Offset<onnxruntime::adapters::Parameter>>* parameters = nullptr) {
  auto parameters__ = parameters ? _fbb.CreateVector<::flatbuffers::Offset<onnxruntime::adapters::Parameter>>(*parameters) : 0;
  return onnxruntime::adapters::CreateAdapter(
      _fbb,
      format_version,
      adapter_version,
      model_version,
      parameters__);
}

inline const onnxruntime::adapters::Adapter* GetAdapter(const void* buf) {
  return ::flatbuffers::GetRoot<onnxruntime::adapters::Adapter>(buf);
}

inline const onnxruntime::adapters::Adapter* GetSizePrefixedAdapter(const void* buf) {
  return ::flatbuffers::GetSizePrefixedRoot<onnxruntime::adapters::Adapter>(buf);
}

inline const char* AdapterIdentifier() {
  return "TORT";
}

inline bool AdapterBufferHasIdentifier(const void* buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AdapterIdentifier());
}

inline bool SizePrefixedAdapterBufferHasIdentifier(const void* buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AdapterIdentifier(), true);
}

inline bool VerifyAdapterBuffer(
    ::flatbuffers::Verifier& verifier) {
  return verifier.VerifyBuffer<onnxruntime::adapters::Adapter>(AdapterIdentifier());
}

inline bool VerifySizePrefixedAdapterBuffer(
    ::flatbuffers::Verifier& verifier) {
  return verifier.VerifySizePrefixedBuffer<onnxruntime::adapters::Adapter>(AdapterIdentifier());
}

inline void FinishAdapterBuffer(
    ::flatbuffers::FlatBufferBuilder& fbb,
    ::flatbuffers::Offset<onnxruntime::adapters::Adapter> root) {
  fbb.Finish(root, AdapterIdentifier());
}

inline void FinishSizePrefixedAdapterBuffer(
    ::flatbuffers::FlatBufferBuilder& fbb,
    ::flatbuffers::Offset<onnxruntime::adapters::Adapter> root) {
  fbb.FinishSizePrefixed(root, AdapterIdentifier());
}

}  // namespace adapters
}  // namespace onnxruntime

#endif  // FLATBUFFERS_GENERATED_ADAPTERSCHEMA_ONNXRUNTIME_ADAPTERS_H_
